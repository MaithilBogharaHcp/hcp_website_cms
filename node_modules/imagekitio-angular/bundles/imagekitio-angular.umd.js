(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('imagekit-javascript'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('imagekitio-angular', ['exports', '@angular/core', 'imagekit-javascript', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["imagekitio-angular"] = {}, global.ng.core, global.ImageKit, global.ng.common));
})(this, (function (exports, i0, ImageKit, i2) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var ImageKit__default = /*#__PURE__*/_interopDefaultLegacy(ImageKit);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var SDK_VERSION = '5.0.0';
    var ImageKitConfiguration = /** @class */ (function () {
        function ImageKitConfiguration() {
        }
        return ImageKitConfiguration;
    }());
    var ImagekitService = /** @class */ (function () {
        function ImagekitService(configuration) {
            this.configuration = configuration;
            (configuration.sdkVersion = "angular-" + SDK_VERSION),
                (this._ikInstance = new ImageKit__default["default"](this.configuration));
        }
        Object.defineProperty(ImagekitService.prototype, "ikInstance", {
            get: function () {
                return this._ikInstance;
            },
            enumerable: false,
            configurable: true
        });
        ImagekitService.prototype.getUrl = function (config) {
            var url = this._ikInstance.url(config);
            return url;
        };
        return ImagekitService;
    }());
    ImagekitService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ImagekitService, deps: [{ token: ImageKitConfiguration }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ImagekitService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ImagekitService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ImagekitService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: ImageKitConfiguration }]; } });

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise, SuppressedError, Symbol */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
        function accept(f) { if (f !== void 0 && typeof f !== "function")
            throw new TypeError("Function expected"); return f; }
        var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
        var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
        var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
        var _, done = false;
        for (var i = decorators.length - 1; i >= 0; i--) {
            var context = {};
            for (var p in contextIn)
                context[p] = p === "access" ? {} : contextIn[p];
            for (var p in contextIn.access)
                context.access[p] = contextIn.access[p];
            context.addInitializer = function (f) { if (done)
                throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
            var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
            if (kind === "accessor") {
                if (result === void 0)
                    continue;
                if (result === null || typeof result !== "object")
                    throw new TypeError("Object expected");
                if (_ = accept(result.get))
                    descriptor.get = _;
                if (_ = accept(result.set))
                    descriptor.set = _;
                if (_ = accept(result.init))
                    initializers.unshift(_);
            }
            else if (_ = accept(result)) {
                if (kind === "field")
                    initializers.unshift(_);
                else
                    descriptor[key] = _;
            }
        }
        if (target)
            Object.defineProperty(target, contextIn.name, descriptor);
        done = true;
    }
    ;
    function __runInitializers(thisArg, initializers, value) {
        var useValue = arguments.length > 2;
        for (var i = 0; i < initializers.length; i++) {
            value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
        }
        return useValue ? value : void 0;
    }
    ;
    function __propKey(x) {
        return typeof x === "symbol" ? x : "".concat(x);
    }
    ;
    function __setFunctionName(f, name, prefix) {
        if (typeof name === "symbol")
            name = name.description ? "[".concat(name.description, "]") : "";
        return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
    }
    ;
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (g && (g = 0, op[0] && (_ = 0)), _)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: function () { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }
    function __classPrivateFieldIn(state, receiver) {
        if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function"))
            throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
    }
    function __addDisposableResource(env, value, async) {
        if (value !== null && value !== void 0) {
            if (typeof value !== "object" && typeof value !== "function")
                throw new TypeError("Object expected.");
            var dispose;
            if (async) {
                if (!Symbol.asyncDispose)
                    throw new TypeError("Symbol.asyncDispose is not defined.");
                dispose = value[Symbol.asyncDispose];
            }
            if (dispose === void 0) {
                if (!Symbol.dispose)
                    throw new TypeError("Symbol.dispose is not defined.");
                dispose = value[Symbol.dispose];
            }
            if (typeof dispose !== "function")
                throw new TypeError("Object not disposable.");
            env.stack.push({ value: value, dispose: dispose, async: async });
        }
        else if (async) {
            env.stack.push({ async: true });
        }
        return value;
    }
    var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
        var e = new Error(message);
        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };
    function __disposeResources(env) {
        function fail(e) {
            env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
            env.hasError = true;
        }
        function next() {
            while (env.stack.length) {
                var rec = env.stack.pop();
                try {
                    var result = rec.dispose && rec.dispose.call(rec.value);
                    if (rec.async)
                        return Promise.resolve(result).then(next, function (e) { fail(e); return next(); });
                }
                catch (e) {
                    fail(e);
                }
            }
            if (env.hasError)
                throw env.error;
        }
        return next();
    }
    var tslib_es6 = {
        __extends: __extends,
        __assign: __assign,
        __rest: __rest,
        __decorate: __decorate,
        __param: __param,
        __metadata: __metadata,
        __awaiter: __awaiter,
        __generator: __generator,
        __createBinding: __createBinding,
        __exportStar: __exportStar,
        __values: __values,
        __read: __read,
        __spread: __spread,
        __spreadArrays: __spreadArrays,
        __spreadArray: __spreadArray,
        __await: __await,
        __asyncGenerator: __asyncGenerator,
        __asyncDelegator: __asyncDelegator,
        __asyncValues: __asyncValues,
        __makeTemplateObject: __makeTemplateObject,
        __importStar: __importStar,
        __importDefault: __importDefault,
        __classPrivateFieldGet: __classPrivateFieldGet,
        __classPrivateFieldSet: __classPrivateFieldSet,
        __classPrivateFieldIn: __classPrivateFieldIn,
        __addDisposableResource: __addDisposableResource,
        __disposeResources: __disposeResources,
    };

    var IkImageComponent = /** @class */ (function () {
        function IkImageComponent(el, imagekit) {
            var _this = this;
            this.el = el;
            this.imagekit = imagekit;
            this.transformation = [];
            this.url = '';
            this.lqipUrl = '';
            this.onImageLoaded = function (event) {
                var _a = _this, loading = _a.loading, lqipUrl = _a.lqipUrl, url = _a.url;
                if (loading !== 'lazy' && event.srcElement.src === lqipUrl) {
                    _this.loadImage(_this, url);
                }
            };
        }
        IkImageComponent.prototype.ngOnInit = function () {
            var options = this.src ? { src: this.src } : { path: this.path };
            options.urlEndpoint = this.urlEndpoint ? this.urlEndpoint : this.imagekit._ikInstance.options.urlEndpoint;
            options.transformation = this.transformation;
            options.transformationPosition = this.transformationPosition;
            options.queryParameters = this.queryParameters;
            options.lqip = this.lqip;
            this.setUrl(options);
        };
        IkImageComponent.prototype.ngOnChanges = function () {
            this.ngOnInit();
            this.ngAfterViewInit();
        };
        IkImageComponent.prototype.ngAfterViewInit = function () {
            if (this.loading == 'lazy') {
                var that_1 = this;
                if (this.lqipUrl) {
                    // If given LQIP, use that first
                    this.loadImage(this, this.lqipUrl);
                }
                var imageObserver = new IntersectionObserver(function (entry, observer) {
                    // Always load the original image when intersecting
                    that_1.handleIntersectionObserver(entry, observer, that_1.loadImage, that_1, that_1.url);
                });
                imageObserver.observe(this.el.nativeElement);
            }
            else {
                // If given LQIP, use that first
                this.loadImage(this, this.lqipUrl ? this.lqipUrl : this.url);
            }
        };
        IkImageComponent.prototype.handleIntersectionObserver = function (entry, observer, loadImageFunc, context, url) {
            if (entry[0] && entry[0].isIntersecting) {
                var image = entry[0].target;
                loadImageFunc(context, url);
                observer.unobserve(image);
            }
        };
        IkImageComponent.prototype.setUrl = function (options) {
            var config = this.getConfigObject(options);
            this.url = this.imagekit.getUrl(config);
            if (options.lqip && options.lqip.active === true) {
                this.lqipUrl = this.constructLqipUrl(options, options.lqip);
            }
        };
        IkImageComponent.prototype.constructLqipUrl = function (options, lqip) {
            if (lqip && lqip.active) {
                var quality = Math.round(lqip.quality || lqip.threshold || 20);
                var blur = Math.round(lqip.blur || 6);
                var newTransformation = options.transformation ? __spreadArray([], __read(options.transformation)) : [];
                if (lqip.raw && typeof lqip.raw === "string" && lqip.raw.trim() != "") {
                    newTransformation.push({
                        raw: lqip.raw.trim()
                    });
                }
                else {
                    newTransformation.push({
                        quality: String(quality),
                        blur: String(blur),
                    });
                }
                return this.imagekit.ikInstance.url(Object.assign(Object.assign({}, options), { transformation: newTransformation }));
            }
        };
        IkImageComponent.prototype.getConfigObject = function (options) {
            var config = {
                transformation: options.transformation
            };
            if (options.urlEndpoint) {
                config['urlEndpoint'] = options.urlEndpoint;
            }
            else {
                throw new Error('Missing urlEndpoint initialization!');
            }
            if (options.queryParameters) {
                config['queryParameters'] = options.queryParameters;
            }
            if (options.src) {
                config['src'] = options.src;
                config['transformationPosition'] = 'query';
            }
            else if (options.path) {
                config['path'] = options.path;
                if (options.transformationPosition) {
                    config['transformationPosition'] = options.transformationPosition;
                }
            }
            else {
                throw new Error('Missing src / path during initialization!');
            }
            return config;
        };
        IkImageComponent.prototype.loadImage = function (context, url) {
            var nativeElement = context.el.nativeElement;
            var attributes = nativeElement.attributes;
            var attrsToSet = context.namedNodeMapToObject(attributes);
            attrsToSet['src'] = url;
            var image = nativeElement.children[0];
            context.setElementAttributes(image, attrsToSet);
        };
        IkImageComponent.prototype.namedNodeMapToObject = function (source) {
            var target = {};
            Object.keys(source).forEach(function (index) {
                var name = source[index].name;
                var value = source[index].value;
                target[name] = value;
            });
            return target;
        };
        ;
        IkImageComponent.prototype.setElementAttributes = function (element, attributesLiteral) {
            Object.keys(attributesLiteral).filter(function (attrName) { return attrName !== 'loading'; }).forEach(function (attrName) {
                element.setAttribute(attrName, attributesLiteral[attrName]);
            });
        };
        return IkImageComponent;
    }());
    IkImageComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: IkImageComponent, deps: [{ token: i0__namespace.ElementRef }, { token: ImagekitService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    IkImageComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IkImageComponent, selector: "ik-image", inputs: { src: "src", path: "path", urlEndpoint: "urlEndpoint", transformation: "transformation", transformationPosition: "transformationPosition", queryParameters: "queryParameters", lqip: "lqip", loading: "loading" }, usesOnChanges: true, ngImport: i0__namespace, template: "<img src='' (load)=\"onImageLoaded($event)\">", isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: IkImageComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ik-image',
                        template: "<img src='' (load)=\"onImageLoaded($event)\">",
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }, { type: ImagekitService }]; }, propDecorators: { src: [{
                    type: i0.Input,
                    args: ['src']
                }], path: [{
                    type: i0.Input,
                    args: ['path']
                }], urlEndpoint: [{
                    type: i0.Input,
                    args: ['urlEndpoint']
                }], transformation: [{
                    type: i0.Input,
                    args: ['transformation']
                }], transformationPosition: [{
                    type: i0.Input,
                    args: ['transformationPosition']
                }], queryParameters: [{
                    type: i0.Input,
                    args: ['queryParameters']
                }], lqip: [{
                    type: i0.Input,
                    args: ['lqip']
                }], loading: [{
                    type: i0.Input,
                    args: ['loading']
                }] } });

    var IkVideoComponent = /** @class */ (function () {
        function IkVideoComponent(el, imagekit) {
            this.el = el;
            this.imagekit = imagekit;
            this.transformation = [];
            this.url = '';
        }
        IkVideoComponent.prototype.ngOnInit = function () {
            var options = this.src ? { src: this.src } : { path: this.path };
            options.transformation = this.transformation;
            options.transformationPosition = this.transformationPosition;
            options.urlEndpoint = this.urlEndpoint;
            options.queryParameters = this.queryParameters;
            this.setUrl(options);
        };
        IkVideoComponent.prototype.ngAfterViewInit = function () {
            this.loadVideo(this.url);
        };
        IkVideoComponent.prototype.loadVideo = function (url) {
            var nativeElement = this.el.nativeElement;
            var attributes = nativeElement.attributes;
            var attrsToSet = this.namedNodeMapToObject(attributes);
            attrsToSet['src'] = url;
            var video = nativeElement.children[0];
            this.setElementAttributes(video, attrsToSet);
        };
        IkVideoComponent.prototype.namedNodeMapToObject = function (source) {
            var target = {};
            Object.keys(source).forEach(function (index) {
                var name = source[index].name;
                var value = source[index].value;
                target[name] = value;
            });
            return target;
        };
        ;
        IkVideoComponent.prototype.setUrl = function (options) {
            var config = this.getConfigObject(options);
            this.url = this.imagekit.getUrl(config);
        };
        IkVideoComponent.prototype.getConfigObject = function (options) {
            var config = {
                transformation: options.transformation,
            };
            if (options.urlEndpoint) {
                config['urlEndpoint'] = options.urlEndpoint;
            }
            else {
                throw new Error('Missing urlEndpoint initialization!');
            }
            if (options.queryParameters) {
                config['queryParameters'] = options.queryParameters;
            }
            if (options.src) {
                config['src'] = options.src;
                config['transformationPosition'] = 'query';
            }
            else if (options.path) {
                config['path'] = options.path;
                if (options.transformationPosition) {
                    config['transformationPosition'] = options.transformationPosition;
                }
            }
            else {
                throw new Error('Missing src / path during initialization!');
            }
            return config;
        };
        IkVideoComponent.prototype.setElementAttributes = function (element, attributesLiteral) {
            Object.keys(attributesLiteral).forEach(function (attrName) {
                element.setAttribute(attrName, attributesLiteral[attrName]);
            });
        };
        return IkVideoComponent;
    }());
    IkVideoComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: IkVideoComponent, deps: [{ token: i0__namespace.ElementRef }, { token: ImagekitService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    IkVideoComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IkVideoComponent, selector: "ik-video", inputs: { urlEndpoint: "urlEndpoint", path: "path", src: "src", transformation: "transformation", transformationPosition: "transformationPosition", queryParameters: "queryParameters" }, ngImport: i0__namespace, template: "<video controls><source src={{src}}>", isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: IkVideoComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ik-video',
                        template: "<video controls><source src={{src}}>",
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }, { type: ImagekitService }]; }, propDecorators: { urlEndpoint: [{
                    type: i0.Input,
                    args: ['urlEndpoint']
                }], path: [{
                    type: i0.Input,
                    args: ['path']
                }], src: [{
                    type: i0.Input,
                    args: ['src']
                }], transformation: [{
                    type: i0.Input,
                    args: ['transformation']
                }], transformationPosition: [{
                    type: i0.Input,
                    args: ['transformationPosition']
                }], queryParameters: [{
                    type: i0.Input,
                    args: ['queryParameters']
                }] } });

    var IkUploadComponent = /** @class */ (function () {
        function IkUploadComponent(el, imagekit) {
            var _this = this;
            this.el = el;
            this.imagekit = imagekit;
            this.onError = new i0.EventEmitter();
            this.onSuccess = new i0.EventEmitter();
            this.fileToUpload = null;
            this.handleAuthResponse = function (_a, ik, params, options, progressCb) {
                var signature = _a.signature, token = _a.token, expire = _a.expire;
                ik.upload(Object.assign(Object.assign({}, params), { signature: signature, token: token, expire: expire }), function (err, result) {
                    _this.handleUploadResponse(err, result, options, progressCb);
                });
            };
        }
        IkUploadComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.buttonRef && this.buttonRef.addEventListener('click', function () { _this.el.nativeElement.children[0].click(); });
        };
        IkUploadComponent.prototype.abort = function () {
            if (this.xhr) {
                this.xhr.abort();
            }
        };
        IkUploadComponent.prototype.handleFileInput = function (e) {
            // Using IK-upload
            var files = e.target.files;
            this.fileToUpload = files.item(0);
            var options = {
                file: this.fileToUpload,
                fileName: this.fileName || this.fileToUpload.name,
                useUniqueFileName: this.useUniqueFileName,
                tags: this.tags,
                folder: this.folder,
                customMetadata: this.customMetadata,
                isPrivateFile: this.isPrivateFile,
                overwriteFile: this.overwriteFile,
                overwriteAITags: this.overwriteAITags,
                overwriteTags: this.overwriteTags,
                overwriteCustomMetadata: this.overwriteCustomMetadata,
                customCoordinates: this.customCoordinates,
                responseFields: this.responseFields,
                extensions: this.extensions,
                webhookUrl: this.webhookUrl,
                onError: this.onError,
                onSuccess: this.onSuccess,
                transformation: this.transformation,
            };
            // Custom validation
            if (!this.checkCustomFileValidation(options.file)) {
                return;
            }
            if (!this.checkAuthenticator(options)) {
                return;
            }
            this.startIkUpload(e, options);
        };
        IkUploadComponent.prototype.checkCustomFileValidation = function (file) {
            if (this.validateFile && typeof this.validateFile === 'function') {
                return this.validateFile(file);
            }
            return true;
        };
        IkUploadComponent.prototype.checkAuthenticator = function (options) {
            if (!this.authenticator || typeof this.authenticator !== "function" || this.authenticator.length !== 0 || !(this.authenticator() instanceof Promise)) {
                return this.throwError("The authenticator function is not provided or is not a function.", options);
            }
            return true;
        };
        IkUploadComponent.prototype.throwError = function (message, options) {
            if (options && options.onError instanceof i0.EventEmitter) {
                options.onError.emit({
                    message: message || "Something went wrong.",
                });
            }
            return false;
        };
        IkUploadComponent.prototype.startIkUpload = function (e, options) {
            var _this = this;
            // Custom upload-start tracker
            if (this.onUploadStart && typeof this.onUploadStart === 'function') {
                this.onUploadStart(e);
            }
            // Custom upload-progress tracker
            options.xhr = new XMLHttpRequest();
            this.xhr = options.xhr;
            var params = this.getUploadParams(options);
            var progressCb = this.createUploadProgressMonitor(options.xhr);
            var ik = this.getIkInstance();
            var authPromise = this.authenticator();
            authPromise.then(function (obj) { return _this.handleAuthResponse(obj, ik, params, options, progressCb); }).catch(function (data) {
                var error;
                if (data instanceof Array) {
                    error = data[0];
                }
                else {
                    error = data;
                }
                _this.throwError(String(error), options);
            });
        };
        IkUploadComponent.prototype.getIkInstance = function () {
            if (this.publicKey === undefined ||
                this.urlEndpoint === undefined) {
                return this.imagekit.ikInstance;
            }
            return new ImagekitService({
                urlEndpoint: this.urlEndpoint,
                publicKey: this.publicKey,
            })._ikInstance;
        };
        IkUploadComponent.prototype.handleUploadResponse = function (err, result, options, progressCb) {
            if (err) {
                this.throwError(err, options);
            }
            else {
                if (options.onSuccess instanceof i0.EventEmitter) {
                    options.onSuccess.emit(result);
                }
                if (options.xhr)
                    options.xhr.upload.removeEventListener('progress', progressCb);
            }
        };
        IkUploadComponent.prototype.createUploadProgressMonitor = function (xhr) {
            var _this = this;
            var progressCb = function (e) {
                if (_this.onUploadProgress && typeof _this.onUploadProgress === 'function') {
                    // Custom upload-progress tracker
                    _this.onUploadProgress(e);
                }
            };
            if (xhr)
                xhr.upload.addEventListener('progress', progressCb);
            return progressCb;
        };
        IkUploadComponent.prototype.getUploadParams = function (options) {
            var params = {
                file: options.file,
                fileName: options.fileName
            };
            if (options.useUniqueFileName !== undefined) {
                Object.assign(params, { useUniqueFileName: options.useUniqueFileName });
            }
            if (options.folder !== undefined) {
                Object.assign(params, { folder: options.folder });
            }
            if (options.customMetadata !== undefined) {
                Object.assign(params, { customMetadata: options.customMetadata });
            }
            if (options.webhookUrl !== undefined) {
                Object.assign(params, { webhookUrl: options.webhookUrl });
            }
            if (options.isPrivateFile !== undefined) {
                Object.assign(params, { isPrivateFile: options.isPrivateFile });
            }
            if (options.overwriteFile !== undefined) {
                Object.assign(params, { overwriteFile: options.overwriteFile });
            }
            if (options.overwriteAITags !== undefined) {
                Object.assign(params, { overwriteAITags: options.overwriteAITags });
            }
            if (options.overwriteTags !== undefined) {
                Object.assign(params, { overwriteTags: options.overwriteTags });
            }
            if (options.overwriteCustomMetadata !== undefined) {
                Object.assign(params, { overwriteCustomMetadata: options.overwriteCustomMetadata });
            }
            if (options.tags !== undefined) {
                Object.assign(params, { tags: options.tags });
            }
            if (options.customCoordinates !== undefined) {
                Object.assign(params, { customCoordinates: options.customCoordinates });
            }
            if (options.responseFields !== undefined) {
                Object.assign(params, { responseFields: options.responseFields });
            }
            if (options.extensions !== undefined) {
                Object.assign(params, { extensions: options.extensions });
            }
            if (options.xhr !== undefined) {
                Object.assign(params, { xhr: options.xhr });
            }
            if (options.transformation !== undefined) {
                Object.assign(params, { transformation: options.transformation });
            }
            return params;
        };
        return IkUploadComponent;
    }());
    IkUploadComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: IkUploadComponent, deps: [{ token: i0__namespace.ElementRef }, { token: ImagekitService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    IkUploadComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IkUploadComponent, selector: "ik-upload", inputs: { fileName: "fileName", useUniqueFileName: "useUniqueFileName", tags: "tags", folder: "folder", publicKey: "publicKey", urlEndpoint: "urlEndpoint", authenticator: "authenticator", isPrivateFile: "isPrivateFile", overwriteFile: "overwriteFile", overwriteAITags: "overwriteAITags", overwriteTags: "overwriteTags", overwriteCustomMetadata: "overwriteCustomMetadata", customCoordinates: "customCoordinates", webhookUrl: "webhookUrl", responseFields: "responseFields", extensions: "extensions", customMetadata: "customMetadata", buttonRef: "buttonRef", validateFile: "validateFile", onUploadStart: "onUploadStart", onUploadProgress: "onUploadProgress", transformation: "transformation" }, outputs: { onError: "onError", onSuccess: "onSuccess" }, providers: [ImagekitService], ngImport: i0__namespace, template: "\n  <input *ngIf=\"buttonRef; else elseBlock\" type=\"file\" (change)=\"handleFileInput($event)\" style=\"display:none\"/>\n  <ng-template #elseBlock>\n    <input type=\"file\" (change)=\"handleFileInput($event)\" />\n  </ng-template>\n  ", isInline: true, directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: IkUploadComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ik-upload',
                        template: "\n  <input *ngIf=\"buttonRef; else elseBlock\" type=\"file\" (change)=\"handleFileInput($event)\" style=\"display:none\"/>\n  <ng-template #elseBlock>\n    <input type=\"file\" (change)=\"handleFileInput($event)\" />\n  </ng-template>\n  ",
                        providers: [ImagekitService]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }, { type: ImagekitService }]; }, propDecorators: { fileName: [{
                    type: i0.Input,
                    args: ['fileName']
                }], useUniqueFileName: [{
                    type: i0.Input,
                    args: ['useUniqueFileName']
                }], tags: [{
                    type: i0.Input,
                    args: ['tags']
                }], folder: [{
                    type: i0.Input,
                    args: ['folder']
                }], publicKey: [{
                    type: i0.Input,
                    args: ['publicKey']
                }], urlEndpoint: [{
                    type: i0.Input,
                    args: ['urlEndpoint']
                }], authenticator: [{
                    type: i0.Input,
                    args: ["authenticator"]
                }], isPrivateFile: [{
                    type: i0.Input,
                    args: ['isPrivateFile']
                }], overwriteFile: [{
                    type: i0.Input,
                    args: ['overwriteFile']
                }], overwriteAITags: [{
                    type: i0.Input,
                    args: ['overwriteAITags']
                }], overwriteTags: [{
                    type: i0.Input,
                    args: ['overwriteTags']
                }], overwriteCustomMetadata: [{
                    type: i0.Input,
                    args: ['overwriteCustomMetadata']
                }], customCoordinates: [{
                    type: i0.Input,
                    args: ['customCoordinates']
                }], webhookUrl: [{
                    type: i0.Input,
                    args: ['webhookUrl']
                }], responseFields: [{
                    type: i0.Input,
                    args: ['responseFields']
                }], extensions: [{
                    type: i0.Input,
                    args: ['extensions']
                }], customMetadata: [{
                    type: i0.Input,
                    args: ['customMetadata']
                }], buttonRef: [{
                    type: i0.Input,
                    args: ['buttonRef']
                }], onError: [{
                    type: i0.Output
                }], onSuccess: [{
                    type: i0.Output
                }], validateFile: [{
                    type: i0.Input,
                    args: ['validateFile']
                }], onUploadStart: [{
                    type: i0.Input,
                    args: ['onUploadStart']
                }], onUploadProgress: [{
                    type: i0.Input,
                    args: ['onUploadProgress']
                }], transformation: [{
                    type: i0.Input,
                    args: ['transformation']
                }] } });

    var ImagekitioAngularModule = /** @class */ (function () {
        function ImagekitioAngularModule() {
        }
        ImagekitioAngularModule.forRoot = function (config) {
            return {
                ngModule: ImagekitioAngularModule,
                providers: [
                    { provide: ImageKitConfiguration, useValue: config }
                ]
            };
        };
        return ImagekitioAngularModule;
    }());
    ImagekitioAngularModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ImagekitioAngularModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ImagekitioAngularModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ImagekitioAngularModule, declarations: [IkImageComponent,
            IkVideoComponent,
            IkUploadComponent], imports: [i2.CommonModule], exports: [IkImageComponent,
            IkVideoComponent,
            IkUploadComponent] });
    ImagekitioAngularModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ImagekitioAngularModule, providers: [ImagekitService], imports: [[i2.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ImagekitioAngularModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            IkImageComponent,
                            IkVideoComponent,
                            IkUploadComponent
                        ],
                        imports: [i2.CommonModule],
                        exports: [
                            IkImageComponent,
                            IkVideoComponent,
                            IkUploadComponent
                        ],
                        providers: [ImagekitService]
                    }]
            }] });

    /*
     * Public API Surface of imagekitio-angular
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.IkImageComponent = IkImageComponent;
    exports.IkUploadComponent = IkUploadComponent;
    exports.IkVideoComponent = IkVideoComponent;
    exports.ImageKitConfiguration = ImageKitConfiguration;
    exports.ImagekitService = ImagekitService;
    exports.ImagekitioAngularModule = ImagekitioAngularModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=imagekitio-angular.umd.js.map
