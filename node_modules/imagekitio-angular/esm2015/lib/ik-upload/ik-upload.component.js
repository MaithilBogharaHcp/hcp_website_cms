import { ElementRef, Component, Input, Output, EventEmitter } from '@angular/core';
import { ImagekitService } from '../imagekitio-angular.service';
import * as i0 from "@angular/core";
import * as i1 from "../imagekitio-angular.service";
import * as i2 from "@angular/common";
export class IkUploadComponent {
    constructor(el, imagekit) {
        this.el = el;
        this.imagekit = imagekit;
        this.onError = new EventEmitter();
        this.onSuccess = new EventEmitter();
        this.fileToUpload = null;
        this.handleAuthResponse = ({ signature, token, expire }, ik, params, options, progressCb) => {
            ik.upload(Object.assign(Object.assign({}, params), { signature, token, expire }), (err, result) => {
                this.handleUploadResponse(err, result, options, progressCb);
            });
        };
    }
    ngAfterViewInit() {
        this.buttonRef && this.buttonRef.addEventListener('click', () => { this.el.nativeElement.children[0].click(); });
    }
    abort() {
        if (this.xhr) {
            this.xhr.abort();
        }
    }
    handleFileInput(e) {
        // Using IK-upload
        const files = e.target.files;
        this.fileToUpload = files.item(0);
        const options = {
            file: this.fileToUpload,
            fileName: this.fileName || this.fileToUpload.name,
            useUniqueFileName: this.useUniqueFileName,
            tags: this.tags,
            folder: this.folder,
            customMetadata: this.customMetadata,
            isPrivateFile: this.isPrivateFile,
            overwriteFile: this.overwriteFile,
            overwriteAITags: this.overwriteAITags,
            overwriteTags: this.overwriteTags,
            overwriteCustomMetadata: this.overwriteCustomMetadata,
            customCoordinates: this.customCoordinates,
            responseFields: this.responseFields,
            extensions: this.extensions,
            webhookUrl: this.webhookUrl,
            onError: this.onError,
            onSuccess: this.onSuccess,
            transformation: this.transformation,
        };
        // Custom validation
        if (!this.checkCustomFileValidation(options.file)) {
            return;
        }
        if (!this.checkAuthenticator(options)) {
            return;
        }
        this.startIkUpload(e, options);
    }
    checkCustomFileValidation(file) {
        if (this.validateFile && typeof this.validateFile === 'function') {
            return this.validateFile(file);
        }
        return true;
    }
    checkAuthenticator(options) {
        if (!this.authenticator || typeof this.authenticator !== "function" || this.authenticator.length !== 0 || !(this.authenticator() instanceof Promise)) {
            return this.throwError("The authenticator function is not provided or is not a function.", options);
        }
        return true;
    }
    throwError(message, options) {
        if (options && options.onError instanceof EventEmitter) {
            options.onError.emit({
                message: message || "Something went wrong.",
            });
        }
        return false;
    }
    startIkUpload(e, options) {
        // Custom upload-start tracker
        if (this.onUploadStart && typeof this.onUploadStart === 'function') {
            this.onUploadStart(e);
        }
        // Custom upload-progress tracker
        options.xhr = new XMLHttpRequest();
        this.xhr = options.xhr;
        const params = this.getUploadParams(options);
        const progressCb = this.createUploadProgressMonitor(options.xhr);
        const ik = this.getIkInstance();
        const authPromise = this.authenticator();
        authPromise.then((obj) => this.handleAuthResponse(obj, ik, params, options, progressCb)).catch((data) => {
            var error;
            if (data instanceof Array) {
                error = data[0];
            }
            else {
                error = data;
            }
            this.throwError(String(error), options);
        });
    }
    getIkInstance() {
        if (this.publicKey === undefined ||
            this.urlEndpoint === undefined) {
            return this.imagekit.ikInstance;
        }
        return new ImagekitService({
            urlEndpoint: this.urlEndpoint,
            publicKey: this.publicKey,
        })._ikInstance;
    }
    handleUploadResponse(err, result, options, progressCb) {
        if (err) {
            this.throwError(err, options);
        }
        else {
            if (options.onSuccess instanceof EventEmitter) {
                options.onSuccess.emit(result);
            }
            if (options.xhr)
                options.xhr.upload.removeEventListener('progress', progressCb);
        }
    }
    createUploadProgressMonitor(xhr) {
        const progressCb = (e) => {
            if (this.onUploadProgress && typeof this.onUploadProgress === 'function') {
                // Custom upload-progress tracker
                this.onUploadProgress(e);
            }
        };
        if (xhr)
            xhr.upload.addEventListener('progress', progressCb);
        return progressCb;
    }
    getUploadParams(options) {
        const params = {
            file: options.file,
            fileName: options.fileName
        };
        if (options.useUniqueFileName !== undefined) {
            Object.assign(params, { useUniqueFileName: options.useUniqueFileName });
        }
        if (options.folder !== undefined) {
            Object.assign(params, { folder: options.folder });
        }
        if (options.customMetadata !== undefined) {
            Object.assign(params, { customMetadata: options.customMetadata });
        }
        if (options.webhookUrl !== undefined) {
            Object.assign(params, { webhookUrl: options.webhookUrl });
        }
        if (options.isPrivateFile !== undefined) {
            Object.assign(params, { isPrivateFile: options.isPrivateFile });
        }
        if (options.overwriteFile !== undefined) {
            Object.assign(params, { overwriteFile: options.overwriteFile });
        }
        if (options.overwriteAITags !== undefined) {
            Object.assign(params, { overwriteAITags: options.overwriteAITags });
        }
        if (options.overwriteTags !== undefined) {
            Object.assign(params, { overwriteTags: options.overwriteTags });
        }
        if (options.overwriteCustomMetadata !== undefined) {
            Object.assign(params, { overwriteCustomMetadata: options.overwriteCustomMetadata });
        }
        if (options.tags !== undefined) {
            Object.assign(params, { tags: options.tags });
        }
        if (options.customCoordinates !== undefined) {
            Object.assign(params, { customCoordinates: options.customCoordinates });
        }
        if (options.responseFields !== undefined) {
            Object.assign(params, { responseFields: options.responseFields });
        }
        if (options.extensions !== undefined) {
            Object.assign(params, { extensions: options.extensions });
        }
        if (options.xhr !== undefined) {
            Object.assign(params, { xhr: options.xhr });
        }
        if (options.transformation !== undefined) {
            Object.assign(params, { transformation: options.transformation });
        }
        return params;
    }
}
IkUploadComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IkUploadComponent, deps: [{ token: i0.ElementRef }, { token: i1.ImagekitService }], target: i0.ɵɵFactoryTarget.Component });
IkUploadComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IkUploadComponent, selector: "ik-upload", inputs: { fileName: "fileName", useUniqueFileName: "useUniqueFileName", tags: "tags", folder: "folder", publicKey: "publicKey", urlEndpoint: "urlEndpoint", authenticator: "authenticator", isPrivateFile: "isPrivateFile", overwriteFile: "overwriteFile", overwriteAITags: "overwriteAITags", overwriteTags: "overwriteTags", overwriteCustomMetadata: "overwriteCustomMetadata", customCoordinates: "customCoordinates", webhookUrl: "webhookUrl", responseFields: "responseFields", extensions: "extensions", customMetadata: "customMetadata", buttonRef: "buttonRef", validateFile: "validateFile", onUploadStart: "onUploadStart", onUploadProgress: "onUploadProgress", transformation: "transformation" }, outputs: { onError: "onError", onSuccess: "onSuccess" }, providers: [ImagekitService], ngImport: i0, template: `
  <input *ngIf="buttonRef; else elseBlock" type="file" (change)="handleFileInput($event)" style="display:none"/>
  <ng-template #elseBlock>
    <input type="file" (change)="handleFileInput($event)" />
  </ng-template>
  `, isInline: true, directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IkUploadComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ik-upload',
                    template: `
  <input *ngIf="buttonRef; else elseBlock" type="file" (change)="handleFileInput($event)" style="display:none"/>
  <ng-template #elseBlock>
    <input type="file" (change)="handleFileInput($event)" />
  </ng-template>
  `,
                    providers: [ImagekitService]
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.ImagekitService }]; }, propDecorators: { fileName: [{
                type: Input,
                args: ['fileName']
            }], useUniqueFileName: [{
                type: Input,
                args: ['useUniqueFileName']
            }], tags: [{
                type: Input,
                args: ['tags']
            }], folder: [{
                type: Input,
                args: ['folder']
            }], publicKey: [{
                type: Input,
                args: ['publicKey']
            }], urlEndpoint: [{
                type: Input,
                args: ['urlEndpoint']
            }], authenticator: [{
                type: Input,
                args: ["authenticator"]
            }], isPrivateFile: [{
                type: Input,
                args: ['isPrivateFile']
            }], overwriteFile: [{
                type: Input,
                args: ['overwriteFile']
            }], overwriteAITags: [{
                type: Input,
                args: ['overwriteAITags']
            }], overwriteTags: [{
                type: Input,
                args: ['overwriteTags']
            }], overwriteCustomMetadata: [{
                type: Input,
                args: ['overwriteCustomMetadata']
            }], customCoordinates: [{
                type: Input,
                args: ['customCoordinates']
            }], webhookUrl: [{
                type: Input,
                args: ['webhookUrl']
            }], responseFields: [{
                type: Input,
                args: ['responseFields']
            }], extensions: [{
                type: Input,
                args: ['extensions']
            }], customMetadata: [{
                type: Input,
                args: ['customMetadata']
            }], buttonRef: [{
                type: Input,
                args: ['buttonRef']
            }], onError: [{
                type: Output
            }], onSuccess: [{
                type: Output
            }], validateFile: [{
                type: Input,
                args: ['validateFile']
            }], onUploadStart: [{
                type: Input,
                args: ['onUploadStart']
            }], onUploadProgress: [{
                type: Input,
                args: ['onUploadProgress']
            }], transformation: [{
                type: Input,
                args: ['transformation']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWstdXBsb2FkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2ltYWdla2l0aW8tYW5ndWxhci9zcmMvbGliL2lrLXVwbG9hZC9pay11cGxvYWQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBaUIsVUFBVSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sK0JBQStCLENBQUM7Ozs7QUFhaEUsTUFBTSxPQUFPLGlCQUFpQjtJQTRCNUIsWUFBb0IsRUFBYyxFQUFVLFFBQXlCO1FBQWpELE9BQUUsR0FBRixFQUFFLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFpQjtRQVQzRCxZQUFPLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDaEQsY0FBUyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBSzVELGlCQUFZLEdBQVMsSUFBSSxDQUFDO1FBNEUxQix1QkFBa0IsR0FBRyxDQUFDLEVBQUMsU0FBUyxFQUFDLEtBQUssRUFBQyxNQUFNLEVBQUMsRUFBQyxFQUFFLEVBQUMsTUFBTSxFQUFDLE9BQU8sRUFBQyxVQUFVLEVBQUUsRUFBRTtZQUM3RSxFQUFFLENBQUMsTUFBTSxpQ0FBTSxNQUFNLEtBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEtBQUksQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLEVBQUU7Z0JBQ2pFLElBQUksQ0FBQyxvQkFBb0IsQ0FDdkIsR0FBRyxFQUNILE1BQU0sRUFDTixPQUFPLEVBQ1AsVUFBVSxDQUNYLENBQUM7WUFDSixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQTtJQWpGRCxDQUFDO0lBRUQsZUFBZTtRQUNiLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxnQkFB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QyxlQUFlO2dCQUNZLHVCQUF1QjtzQkFBeEQsS0FBSzt1QkFBQyx5QkFBeUI7Z0JBQ0osaUJBQWlCO3NCQUE1QyxLQUFLO3VCQUFDLG1CQUFtQjtnQkFDTCxVQUFVO3NCQUE5QixLQUFLO3VCQUFDLFlBQVk7Z0JBQ00sY0FBYztzQkFBdEMsS0FBSzt1QkFBQyxnQkFBZ0I7Z0JBQ0YsVUFBVTtzQkFBOUIsS0FBSzt1QkFBQyxZQUFZO2dCQUNNLGNBQWM7c0JBQXRDLEtBQUs7dUJBQUMsZ0JBQWdCO2dCQUNILFNBQVM7c0JBQTVCLEtBQUs7dUJBQUMsV0FBVztnQkFDUixPQUFPO3NCQUFoQixNQUFNO2dCQUNHLFNBQVM7c0JBQWxCLE1BQU07Z0JBQ2dCLFlBQVk7c0JBQWxDLEtBQUs7dUJBQUMsY0FBYztnQkFDRyxhQUFhO3NCQUFwQyxLQUFLO3VCQUFDLGVBQWU7Z0JBQ0ssZ0JBQWdCO3NCQUExQyxLQUFLO3VCQUFDLGtCQUFrQjtnQkFDQSxjQUFjO3NCQUF0QyxLQUFLO3VCQUFDLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIEVsZW1lbnRSZWYsIENvbXBvbmVudCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJbWFnZWtpdFNlcnZpY2UgfSBmcm9tICcuLi9pbWFnZWtpdGlvLWFuZ3VsYXIuc2VydmljZSc7XG5pbXBvcnQgeyBJa1VwbG9hZENvbXBvbmVudE9wdGlvbnMsIERpY3QsIEhUTUxJbnB1dEV2ZW50IH0gZnJvbSAnLi4vdXRpbGl0eS9pay10eXBlLWRlZi1jb2xsZWN0aW9uJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnaWstdXBsb2FkJyxcbiAgdGVtcGxhdGU6IGBcbiAgPGlucHV0ICpuZ0lmPVwiYnV0dG9uUmVmOyBlbHNlIGVsc2VCbG9ja1wiIHR5cGU9XCJmaWxlXCIgKGNoYW5nZSk9XCJoYW5kbGVGaWxlSW5wdXQoJGV2ZW50KVwiIHN0eWxlPVwiZGlzcGxheTpub25lXCIvPlxuICA8bmctdGVtcGxhdGUgI2Vsc2VCbG9jaz5cbiAgICA8aW5wdXQgdHlwZT1cImZpbGVcIiAoY2hhbmdlKT1cImhhbmRsZUZpbGVJbnB1dCgkZXZlbnQpXCIgLz5cbiAgPC9uZy10ZW1wbGF0ZT5cbiAgYCxcbiAgcHJvdmlkZXJzOiBbSW1hZ2VraXRTZXJ2aWNlXVxufSlcbmV4cG9ydCBjbGFzcyBJa1VwbG9hZENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICBASW5wdXQoJ2ZpbGVOYW1lJykgZmlsZU5hbWU6IHN0cmluZzsgLy9vcHRpb25hbFxuICBASW5wdXQoJ3VzZVVuaXF1ZUZpbGVOYW1lJykgdXNlVW5pcXVlRmlsZU5hbWU6IGJvb2xlYW47IC8vb3B0aW9uYWxcbiAgQElucHV0KCd0YWdzJykgdGFnczogQXJyYXk8c3RyaW5nPjsgLy9vcHRpb25hbFxuICBASW5wdXQoJ2ZvbGRlcicpIGZvbGRlcjogc3RyaW5nOyAvL29wdGlvbmFsXG4gIEBJbnB1dCgncHVibGljS2V5JykgcHVibGljS2V5OiBzdHJpbmc7IC8vb3B0aW9uYWxcbiAgQElucHV0KCd1cmxFbmRwb2ludCcpIHVybEVuZHBvaW50OiBzdHJpbmc7IC8vb3B0aW9uYWxcbiAgQElucHV0KFwiYXV0aGVudGljYXRvclwiKSBhdXRoZW50aWNhdG9yOiAoKSA9PiBQcm9taXNlPGFueT47XG4gIEBJbnB1dCgnaXNQcml2YXRlRmlsZScpIGlzUHJpdmF0ZUZpbGU6IGJvb2xlYW47IC8vb3B0aW9uYWxcbiAgQElucHV0KCdvdmVyd3JpdGVGaWxlJykgb3ZlcndyaXRlRmlsZTogYm9vbGVhbjsgLy9vcHRpb25hbFxuICBASW5wdXQoJ292ZXJ3cml0ZUFJVGFncycpIG92ZXJ3cml0ZUFJVGFnczogYm9vbGVhbjsgLy9vcHRpb25hbFxuICBASW5wdXQoJ292ZXJ3cml0ZVRhZ3MnKSBvdmVyd3JpdGVUYWdzOiBib29sZWFuOyAvL29wdGlvbmFsXG4gIEBJbnB1dCgnb3ZlcndyaXRlQ3VzdG9tTWV0YWRhdGEnKSBvdmVyd3JpdGVDdXN0b21NZXRhZGF0YTogYm9vbGVhbjsgLy9vcHRpb25hbFxuICBASW5wdXQoJ2N1c3RvbUNvb3JkaW5hdGVzJykgY3VzdG9tQ29vcmRpbmF0ZXM6IHN0cmluZzsgLy9vcHRpb25hbFxuICBASW5wdXQoJ3dlYmhvb2tVcmwnKSB3ZWJob29rVXJsOiBzdHJpbmc7IC8vb3B0aW9uYWxcbiAgQElucHV0KCdyZXNwb25zZUZpZWxkcycpIHJlc3BvbnNlRmllbGRzOiBBcnJheTxzdHJpbmc+OyAvL29wdGlvbmFsXG4gIEBJbnB1dCgnZXh0ZW5zaW9ucycpIGV4dGVuc2lvbnM6IEFycmF5PE9iamVjdD47IC8vb3B0aW9uYWxcbiAgQElucHV0KCdjdXN0b21NZXRhZGF0YScpIGN1c3RvbU1ldGFkYXRhOiBPYmplY3Q7IC8vb3B0aW9uYWxcbiAgQElucHV0KCdidXR0b25SZWYnKSBidXR0b25SZWY6IEhUTUxCdXR0b25FbGVtZW50OyAvL29wdGlvbmFsXG4gIEBPdXRwdXQoKSBvbkVycm9yOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIG9uU3VjY2VzczogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBJbnB1dCgndmFsaWRhdGVGaWxlJykgdmFsaWRhdGVGaWxlOiAoZmlsZTogRmlsZSkgPT4gYm9vbGVhbjtcbiAgQElucHV0KCdvblVwbG9hZFN0YXJ0Jykgb25VcGxvYWRTdGFydDogKGU6IEhUTUxJbnB1dEV2ZW50KSA9PiB2b2lkO1xuICBASW5wdXQoJ29uVXBsb2FkUHJvZ3Jlc3MnKSBvblVwbG9hZFByb2dyZXNzOiAoZTogUHJvZ3Jlc3NFdmVudCkgPT4gdm9pZDtcbiAgQElucHV0KCd0cmFuc2Zvcm1hdGlvbicpIHRyYW5zZm9ybWF0aW9uOiBPYmplY3Q7IC8vb3B0aW9uYWxcbiAgZmlsZVRvVXBsb2FkOiBGaWxlID0gbnVsbDtcbiAgeGhyOiBYTUxIdHRwUmVxdWVzdDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIGltYWdla2l0OiBJbWFnZWtpdFNlcnZpY2UpIHsgXG4gIH1cbiAgXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOnZvaWQge1xuICAgIHRoaXMuYnV0dG9uUmVmICYmIHRoaXMuYnV0dG9uUmVmLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCk9Pnt0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuY2hpbGRyZW5bMF0uY2xpY2soKX0pO1xuICB9XG5cbiAgYWJvcnQoKSB7XG4gICAgaWYgKHRoaXMueGhyKSB7XG4gICAgICB0aGlzLnhoci5hYm9ydCgpO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZUZpbGVJbnB1dChlOiBIVE1MSW5wdXRFdmVudHwgYW55KTogdm9pZCB7XG4gICAgLy8gVXNpbmcgSUstdXBsb2FkXG4gICAgY29uc3QgZmlsZXMgPSBlLnRhcmdldC5maWxlcztcbiAgICB0aGlzLmZpbGVUb1VwbG9hZCA9IGZpbGVzLml0ZW0oMCk7XG4gICAgY29uc3Qgb3B0aW9uczogSWtVcGxvYWRDb21wb25lbnRPcHRpb25zID0ge1xuICAgICAgZmlsZTogdGhpcy5maWxlVG9VcGxvYWQsXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSB8fCB0aGlzLmZpbGVUb1VwbG9hZC5uYW1lLFxuICAgICAgdXNlVW5pcXVlRmlsZU5hbWU6IHRoaXMudXNlVW5pcXVlRmlsZU5hbWUsXG4gICAgICB0YWdzOiB0aGlzLnRhZ3MsXG4gICAgICBmb2xkZXI6IHRoaXMuZm9sZGVyLFxuICAgICAgY3VzdG9tTWV0YWRhdGE6IHRoaXMuY3VzdG9tTWV0YWRhdGEsXG4gICAgICBpc1ByaXZhdGVGaWxlOiB0aGlzLmlzUHJpdmF0ZUZpbGUsXG4gICAgICBvdmVyd3JpdGVGaWxlOiB0aGlzLm92ZXJ3cml0ZUZpbGUsXG4gICAgICBvdmVyd3JpdGVBSVRhZ3M6IHRoaXMub3ZlcndyaXRlQUlUYWdzLFxuICAgICAgb3ZlcndyaXRlVGFnczogdGhpcy5vdmVyd3JpdGVUYWdzLFxuICAgICAgb3ZlcndyaXRlQ3VzdG9tTWV0YWRhdGE6IHRoaXMub3ZlcndyaXRlQ3VzdG9tTWV0YWRhdGEsXG4gICAgICBjdXN0b21Db29yZGluYXRlczogdGhpcy5jdXN0b21Db29yZGluYXRlcyxcbiAgICAgIHJlc3BvbnNlRmllbGRzOiB0aGlzLnJlc3BvbnNlRmllbGRzLFxuICAgICAgZXh0ZW5zaW9uczogdGhpcy5leHRlbnNpb25zLFxuICAgICAgd2ViaG9va1VybDogdGhpcy53ZWJob29rVXJsLFxuICAgICAgb25FcnJvcjogdGhpcy5vbkVycm9yLFxuICAgICAgb25TdWNjZXNzOiB0aGlzLm9uU3VjY2VzcyxcbiAgICAgIHRyYW5zZm9ybWF0aW9uOiB0aGlzLnRyYW5zZm9ybWF0aW9uLFxuICAgIH1cblxuICAgIC8vIEN1c3RvbSB2YWxpZGF0aW9uXG4gICAgaWYgKCF0aGlzLmNoZWNrQ3VzdG9tRmlsZVZhbGlkYXRpb24ob3B0aW9ucy5maWxlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5jaGVja0F1dGhlbnRpY2F0b3Iob3B0aW9ucykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgdGhpcy5zdGFydElrVXBsb2FkKGUsIG9wdGlvbnMpO1xuICB9XG4gIFxuICBjaGVja0N1c3RvbUZpbGVWYWxpZGF0aW9uKGZpbGU6IEZpbGUpOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy52YWxpZGF0ZUZpbGUgJiYgdHlwZW9mIHRoaXMudmFsaWRhdGVGaWxlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgIHJldHVybiB0aGlzLnZhbGlkYXRlRmlsZShmaWxlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBjaGVja0F1dGhlbnRpY2F0b3Iob3B0aW9uczogSWtVcGxvYWRDb21wb25lbnRPcHRpb25zKTogYm9vbGVhbiB7XG4gICAgaWYgKCF0aGlzLmF1dGhlbnRpY2F0b3IgfHwgdHlwZW9mIHRoaXMuYXV0aGVudGljYXRvciAhPT0gXCJmdW5jdGlvblwiIHx8IHRoaXMuYXV0aGVudGljYXRvci5sZW5ndGggIT09IDAgfHwgISh0aGlzLmF1dGhlbnRpY2F0b3IoKSBpbnN0YW5jZW9mIFByb21pc2UpKSB7XG4gICAgICByZXR1cm4gdGhpcy50aHJvd0Vycm9yKFwiVGhlIGF1dGhlbnRpY2F0b3IgZnVuY3Rpb24gaXMgbm90IHByb3ZpZGVkIG9yIGlzIG5vdCBhIGZ1bmN0aW9uLlwiLCBvcHRpb25zKVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHRocm93RXJyb3IobWVzc2FnZTogc3RyaW5nLCBvcHRpb25zOiBJa1VwbG9hZENvbXBvbmVudE9wdGlvbnMpOiBib29sZWFuIHtcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLm9uRXJyb3IgaW5zdGFuY2VvZiBFdmVudEVtaXR0ZXIpIHtcbiAgICAgIG9wdGlvbnMub25FcnJvci5lbWl0KHtcbiAgICAgICAgbWVzc2FnZTogbWVzc2FnZSB8fCBcIlNvbWV0aGluZyB3ZW50IHdyb25nLlwiLFxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGhhbmRsZUF1dGhSZXNwb25zZSA9ICh7c2lnbmF0dXJlLHRva2VuLGV4cGlyZX0saWsscGFyYW1zLG9wdGlvbnMscHJvZ3Jlc3NDYikgPT4ge1xuICAgIGlrLnVwbG9hZCh7IC4uLnBhcmFtcywgc2lnbmF0dXJlLCB0b2tlbiwgZXhwaXJlIH0sIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgdGhpcy5oYW5kbGVVcGxvYWRSZXNwb25zZShcbiAgICAgICAgZXJyLFxuICAgICAgICByZXN1bHQsXG4gICAgICAgIG9wdGlvbnMsXG4gICAgICAgIHByb2dyZXNzQ2JcbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBzdGFydElrVXBsb2FkKGU6IEhUTUxJbnB1dEV2ZW50LCBvcHRpb25zOiBJa1VwbG9hZENvbXBvbmVudE9wdGlvbnMpOiB2b2lkIHtcbiAgICAvLyBDdXN0b20gdXBsb2FkLXN0YXJ0IHRyYWNrZXJcbiAgICBpZiAodGhpcy5vblVwbG9hZFN0YXJ0ICYmIHR5cGVvZiB0aGlzLm9uVXBsb2FkU3RhcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMub25VcGxvYWRTdGFydChlKTtcbiAgICB9XG5cbiAgICAvLyBDdXN0b20gdXBsb2FkLXByb2dyZXNzIHRyYWNrZXJcbiAgICBvcHRpb25zLnhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHRoaXMueGhyID0gb3B0aW9ucy54aHI7XG4gICAgY29uc3QgcGFyYW1zID0gdGhpcy5nZXRVcGxvYWRQYXJhbXMob3B0aW9ucyk7XG4gICAgY29uc3QgcHJvZ3Jlc3NDYiA9IHRoaXMuY3JlYXRlVXBsb2FkUHJvZ3Jlc3NNb25pdG9yKG9wdGlvbnMueGhyKTtcbiAgICBjb25zdCBpayA9IHRoaXMuZ2V0SWtJbnN0YW5jZSgpO1xuICAgIGNvbnN0IGF1dGhQcm9taXNlID0gdGhpcy5hdXRoZW50aWNhdG9yKCk7XG4gICAgICBcbiAgICBhdXRoUHJvbWlzZS50aGVuKChvYmopPT50aGlzLmhhbmRsZUF1dGhSZXNwb25zZShvYmosaWsscGFyYW1zLG9wdGlvbnMscHJvZ3Jlc3NDYikpLmNhdGNoKChkYXRhKSA9PiB7XG4gICAgICB2YXIgZXJyb3I7XG4gICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIGVycm9yID0gZGF0YVswXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVycm9yID0gZGF0YTtcbiAgICAgIH1cblxuICAgICAgdGhpcy50aHJvd0Vycm9yKFN0cmluZyhlcnJvciksIG9wdGlvbnMpO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0SWtJbnN0YW5jZSgpOiBhbnkge1xuICAgIGlmKHRoaXMucHVibGljS2V5ID09PSB1bmRlZmluZWQgfHwgXG4gICAgICB0aGlzLnVybEVuZHBvaW50ID09PSB1bmRlZmluZWQgKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW1hZ2VraXQuaWtJbnN0YW5jZTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBJbWFnZWtpdFNlcnZpY2Uoe1xuICAgICAgdXJsRW5kcG9pbnQ6IHRoaXMudXJsRW5kcG9pbnQsXG4gICAgICBwdWJsaWNLZXk6IHRoaXMucHVibGljS2V5LFxuICAgIH0pLl9pa0luc3RhbmNlXG4gIH1cblxuICBoYW5kbGVVcGxvYWRSZXNwb25zZShlcnIsIHJlc3VsdCwgb3B0aW9ucywgcHJvZ3Jlc3NDYik6IHZvaWQge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHRoaXMudGhyb3dFcnJvcihlcnIsIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZihvcHRpb25zLm9uU3VjY2VzcyBpbnN0YW5jZW9mIEV2ZW50RW1pdHRlcikge1xuICAgICAgICBvcHRpb25zLm9uU3VjY2Vzcy5lbWl0KHJlc3VsdCk7XG4gICAgICB9XG4gICAgICBpZihvcHRpb25zLnhocilcbiAgICAgIG9wdGlvbnMueGhyLnVwbG9hZC5yZW1vdmVFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIHByb2dyZXNzQ2IpO1xuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZVVwbG9hZFByb2dyZXNzTW9uaXRvcih4aHI6IFhNTEh0dHBSZXF1ZXN0KTogYW55IHtcbiAgICBjb25zdCBwcm9ncmVzc0NiID0gKGU6IFByb2dyZXNzRXZlbnQpID0+IHtcbiAgICAgIGlmICh0aGlzLm9uVXBsb2FkUHJvZ3Jlc3MgJiYgdHlwZW9mIHRoaXMub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBDdXN0b20gdXBsb2FkLXByb2dyZXNzIHRyYWNrZXJcbiAgICAgICAgdGhpcy5vblVwbG9hZFByb2dyZXNzKGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgaWYoeGhyKVxuICAgIHhoci51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBwcm9ncmVzc0NiKTtcbiAgICByZXR1cm4gcHJvZ3Jlc3NDYjtcbiAgfVxuXG4gIGdldFVwbG9hZFBhcmFtcyhvcHRpb25zOiBJa1VwbG9hZENvbXBvbmVudE9wdGlvbnMpOiBEaWN0IHtcbiAgICBjb25zdCBwYXJhbXM6IERpY3QgPSB7XG4gICAgICBmaWxlOiBvcHRpb25zLmZpbGUsXG4gICAgICBmaWxlTmFtZTogb3B0aW9ucy5maWxlTmFtZVxuICAgIH07XG5cbiAgICBpZiAob3B0aW9ucy51c2VVbmlxdWVGaWxlTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHBhcmFtcywgeyB1c2VVbmlxdWVGaWxlTmFtZTogb3B0aW9ucy51c2VVbmlxdWVGaWxlTmFtZSB9KTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5mb2xkZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgT2JqZWN0LmFzc2lnbihwYXJhbXMsIHsgZm9sZGVyOiBvcHRpb25zLmZvbGRlciB9KTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5jdXN0b21NZXRhZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHBhcmFtcywgeyBjdXN0b21NZXRhZGF0YTogb3B0aW9ucy5jdXN0b21NZXRhZGF0YSB9KTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy53ZWJob29rVXJsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24ocGFyYW1zLCB7IHdlYmhvb2tVcmw6IG9wdGlvbnMud2ViaG9va1VybCB9KTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5pc1ByaXZhdGVGaWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24ocGFyYW1zLCB7IGlzUHJpdmF0ZUZpbGU6IG9wdGlvbnMuaXNQcml2YXRlRmlsZSB9KTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5vdmVyd3JpdGVGaWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24ocGFyYW1zLCB7IG92ZXJ3cml0ZUZpbGU6IG9wdGlvbnMub3ZlcndyaXRlRmlsZSB9KTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5vdmVyd3JpdGVBSVRhZ3MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgT2JqZWN0LmFzc2lnbihwYXJhbXMsIHsgb3ZlcndyaXRlQUlUYWdzOiBvcHRpb25zLm92ZXJ3cml0ZUFJVGFncyB9KTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5vdmVyd3JpdGVUYWdzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24ocGFyYW1zLCB7IG92ZXJ3cml0ZVRhZ3M6IG9wdGlvbnMub3ZlcndyaXRlVGFncyB9KTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5vdmVyd3JpdGVDdXN0b21NZXRhZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHBhcmFtcywgeyBvdmVyd3JpdGVDdXN0b21NZXRhZGF0YTogb3B0aW9ucy5vdmVyd3JpdGVDdXN0b21NZXRhZGF0YSB9KTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy50YWdzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24ocGFyYW1zLCB7IHRhZ3M6IG9wdGlvbnMudGFncyB9KTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5jdXN0b21Db29yZGluYXRlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHBhcmFtcywgeyBjdXN0b21Db29yZGluYXRlczogb3B0aW9ucy5jdXN0b21Db29yZGluYXRlcyB9KTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5yZXNwb25zZUZpZWxkcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHBhcmFtcywgeyByZXNwb25zZUZpZWxkczogb3B0aW9ucy5yZXNwb25zZUZpZWxkcyB9KTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5leHRlbnNpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24ocGFyYW1zLCB7IGV4dGVuc2lvbnM6IG9wdGlvbnMuZXh0ZW5zaW9ucyB9KTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy54aHIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgT2JqZWN0LmFzc2lnbihwYXJhbXMsIHsgeGhyOiBvcHRpb25zLnhociB9KTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy50cmFuc2Zvcm1hdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHBhcmFtcywgeyB0cmFuc2Zvcm1hdGlvbjogb3B0aW9ucy50cmFuc2Zvcm1hdGlvbiB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfVxufVxuIl19