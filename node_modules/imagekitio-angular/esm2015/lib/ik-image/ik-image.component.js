import { Component, ElementRef, Input } from '@angular/core';
import { ImagekitService } from '../imagekitio-angular.service';
import * as i0 from "@angular/core";
import * as i1 from "../imagekitio-angular.service";
export class IkImageComponent {
    constructor(el, imagekit) {
        this.el = el;
        this.imagekit = imagekit;
        this.transformation = [];
        this.url = '';
        this.lqipUrl = '';
        this.onImageLoaded = (event) => {
            const { loading, lqipUrl, url } = this;
            if (loading !== 'lazy' && event.srcElement.src === lqipUrl) {
                this.loadImage(this, url);
            }
        };
    }
    ngOnInit() {
        const options = this.src ? { src: this.src } : { path: this.path };
        options.urlEndpoint = this.urlEndpoint ? this.urlEndpoint : this.imagekit._ikInstance.options.urlEndpoint;
        options.transformation = this.transformation;
        options.transformationPosition = this.transformationPosition;
        options.queryParameters = this.queryParameters;
        options.lqip = this.lqip;
        this.setUrl(options);
    }
    ngOnChanges() {
        this.ngOnInit();
        this.ngAfterViewInit();
    }
    ngAfterViewInit() {
        if (this.loading == 'lazy') {
            const that = this;
            if (this.lqipUrl) {
                // If given LQIP, use that first
                this.loadImage(this, this.lqipUrl);
            }
            const imageObserver = new IntersectionObserver((entry, observer) => {
                // Always load the original image when intersecting
                that.handleIntersectionObserver(entry, observer, that.loadImage, that, that.url);
            });
            imageObserver.observe(this.el.nativeElement);
        }
        else {
            // If given LQIP, use that first
            this.loadImage(this, this.lqipUrl ? this.lqipUrl : this.url);
        }
    }
    handleIntersectionObserver(entry, observer, loadImageFunc, context, url) {
        if (entry[0] && entry[0].isIntersecting) {
            let image = entry[0].target;
            loadImageFunc(context, url);
            observer.unobserve(image);
        }
    }
    setUrl(options) {
        const config = this.getConfigObject(options);
        this.url = this.imagekit.getUrl(config);
        if (options.lqip && options.lqip.active === true) {
            this.lqipUrl = this.constructLqipUrl(options, options.lqip);
        }
    }
    constructLqipUrl(options, lqip) {
        if (lqip && lqip.active) {
            var quality = Math.round(lqip.quality || lqip.threshold || 20);
            var blur = Math.round(lqip.blur || 6);
            var newTransformation = options.transformation ? [...options.transformation] : [];
            if (lqip.raw && typeof lqip.raw === "string" && lqip.raw.trim() != "") {
                newTransformation.push({
                    raw: lqip.raw.trim()
                });
            }
            else {
                newTransformation.push({
                    quality: String(quality),
                    blur: String(blur),
                });
            }
            return this.imagekit.ikInstance.url(Object.assign(Object.assign({}, options), { transformation: newTransformation }));
        }
    }
    getConfigObject(options) {
        const config = {
            transformation: options.transformation
        };
        if (options.urlEndpoint) {
            config['urlEndpoint'] = options.urlEndpoint;
        }
        else {
            throw new Error('Missing urlEndpoint initialization!');
        }
        if (options.queryParameters) {
            config['queryParameters'] = options.queryParameters;
        }
        if (options.src) {
            config['src'] = options.src;
            config['transformationPosition'] = 'query';
        }
        else if (options.path) {
            config['path'] = options.path;
            if (options.transformationPosition) {
                config['transformationPosition'] = options.transformationPosition;
            }
        }
        else {
            throw new Error('Missing src / path during initialization!');
        }
        return config;
    }
    loadImage(context, url) {
        const nativeElement = context.el.nativeElement;
        const attributes = nativeElement.attributes;
        const attrsToSet = context.namedNodeMapToObject(attributes);
        attrsToSet['src'] = url;
        const image = nativeElement.children[0];
        context.setElementAttributes(image, attrsToSet);
    }
    namedNodeMapToObject(source) {
        let target = {};
        Object.keys(source).forEach(index => {
            const name = source[index].name;
            const value = source[index].value;
            target[name] = value;
        });
        return target;
    }
    ;
    setElementAttributes(element, attributesLiteral) {
        Object.keys(attributesLiteral).filter(attrName => attrName !== 'loading').forEach(attrName => {
            element.setAttribute(attrName, attributesLiteral[attrName]);
        });
    }
}
IkImageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IkImageComponent, deps: [{ token: i0.ElementRef }, { token: i1.ImagekitService }], target: i0.ɵɵFactoryTarget.Component });
IkImageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IkImageComponent, selector: "ik-image", inputs: { src: "src", path: "path", urlEndpoint: "urlEndpoint", transformation: "transformation", transformationPosition: "transformationPosition", queryParameters: "queryParameters", lqip: "lqip", loading: "loading" }, usesOnChanges: true, ngImport: i0, template: `<img src='' (load)="onImageLoaded($event)">`, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IkImageComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ik-image',
                    template: `<img src='' (load)="onImageLoaded($event)">`,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.ImagekitService }]; }, propDecorators: { src: [{
                type: Input,
                args: ['src']
            }], path: [{
                type: Input,
                args: ['path']
            }], urlEndpoint: [{
                type: Input,
                args: ['urlEndpoint']
            }], transformation: [{
                type: Input,
                args: ['transformation']
            }], transformationPosition: [{
                type: Input,
                args: ['transformationPosition']
            }], queryParameters: [{
                type: Input,
                args: ['queryParameters']
            }], lqip: [{
                type: Input,
                args: ['lqip']
            }], loading: [{
                type: Input,
                args: ['loading']
            }] } });
//# sourceMappingURL=data:application/json;base64,