import { Component, ElementRef, Input } from '@angular/core';
import { ImagekitService } from '../imagekitio-angular.service';
import * as i0 from "@angular/core";
import * as i1 from "../imagekitio-angular.service";
export class IkVideoComponent {
    constructor(el, imagekit) {
        this.el = el;
        this.imagekit = imagekit;
        this.transformation = [];
        this.url = '';
    }
    ngOnInit() {
        const options = this.src ? { src: this.src } : { path: this.path };
        options.transformation = this.transformation;
        options.transformationPosition = this.transformationPosition;
        options.urlEndpoint = this.urlEndpoint;
        options.queryParameters = this.queryParameters;
        this.setUrl(options);
    }
    ngAfterViewInit() {
        this.loadVideo(this.url);
    }
    loadVideo(url) {
        const nativeElement = this.el.nativeElement;
        const attributes = nativeElement.attributes;
        const attrsToSet = this.namedNodeMapToObject(attributes);
        attrsToSet['src'] = url;
        const video = nativeElement.children[0];
        this.setElementAttributes(video, attrsToSet);
    }
    namedNodeMapToObject(source) {
        let target = {};
        Object.keys(source).forEach(index => {
            const name = source[index].name;
            const value = source[index].value;
            target[name] = value;
        });
        return target;
    }
    ;
    setUrl(options) {
        const config = this.getConfigObject(options);
        this.url = this.imagekit.getUrl(config);
    }
    getConfigObject(options) {
        const config = {
            transformation: options.transformation,
        };
        if (options.urlEndpoint) {
            config['urlEndpoint'] = options.urlEndpoint;
        }
        else {
            throw new Error('Missing urlEndpoint initialization!');
        }
        if (options.queryParameters) {
            config['queryParameters'] = options.queryParameters;
        }
        if (options.src) {
            config['src'] = options.src;
            config['transformationPosition'] = 'query';
        }
        else if (options.path) {
            config['path'] = options.path;
            if (options.transformationPosition) {
                config['transformationPosition'] = options.transformationPosition;
            }
        }
        else {
            throw new Error('Missing src / path during initialization!');
        }
        return config;
    }
    setElementAttributes(element, attributesLiteral) {
        Object.keys(attributesLiteral).forEach(attrName => {
            element.setAttribute(attrName, attributesLiteral[attrName]);
        });
    }
}
IkVideoComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IkVideoComponent, deps: [{ token: i0.ElementRef }, { token: i1.ImagekitService }], target: i0.ɵɵFactoryTarget.Component });
IkVideoComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IkVideoComponent, selector: "ik-video", inputs: { urlEndpoint: "urlEndpoint", path: "path", src: "src", transformation: "transformation", transformationPosition: "transformationPosition", queryParameters: "queryParameters" }, ngImport: i0, template: `<video controls><source src={{src}}>`, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IkVideoComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ik-video',
                    template: `<video controls><source src={{src}}>`,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.ImagekitService }]; }, propDecorators: { urlEndpoint: [{
                type: Input,
                args: ['urlEndpoint']
            }], path: [{
                type: Input,
                args: ['path']
            }], src: [{
                type: Input,
                args: ['src']
            }], transformation: [{
                type: Input,
                args: ['transformation']
            }], transformationPosition: [{
                type: Input,
                args: ['transformationPosition']
            }], queryParameters: [{
                type: Input,
                args: ['queryParameters']
            }] } });
//# sourceMappingURL=data:application/json;base64,