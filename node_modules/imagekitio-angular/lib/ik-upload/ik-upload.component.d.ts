import { AfterViewInit, ElementRef, EventEmitter } from '@angular/core';
import { ImagekitService } from '../imagekitio-angular.service';
import { IkUploadComponentOptions, Dict, HTMLInputEvent } from '../utility/ik-type-def-collection';
import * as i0 from "@angular/core";
export declare class IkUploadComponent implements AfterViewInit {
    private el;
    private imagekit;
    fileName: string;
    useUniqueFileName: boolean;
    tags: Array<string>;
    folder: string;
    publicKey: string;
    urlEndpoint: string;
    authenticator: () => Promise<any>;
    isPrivateFile: boolean;
    overwriteFile: boolean;
    overwriteAITags: boolean;
    overwriteTags: boolean;
    overwriteCustomMetadata: boolean;
    customCoordinates: string;
    webhookUrl: string;
    responseFields: Array<string>;
    extensions: Array<Object>;
    customMetadata: Object;
    buttonRef: HTMLButtonElement;
    onError: EventEmitter<any>;
    onSuccess: EventEmitter<any>;
    validateFile: (file: File) => boolean;
    onUploadStart: (e: HTMLInputEvent) => void;
    onUploadProgress: (e: ProgressEvent) => void;
    transformation: Object;
    fileToUpload: File;
    xhr: XMLHttpRequest;
    constructor(el: ElementRef, imagekit: ImagekitService);
    ngAfterViewInit(): void;
    abort(): void;
    handleFileInput(e: HTMLInputEvent | any): void;
    checkCustomFileValidation(file: File): boolean;
    checkAuthenticator(options: IkUploadComponentOptions): boolean;
    throwError(message: string, options: IkUploadComponentOptions): boolean;
    handleAuthResponse: ({ signature, token, expire }: {
        signature: any;
        token: any;
        expire: any;
    }, ik: any, params: any, options: any, progressCb: any) => void;
    startIkUpload(e: HTMLInputEvent, options: IkUploadComponentOptions): void;
    getIkInstance(): any;
    handleUploadResponse(err: any, result: any, options: any, progressCb: any): void;
    createUploadProgressMonitor(xhr: XMLHttpRequest): any;
    getUploadParams(options: IkUploadComponentOptions): Dict;
    static ɵfac: i0.ɵɵFactoryDeclaration<IkUploadComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IkUploadComponent, "ik-upload", never, { "fileName": "fileName"; "useUniqueFileName": "useUniqueFileName"; "tags": "tags"; "folder": "folder"; "publicKey": "publicKey"; "urlEndpoint": "urlEndpoint"; "authenticator": "authenticator"; "isPrivateFile": "isPrivateFile"; "overwriteFile": "overwriteFile"; "overwriteAITags": "overwriteAITags"; "overwriteTags": "overwriteTags"; "overwriteCustomMetadata": "overwriteCustomMetadata"; "customCoordinates": "customCoordinates"; "webhookUrl": "webhookUrl"; "responseFields": "responseFields"; "extensions": "extensions"; "customMetadata": "customMetadata"; "buttonRef": "buttonRef"; "validateFile": "validateFile"; "onUploadStart": "onUploadStart"; "onUploadProgress": "onUploadProgress"; "transformation": "transformation"; }, { "onError": "onError"; "onSuccess": "onSuccess"; }, never, never>;
}
