{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./slider-image-select.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./slider-image-select.component.css?ngResource\";\nimport { ChangeDetectorRef, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { faX } from '@fortawesome/free-solid-svg-icons';\nimport { ButtonModule } from 'primeng/button';\nimport { DialogModule } from 'primeng/dialog';\nimport { environment } from '../../../../../environments/environment.development';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { ButtonComponent } from '../../button/button.component';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\nlet SliderImageSelectComponent = class SliderImageSelectComponent {\n  constructor(cdr) {\n    this.cdr = cdr;\n    this.imageUrl = environment.image_url_server;\n    this.faCross = faX;\n    this.faTrash = faTrash;\n    this.selectedImageData = [];\n    this.onImageChange = new EventEmitter();\n    this.onCLick = new EventEmitter();\n  }\n  ngOnInit() {}\n  isBase64(imagePath) {\n    return typeof imagePath === 'string' && imagePath.startsWith('data:image/') || imagePath.startsWith('../../../../../');\n    // return typeof imagePath === 'string' && imagePath.startsWith('data:image/') || imagePath.startsWith('./')\n  }\n  closeDialog() {\n    this.onCLick.emit();\n  }\n  // setImage(event: any, index: number): void {\n  //   const input = event.target as HTMLInputElement;\n  //   const file = input.files?.[0];\n  //   if (file) {\n  //     const reader = new FileReader();\n  //     reader.onload = () => {\n  //       this.selectedImageData[index].image = reader.result as string;\n  //       const updatedImageData = {\n  //         ...this.selectedImageData[index],\n  //         image: this.selectedImageData[index].image,\n  //       };\n  //       this.onImageChange.emit({ file: updatedImageData, index });\n  //       this.cdr.detectChanges();\n  //     };\n  //     reader.readAsDataURL(file);\n  //   }\n  // }\n  setImage(event, index) {\n    const input = event.target;\n    const file = input.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const img = new Image();\n        img.onload = () => {\n          if (img.width === 1920 && img.height === 888) {\n            this.selectedImageData[index].image = reader.result;\n            const updatedImageData = {\n              ...this.selectedImageData[index],\n              image: this.selectedImageData[index].image\n            };\n            this.onImageChange.emit({\n              file: updatedImageData,\n              index\n            });\n            this.cdr.detectChanges();\n          } else {\n            alert('Please upload an image with dimensions 1920x888.');\n          }\n        };\n        img.src = reader.result;\n      };\n      reader.readAsDataURL(file);\n    }\n  }\n  updateCaption(event, index) {\n    const updatedCaption = event.target.value;\n    this.selectedImageData[index].captions = updatedCaption;\n    const updatedData = {\n      ...this.selectedImageData[index],\n      captions: updatedCaption\n    };\n    this.onImageChange.emit({\n      file: updatedData,\n      index\n    });\n  }\n  SaveDialog() {\n    this.onCLick.emit();\n  }\n  addNewImage() {\n    const newImage = {\n      image: '',\n      drawing_captions: ''\n    };\n    if (!this.selectedImageData) {\n      this.selectedImageData = [];\n    }\n    this.selectedImageData.push(newImage);\n    this.onImageChange.emit({\n      file: newImage,\n      index: this.selectedImageData.length - 1\n    });\n  }\n  openDeleteImage(index) {\n    const confirmDelete = confirm('Are you sure you want to delete this image?');\n    if (confirmDelete) {\n      this.selectedImageData.splice(index, 1);\n      this.onImageChange.emit({\n        file: this.selectedImageData,\n        index\n      });\n    }\n  }\n  static #_ = this.ctorParameters = () => [{\n    type: ChangeDetectorRef\n  }];\n  static #_2 = this.propDecorators = {\n    isVisible: [{\n      type: Input\n    }],\n    selectedImageData: [{\n      type: Input\n    }],\n    onImageChange: [{\n      type: Output\n    }],\n    onCLick: [{\n      type: Output\n    }]\n  };\n};\nSliderImageSelectComponent = __decorate([Component({\n  selector: 'app-slider-image-select',\n  standalone: true,\n  imports: [DialogModule, FontAwesomeModule, ButtonModule, FormsModule, CommonModule, ButtonComponent, FontAwesomeModule],\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], SliderImageSelectComponent);\nexport { SliderImageSelectComponent };","map":{"version":3,"names":["ChangeDetectorRef","Component","EventEmitter","Input","Output","FontAwesomeModule","faX","ButtonModule","DialogModule","environment","FormsModule","CommonModule","ButtonComponent","faTrash","SliderImageSelectComponent","constructor","cdr","imageUrl","image_url_server","faCross","selectedImageData","onImageChange","onCLick","ngOnInit","isBase64","imagePath","startsWith","closeDialog","emit","setImage","event","index","input","target","file","files","reader","FileReader","onload","img","Image","width","height","image","result","updatedImageData","detectChanges","alert","src","readAsDataURL","updateCaption","updatedCaption","value","captions","updatedData","SaveDialog","addNewImage","newImage","drawing_captions","push","length","openDeleteImage","confirmDelete","confirm","splice","_","__decorate","selector","standalone","imports","template","__NG_CLI_RESOURCE__0"],"sources":["D:\\Maithil\\website-cms\\src\\app\\components\\common\\layouts\\slider-image-select\\slider-image-select.component.ts"],"sourcesContent":["import { ChangeDetectorRef, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { faX } from '@fortawesome/free-solid-svg-icons';\r\nimport { ButtonModule } from 'primeng/button';\r\nimport { DialogModule } from 'primeng/dialog';\r\nimport { environment } from '../../../../../environments/environment.development';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ButtonComponent } from '../../button/button.component';\r\nimport {  faTrash } from '@fortawesome/free-solid-svg-icons';\r\n\r\n@Component({\r\n  selector: 'app-slider-image-select',\r\n  standalone: true,\r\n  imports: [\r\n    DialogModule,\r\n    FontAwesomeModule,\r\n    ButtonModule,\r\n    FormsModule,\r\n    CommonModule,\r\n    ButtonComponent,\r\n    FontAwesomeModule\r\n  ],\r\n  templateUrl: './slider-image-select.component.html',\r\n  styleUrls: ['./slider-image-select.component.css'],\r\n})\r\nexport class SliderImageSelectComponent implements OnInit {\r\n\r\n  constructor(private cdr: ChangeDetectorRef) {}\r\n\r\n  imageUrl = environment.image_url_server;\r\n  faCross = faX;\r\n  faTrash = faTrash;\r\n  \r\n  @Input() isVisible!: boolean;\r\n  @Input() selectedImageData: any = [];\r\n  @Output() onImageChange: EventEmitter<any> = new EventEmitter();\r\n  @Output() onCLick: EventEmitter<any> = new EventEmitter();\r\n\r\n  ngOnInit(): void {\r\n    \r\n  }\r\n\r\n  isBase64(imagePath: any): boolean {\r\n    return typeof imagePath === 'string' && imagePath.startsWith('data:image/') || imagePath.startsWith('../../../../../')\r\n    // return typeof imagePath === 'string' && imagePath.startsWith('data:image/') || imagePath.startsWith('./')\r\n  }\r\n\r\n  closeDialog() {\r\n    this.onCLick.emit();\r\n  }\r\n\r\n  // setImage(event: any, index: number): void {\r\n  //   const input = event.target as HTMLInputElement;\r\n  //   const file = input.files?.[0];\r\n\r\n  //   if (file) {\r\n  //     const reader = new FileReader();\r\n\r\n  //     reader.onload = () => {\r\n  //       this.selectedImageData[index].image = reader.result as string;\r\n\r\n  //       const updatedImageData = {\r\n  //         ...this.selectedImageData[index],\r\n  //         image: this.selectedImageData[index].image,\r\n  //       };\r\n  //       this.onImageChange.emit({ file: updatedImageData, index });\r\n  //       this.cdr.detectChanges();\r\n  //     };\r\n\r\n  //     reader.readAsDataURL(file);\r\n  //   }\r\n  // }\r\n  setImage(event: any, index: number): void {\r\n    const input = event.target as HTMLInputElement;\r\n    const file = input.files?.[0];\r\n  \r\n    if (file) {\r\n      const reader = new FileReader();\r\n  \r\n      reader.onload = () => {\r\n        const img = new Image();\r\n        \r\n        img.onload = () => {\r\n          if (img.width === 1920 && img.height === 888) {\r\n            this.selectedImageData[index].image = reader.result as string;\r\n            const updatedImageData = {\r\n              ...this.selectedImageData[index],\r\n              image: this.selectedImageData[index].image,\r\n            };\r\n            this.onImageChange.emit({ file: updatedImageData, index });\r\n            this.cdr.detectChanges();\r\n          } else {\r\n            alert('Please upload an image with dimensions 1920x888.');\r\n          }\r\n        };\r\n  \r\n        img.src = reader.result as string;\r\n      };\r\n  \r\n      reader.readAsDataURL(file);\r\n    }\r\n  }\r\n\r\n  updateCaption(event: any, index: number): void {\r\n    const updatedCaption = event.target.value;\r\n    \r\n    this.selectedImageData[index].captions = updatedCaption;\r\n    \r\n    const updatedData = {\r\n      ...this.selectedImageData[index],\r\n      captions: updatedCaption,\r\n    };\r\n  \r\n    this.onImageChange.emit({ file: updatedData, index });\r\n  }\r\n\r\n  SaveDialog() {\r\n    this.onCLick.emit();\r\n  }\r\n\r\n  addNewImage(): void {\r\n    const newImage = {\r\n      image: '',\r\n      drawing_captions: '',\r\n    };\r\n  \r\n    if (!this.selectedImageData) {\r\n      this.selectedImageData = [];\r\n    }\r\n  \r\n    this.selectedImageData.push(newImage);\r\n    this.onImageChange.emit({ file: newImage, index: this.selectedImageData.length - 1 });\r\n  }\r\n\r\n  openDeleteImage(index: any): void {\r\n    const confirmDelete = confirm('Are you sure you want to delete this image?');\r\n    \r\n    if (confirmDelete) {\r\n      this.selectedImageData.splice(index, 1);\r\n      this.onImageChange.emit({ file: this.selectedImageData, index });\r\n    }\r\n  } \r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}