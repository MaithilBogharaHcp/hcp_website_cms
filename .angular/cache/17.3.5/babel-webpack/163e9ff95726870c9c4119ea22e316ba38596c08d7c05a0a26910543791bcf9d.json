{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { environment } from '../../environments/environment';\nlet AuthService = class AuthService {\n  getCurrentCredentials() {\n    const host = window.location.hostname;\n    const credentials = environment.credentials[host] || {\n      username: 'defaultUser',\n      password: 'defaultPass'\n    };\n    return credentials;\n  }\n  login(username, password) {\n    const {\n      username: expectedUsername,\n      password: expectedPassword\n    } = this.getCurrentCredentials();\n    if (username === expectedUsername && password === expectedPassword) {\n      const encoded = btoa('true');\n      localStorage.setItem('isAuthenticated', encoded);\n      return true;\n    }\n    return false;\n  }\n  logout() {\n    localStorage.removeItem('isAuthenticated');\n  }\n  isLoggedIn() {\n    const encoded = localStorage.getItem('isAuthenticated');\n    return encoded ? atob(encoded) === 'true' : false;\n  }\n};\nAuthService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthService);\nexport { AuthService };","map":{"version":3,"names":["Injectable","environment","AuthService","getCurrentCredentials","host","window","location","hostname","credentials","username","password","login","expectedUsername","expectedPassword","encoded","btoa","localStorage","setItem","logout","removeItem","isLoggedIn","getItem","atob","__decorate","providedIn"],"sources":["D:\\Maithil\\website-cms\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private getCurrentCredentials() {\r\n    const host = window.location.hostname;\r\n\r\n    const credentials = environment.credentials[host] || {\r\n      username: 'defaultUser',\r\n      password: 'defaultPass',\r\n    };\r\n\r\n    return credentials;\r\n  }\r\n\r\n  login(username: string, password: string): boolean {\r\n    const { username: expectedUsername, password: expectedPassword } =\r\n      this.getCurrentCredentials();\r\n\r\n    if (username === expectedUsername && password === expectedPassword) {\r\n      const encoded = btoa('true');\r\n      localStorage.setItem('isAuthenticated', encoded);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('isAuthenticated');\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    const encoded = localStorage.getItem('isAuthenticated');\r\n    return encoded ? atob(encoded) === 'true' : false;\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,WAAW,QAAQ,gCAAgC;AAKrD,IAAMC,WAAW,GAAjB,MAAMA,WAAW;EACdC,qBAAqBA,CAAA;IAC3B,MAAMC,IAAI,GAAGC,MAAM,CAACC,QAAQ,CAACC,QAAQ;IAErC,MAAMC,WAAW,GAAGP,WAAW,CAACO,WAAW,CAACJ,IAAI,CAAC,IAAI;MACnDK,QAAQ,EAAE,aAAa;MACvBC,QAAQ,EAAE;KACX;IAED,OAAOF,WAAW;EACpB;EAEAG,KAAKA,CAACF,QAAgB,EAAEC,QAAgB;IACtC,MAAM;MAAED,QAAQ,EAAEG,gBAAgB;MAAEF,QAAQ,EAAEG;IAAgB,CAAE,GAC9D,IAAI,CAACV,qBAAqB,EAAE;IAE9B,IAAIM,QAAQ,KAAKG,gBAAgB,IAAIF,QAAQ,KAAKG,gBAAgB,EAAE;MAClE,MAAMC,OAAO,GAAGC,IAAI,CAAC,MAAM,CAAC;MAC5BC,YAAY,CAACC,OAAO,CAAC,iBAAiB,EAAEH,OAAO,CAAC;MAChD,OAAO,IAAI;IACb;IAEA,OAAO,KAAK;EACd;EAEAI,MAAMA,CAAA;IACJF,YAAY,CAACG,UAAU,CAAC,iBAAiB,CAAC;EAC5C;EAEAC,UAAUA,CAAA;IACR,MAAMN,OAAO,GAAGE,YAAY,CAACK,OAAO,CAAC,iBAAiB,CAAC;IACvD,OAAOP,OAAO,GAAGQ,IAAI,CAACR,OAAO,CAAC,KAAK,MAAM,GAAG,KAAK;EACnD;CACD;AAjCYZ,WAAW,GAAAqB,UAAA,EAHvBvB,UAAU,CAAC;EACVwB,UAAU,EAAE;CACb,CAAC,C,EACWtB,WAAW,CAiCvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}