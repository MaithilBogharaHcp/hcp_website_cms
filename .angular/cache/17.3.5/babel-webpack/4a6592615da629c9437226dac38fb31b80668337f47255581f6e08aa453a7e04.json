{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./layout4.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./layout4.component.css?ngResource\";\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { environment } from '../../../../../environments/environment.development';\nlet Layout4Component = class Layout4Component {\n  constructor() {\n    this.imageUrl = environment.image_url_server;\n    this.getFile = new EventEmitter();\n    this.openCropper = new EventEmitter();\n  }\n  isBase64(imagePath) {\n    return imagePath ? imagePath.startsWith('data:image/') : false;\n  }\n  setImage(event) {\n    const input = event.target;\n    const file = input.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const img = new Image();\n        img.onload = () => {\n          if (img.width === 1920 && img.height === 1080) {\n            this.getFile.emit(file);\n          } else {\n            alert('Please upload an image with dimensions 1920x1080.');\n          }\n        };\n        img.src = reader.result;\n      };\n      reader.readAsDataURL(file);\n    }\n  }\n  static #_ = this.propDecorators = {\n    id: [{\n      type: Input,\n      args: [{\n        required: true\n      }]\n    }],\n    isEdit: [{\n      type: Input,\n      args: [{\n        required: true\n      }]\n    }],\n    imageName: [{\n      type: Input,\n      args: [{\n        required: true\n      }]\n    }],\n    getFile: [{\n      type: Output\n    }],\n    openCropper: [{\n      type: Output\n    }]\n  };\n};\nLayout4Component = __decorate([Component({\n  selector: 'app-layout4',\n  standalone: true,\n  imports: [],\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], Layout4Component);\nexport { Layout4Component };","map":{"version":3,"names":["Component","EventEmitter","Input","Output","environment","Layout4Component","constructor","imageUrl","image_url_server","getFile","openCropper","isBase64","imagePath","startsWith","setImage","event","input","target","file","files","reader","FileReader","onload","img","Image","width","height","emit","alert","src","result","readAsDataURL","_","args","required","__decorate","selector","standalone","imports","template","__NG_CLI_RESOURCE__0"],"sources":["D:\\Maithil\\website-cms\\src\\app\\components\\common\\layouts\\layout4-P\\layout4.component.ts"],"sourcesContent":["import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { environment } from '../../../../../environments/environment.development';\r\n\r\n@Component({\r\n  selector: 'app-layout4',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './layout4.component.html',\r\n  styleUrl: './layout4.component.css',\r\n})\r\nexport class Layout4Component {\r\n  @Input({ required: true }) id: any;\r\n  @Input({ required: true }) isEdit: any;\r\n  imageUrl = environment.image_url_server;\r\n  @Input({ required: true }) imageName!: any;\r\n  @Output() getFile = new EventEmitter<File>();\r\n  @Output() openCropper = new EventEmitter<Event>();\r\n  \r\n  isBase64(imagePath: string | null): boolean {\r\n    return imagePath ? imagePath.startsWith('data:image/') : false;\r\n  }\r\n  setImage(event: any): void {\r\n    const input = event.target as HTMLInputElement;\r\n    const file = input.files?.[0];\r\n\r\n    if (file) {\r\n      const reader = new FileReader();\r\n\r\n      reader.onload = () => {\r\n        const img = new Image();\r\n\r\n        img.onload = () => {\r\n          if (img.width === 1920 && img.height === 1080) {\r\n            this.getFile.emit(file);\r\n          } else {\r\n            alert('Please upload an image with dimensions 1920x1080.');\r\n          }\r\n        };\r\n\r\n        img.src = reader.result as string;\r\n      };\r\n\r\n      reader.readAsDataURL(file);\r\n    }\r\n  }\r\n\r\n}\r\n"],"mappings":";;;AAAA,SAASA,SAAS,EAAEC,YAAY,EAAEC,KAAK,EAAEC,MAAM,QAAQ,eAAe;AACtE,SAASC,WAAW,QAAQ,qDAAqD;AAS1E,IAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAAtBC,YAAA;IAGL,KAAAC,QAAQ,GAAGH,WAAW,CAACI,gBAAgB;IAE7B,KAAAC,OAAO,GAAG,IAAIR,YAAY,EAAQ;IAClC,KAAAS,WAAW,GAAG,IAAIT,YAAY,EAAS;EA8BnD;EA5BEU,QAAQA,CAACC,SAAwB;IAC/B,OAAOA,SAAS,GAAGA,SAAS,CAACC,UAAU,CAAC,aAAa,CAAC,GAAG,KAAK;EAChE;EACAC,QAAQA,CAACC,KAAU;IACjB,MAAMC,KAAK,GAAGD,KAAK,CAACE,MAA0B;IAC9C,MAAMC,IAAI,GAAGF,KAAK,CAACG,KAAK,GAAG,CAAC,CAAC;IAE7B,IAAID,IAAI,EAAE;MACR,MAAME,MAAM,GAAG,IAAIC,UAAU,EAAE;MAE/BD,MAAM,CAACE,MAAM,GAAG,MAAK;QACnB,MAAMC,GAAG,GAAG,IAAIC,KAAK,EAAE;QAEvBD,GAAG,CAACD,MAAM,GAAG,MAAK;UAChB,IAAIC,GAAG,CAACE,KAAK,KAAK,IAAI,IAAIF,GAAG,CAACG,MAAM,KAAK,IAAI,EAAE;YAC7C,IAAI,CAACjB,OAAO,CAACkB,IAAI,CAACT,IAAI,CAAC;UACzB,CAAC,MAAM;YACLU,KAAK,CAAC,mDAAmD,CAAC;UAC5D;QACF,CAAC;QAEDL,GAAG,CAACM,GAAG,GAAGT,MAAM,CAACU,MAAgB;MACnC,CAAC;MAEDV,MAAM,CAACW,aAAa,CAACb,IAAI,CAAC;IAC5B;EACF;EAAC,QAAAc,CAAA,G;;YAjCA9B,KAAK;MAAA+B,IAAA,GAAC;QAAEC,QAAQ,EAAE;MAAI,CAAE;IAAA;;YACxBhC,KAAK;MAAA+B,IAAA,GAAC;QAAEC,QAAQ,EAAE;MAAI,CAAE;IAAA;;YAExBhC,KAAK;MAAA+B,IAAA,GAAC;QAAEC,QAAQ,EAAE;MAAI,CAAE;IAAA;;YACxB/B;IAAM;;YACNA;IAAM;;;AANIE,gBAAgB,GAAA8B,UAAA,EAP5BnC,SAAS,CAAC;EACToC,QAAQ,EAAE,aAAa;EACvBC,UAAU,EAAE,IAAI;EAChBC,OAAO,EAAE,EAAE;EACXC,QAAA,EAAAC,oBAAuC;;CAExC,CAAC,C,EACWnC,gBAAgB,CAoC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}