{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./layout31.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./layout31.component.css?ngResource\";\nimport { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { environment } from '../../../../../environments/environment.development';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\nlet Layout31Component = class Layout31Component {\n  constructor() {\n    this.autoPlay = false;\n    this.videoUrl = environment.image_video_url_server;\n    this.getFile = new EventEmitter();\n    this.isPlaying = false;\n  }\n  isBase64(imagePath) {\n    return typeof imagePath === 'string' && imagePath.startsWith('data:video/mp4') || imagePath.startsWith('../../../../../')\n    // imagePath.startsWith('./')\n    ;\n  }\n  // ngAfterViewInit(): void {\n  //   if (\n  //     this.videoPlayer &&\n  //     this.videoPlayer.nativeElement instanceof HTMLVideoElement\n  //   ) {\n  //     const videoElement: HTMLVideoElement = this.videoPlayer.nativeElement;\n  //     // Pause the video after 500 milliseconds (0.5 seconds)\n  //     videoElement.muted = true;\n  //     videoElement.play();\n  //     setTimeout(() => {\n  //       videoElement.pause();\n  //     }, 500);\n  //   }\n  // }\n  ngAfterViewInit() {\n    const videoElement = this.videoPlayer?.nativeElement;\n    // Default autoplay behavior set for the default video\n    if (this.autoPlay) {\n      videoElement.muted = true;\n      videoElement.play().then(() => {\n        this.isPlaying = true;\n      }).catch(error => {\n        console.error(error);\n      });\n    }\n    // Play video event\n    videoElement.addEventListener('play', () => {\n      this.isPlaying = true;\n    });\n    // Pause video event\n    videoElement.addEventListener('pause', () => {\n      this.isPlaying = false;\n    });\n  }\n  togglePlayPause() {\n    const videoElement = this.videoPlayer.nativeElement;\n    if (videoElement.paused) {\n      videoElement.play().then(() => {\n        this.isPlaying = true;\n      }).catch(error => {\n        console.error(error);\n      });\n    } else {\n      videoElement.pause();\n    }\n  }\n  setVideo(event) {\n    const input = event.target;\n    const file = input.files?.[0];\n    if (file) {\n      const maxSize = 10 * 1024 * 1024;\n      if (file.size > maxSize) {\n        alert('File size exceeds the maximum limit of 10MB.');\n        return;\n      }\n      const reader = new FileReader();\n      reader.onload = () => {\n        const videoUrl = reader.result;\n        this.video = videoUrl;\n        this.getFile.emit(file);\n        const videoElement = this.videoPlayer.nativeElement;\n        videoElement.load();\n        videoElement.play();\n      };\n      reader.readAsDataURL(file);\n    }\n  }\n  static #_ = this.propDecorators = {\n    id: [{\n      type: Input,\n      args: [{\n        required: true\n      }]\n    }],\n    isEdit: [{\n      type: Input,\n      args: [{\n        required: true\n      }]\n    }],\n    video: [{\n      type: Input\n    }],\n    autoPlay: [{\n      type: Input\n    }],\n    getFile: [{\n      type: Output\n    }],\n    videoPlayer: [{\n      type: ViewChild,\n      args: ['videoPlayer']\n    }]\n  };\n};\nLayout31Component = __decorate([Component({\n  selector: 'app-layout31',\n  standalone: true,\n  imports: [CommonModule, MatIconModule],\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], Layout31Component);\nexport { Layout31Component };","map":{"version":3,"names":["Component","EventEmitter","Input","Output","ViewChild","environment","CommonModule","MatIconModule","Layout31Component","constructor","autoPlay","videoUrl","image_video_url_server","getFile","isPlaying","isBase64","imagePath","startsWith","ngAfterViewInit","videoElement","videoPlayer","nativeElement","muted","play","then","catch","error","console","addEventListener","togglePlayPause","paused","pause","setVideo","event","input","target","file","files","maxSize","size","alert","reader","FileReader","onload","result","video","emit","load","readAsDataURL","_","args","required","__decorate","selector","standalone","imports","template","__NG_CLI_RESOURCE__0"],"sources":["D:\\Maithil\\website-cms\\src\\app\\components\\common\\layouts\\layout31\\layout31.component.ts"],"sourcesContent":["import {\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { environment } from '../../../../../environments/environment.development';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@Component({\r\n  selector: 'app-layout31',\r\n  standalone: true,\r\n  imports: [CommonModule, MatIconModule],\r\n  templateUrl: './layout31.component.html',\r\n  styleUrl: './layout31.component.css',\r\n})\r\nexport class Layout31Component {\r\n  @Input({ required: true }) id: any;\r\n  @Input({ required: true }) isEdit: any;\r\n  @Input() video!: string;\r\n  @Input() autoPlay: boolean = false;\r\n  videoUrl = environment.image_video_url_server;\r\n  @Output() getFile = new EventEmitter<File>();\r\n\r\n  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;\r\n  isPlaying: boolean = false;\r\n\r\n  isBase64(imagePath: any): boolean {\r\n    return (\r\n      (typeof imagePath === 'string' &&\r\n        imagePath.startsWith('data:video/mp4')) ||\r\n      imagePath.startsWith('../../../../../')\r\n      // imagePath.startsWith('./')\r\n    );\r\n  }\r\n  // ngAfterViewInit(): void {\r\n  //   if (\r\n  //     this.videoPlayer &&\r\n  //     this.videoPlayer.nativeElement instanceof HTMLVideoElement\r\n  //   ) {\r\n  //     const videoElement: HTMLVideoElement = this.videoPlayer.nativeElement;\r\n\r\n  //     // Pause the video after 500 milliseconds (0.5 seconds)\r\n  //     videoElement.muted = true;\r\n  //     videoElement.play();\r\n  //     setTimeout(() => {\r\n  //       videoElement.pause();\r\n  //     }, 500);\r\n  //   }\r\n  // }\r\n  ngAfterViewInit(): void {\r\n    const videoElement = this.videoPlayer?.nativeElement;\r\n\r\n    // Default autoplay behavior set for the default video\r\n    if (this.autoPlay) {\r\n      videoElement.muted = true;\r\n      videoElement\r\n        .play()\r\n        .then(() => {\r\n          this.isPlaying = true;\r\n        })\r\n        .catch((error) => {\r\n          console.error(error);\r\n        });\r\n    }\r\n\r\n    // Play video event\r\n    videoElement.addEventListener('play', () => {\r\n      this.isPlaying = true;\r\n    });\r\n\r\n    // Pause video event\r\n    videoElement.addEventListener('pause', () => {\r\n      this.isPlaying = false;\r\n    });\r\n  }\r\n\r\n  togglePlayPause(): void {\r\n    const videoElement = this.videoPlayer.nativeElement;\r\n\r\n    if (videoElement.paused) {\r\n      videoElement\r\n        .play()\r\n        .then(() => {\r\n          this.isPlaying = true;\r\n        })\r\n        .catch((error) => {\r\n          console.error(error);\r\n        });\r\n    } else {\r\n      videoElement.pause();\r\n    }\r\n  }\r\n\r\n  setVideo(event: any): void {\r\n    const input = event.target as HTMLInputElement;\r\n    const file = input.files?.[0];\r\n\r\n    if (file) {\r\n      const maxSize = 10 * 1024 * 1024;\r\n      if (file.size > maxSize) {\r\n        alert('File size exceeds the maximum limit of 10MB.');\r\n        return;\r\n      }\r\n\r\n      const reader = new FileReader();\r\n\r\n      reader.onload = () => {\r\n        const videoUrl = reader.result as string;\r\n        this.video = videoUrl;\r\n\r\n        this.getFile.emit(file);\r\n\r\n        const videoElement = this.videoPlayer.nativeElement;\r\n        videoElement.load();\r\n        videoElement.play();\r\n      };\r\n\r\n      reader.readAsDataURL(file);\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}