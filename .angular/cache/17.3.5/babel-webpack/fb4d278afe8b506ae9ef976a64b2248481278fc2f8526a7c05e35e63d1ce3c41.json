{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./layout33.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./layout33.component.css?ngResource\";\nimport { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { environment } from '../../../../../environments/environment.development';\nimport { Router, RouterModule } from '@angular/router';\nlet Layout33Component = class Layout33Component {\n  constructor(router) {\n    this.router = router;\n    this.onClick = new EventEmitter();\n    this.titleChange = new EventEmitter();\n    this.descriptionChange = new EventEmitter();\n    this.descriptionChange2 = new EventEmitter();\n    this.linkChange = new EventEmitter();\n    this.imageUrl = environment.image_url_server;\n  }\n  // navigate(url: any) {\n  //   this.onClick.emit(url)\n  // }\n  ngAfterViewInit() {\n    if (this.videoPlayer1) {\n      this.videoPlayer1.nativeElement.load();\n    }\n  }\n  ngOnChanges(changes) {\n    if (changes['imageName1']) {\n      if (this.videoPlayer1) {\n        this.videoPlayer1.nativeElement.load();\n      }\n    }\n  }\n  isBase64(data) {\n    return typeof data === 'string' && (\n    // (data.startsWith('data:image/') || data.startsWith('data:video/mp4')) || data.startsWith('../../../../../')\n    data.startsWith('data:image/') || data.startsWith('data:video/mp4')) || data.startsWith('./');\n  }\n  setImage(event) {\n    const input = event.target;\n    const file = input.files?.[0];\n    if (file) {\n      const fileType = file.type.split('/')[0];\n      const maxSize = 10 * 1024 * 1024; // 10 MB max size\n      if (fileType !== 'image' && fileType !== 'video') {\n        alert('Please select an image or video file.');\n        return;\n      }\n      if (file.size > maxSize) {\n        alert('The file size is too large. Please select a file smaller than 10MB.');\n        return;\n      }\n      const reader = new FileReader();\n      if (fileType === 'image') {\n        reader.onload = () => {\n          const imgUrl = reader.result;\n          this.imageName1 = imgUrl;\n          this.onClick.emit(file);\n        };\n        reader.readAsDataURL(file);\n      } else if (fileType === 'video') {\n        reader.onload = () => {\n          const videoUrl = reader.result;\n          this.imageName1 = videoUrl;\n          this.onClick.emit(file);\n          const videoElement = this.videoPlayer1?.nativeElement;\n          if (videoElement) {\n            videoElement.load();\n            videoElement.play();\n          }\n        };\n        reader.readAsDataURL(file);\n      }\n    }\n  }\n  CustomTitleText(newTitle) {\n    this.titleChange.emit(newTitle);\n  }\n  CustomDescriptionText(newDescription) {\n    this.descriptionChange.emit(newDescription);\n  }\n  CustomDescriptionText2(newDescription2) {\n    this.descriptionChange2.emit(newDescription2);\n  }\n  CustomLinkText(newLink) {\n    this.linkChange.emit(newLink);\n  }\n  navigate(url) {\n    this.router.navigateByUrl('/', {\n      skipLocationChange: true\n    }).then(() => {\n      this.router.navigateByUrl(url);\n    });\n  }\n  static #_ = this.ctorParameters = () => [{\n    type: Router\n  }];\n  static #_2 = this.propDecorators = {\n    id: [{\n      type: Input,\n      args: [{\n        required: true\n      }]\n    }],\n    isEdit: [{\n      type: Input,\n      args: [{\n        required: true\n      }]\n    }],\n    imageName1: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    description: [{\n      type: Input\n    }],\n    news_description2: [{\n      type: Input\n    }],\n    link: [{\n      type: Input\n    }],\n    alt_text: [{\n      type: Input\n    }],\n    url: [{\n      type: Input\n    }],\n    onClick: [{\n      type: Output\n    }],\n    titleChange: [{\n      type: Output\n    }],\n    descriptionChange: [{\n      type: Output\n    }],\n    descriptionChange2: [{\n      type: Output\n    }],\n    linkChange: [{\n      type: Output\n    }],\n    videoPlayer1: [{\n      type: ViewChild,\n      args: ['videoPlayer1', {\n        static: false\n      }]\n    }]\n  };\n};\nLayout33Component = __decorate([Component({\n  selector: 'app-layout33',\n  standalone: true,\n  imports: [CommonModule, FormsModule, MatFormFieldModule, MatInputModule, MatSelectModule, RouterModule],\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], Layout33Component);\nexport { Layout33Component };","map":{"version":3,"names":["CommonModule","Component","EventEmitter","Input","Output","ViewChild","FormsModule","MatFormFieldModule","MatInputModule","MatSelectModule","environment","Router","RouterModule","Layout33Component","constructor","router","onClick","titleChange","descriptionChange","descriptionChange2","linkChange","imageUrl","image_url_server","ngAfterViewInit","videoPlayer1","nativeElement","load","ngOnChanges","changes","isBase64","data","startsWith","setImage","event","input","target","file","files","fileType","type","split","maxSize","alert","size","reader","FileReader","onload","imgUrl","result","imageName1","emit","readAsDataURL","videoUrl","videoElement","play","CustomTitleText","newTitle","CustomDescriptionText","newDescription","CustomDescriptionText2","newDescription2","CustomLinkText","newLink","navigate","url","navigateByUrl","skipLocationChange","then","_","args","required","static","__decorate","selector","standalone","imports","template","__NG_CLI_RESOURCE__0"],"sources":["D:\\Maithil\\website-cms\\src\\app\\components\\common\\layouts\\layout33\\layout33.component.ts"],"sourcesContent":["import { CommonModule } from '@angular/common';\r\nimport {\r\n  AfterViewInit,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  SimpleChanges,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { environment } from '../../../../../environments/environment.development';\r\nimport { Router, RouterModule } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-layout33',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    RouterModule,\r\n  ],\r\n  templateUrl: './layout33.component.html',\r\n  styleUrl: './layout33.component.css',\r\n})\r\nexport class Layout33Component implements AfterViewInit {\r\n  constructor(private router: Router) {}\r\n  @Input({ required: true }) id: any;\r\n  @Input({ required: true }) isEdit: any;\r\n  @Input() imageName1!: any;\r\n  @Input() title!: string | null;\r\n  @Input() description!: string | null;\r\n  @Input() news_description2!: string | null;\r\n  @Input() link!: string | null;\r\n  @Input() alt_text!: string | null;\r\n  @Input() url!: string | null;\r\n  @Output() onClick = new EventEmitter();\r\n  @Output() titleChange = new EventEmitter();\r\n  @Output() descriptionChange = new EventEmitter();\r\n  @Output() descriptionChange2 = new EventEmitter();\r\n  @Output() linkChange = new EventEmitter();\r\n\r\n  @ViewChild('videoPlayer1', { static: false }) videoPlayer1:\r\n  | ElementRef\r\n  | undefined;\r\n\r\n  imageUrl = environment.image_url_server;\r\n  // navigate(url: any) {\r\n  //   this.onClick.emit(url)\r\n  // }\r\n  \r\n  ngAfterViewInit(): void {\r\n    if (this.videoPlayer1) {\r\n      this.videoPlayer1.nativeElement.load();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes['imageName1']) {\r\n      if (this.videoPlayer1) {\r\n        this.videoPlayer1.nativeElement.load();\r\n      }\r\n    }\r\n  }\r\n\r\n  isBase64(data: string): boolean {\r\n    return (\r\n      typeof data === 'string' &&\r\n      // (data.startsWith('data:image/') || data.startsWith('data:video/mp4')) || data.startsWith('../../../../../')\r\n      (data.startsWith('data:image/') || data.startsWith('data:video/mp4')) || data.startsWith('./')\r\n    );\r\n  }\r\n\r\n  setImage(event: any): void {\r\n    const input = event.target as HTMLInputElement;\r\n    const file = input.files?.[0];\r\n    if (file) {\r\n      const fileType = file.type.split('/')[0];\r\n      const maxSize = 10 * 1024 * 1024; // 10 MB max size\r\n  \r\n      if (fileType !== 'image' && fileType !== 'video') {\r\n        alert('Please select an image or video file.');\r\n        return;\r\n      }\r\n  \r\n      if (file.size > maxSize) {\r\n        alert('The file size is too large. Please select a file smaller than 10MB.');\r\n        return;\r\n      }\r\n  \r\n      const reader = new FileReader();\r\n      if (fileType === 'image') {\r\n        reader.onload = () => {\r\n          const imgUrl = reader.result as string;\r\n          this.imageName1 = imgUrl;\r\n          this.onClick.emit(file);\r\n        };\r\n        reader.readAsDataURL(file); \r\n      } else if (fileType === 'video') {\r\n        reader.onload = () => {\r\n          const videoUrl = reader.result as string;\r\n          this.imageName1 = videoUrl; \r\n          this.onClick.emit(file); \r\n          const videoElement = this.videoPlayer1?.nativeElement;\r\n          if (videoElement) {\r\n            videoElement.load();\r\n            videoElement.play();\r\n          }\r\n        };\r\n        reader.readAsDataURL(file);\r\n      }\r\n    }\r\n  }\r\n  \r\n  CustomTitleText(newTitle: string) {\r\n    this.titleChange.emit(newTitle);\r\n  }\r\n\r\n  CustomDescriptionText(newDescription: string) {\r\n    this.descriptionChange.emit(newDescription);\r\n  }\r\n\r\n  CustomDescriptionText2(newDescription2: string) {\r\n    this.descriptionChange2.emit(newDescription2);\r\n  }\r\n\r\n  CustomLinkText(newLink: string) {\r\n    this.linkChange.emit(newLink);\r\n  }\r\n\r\n  navigate(url: any) {\r\n    this.router.navigateByUrl('/', { skipLocationChange: true }).then(() => {\r\n      this.router.navigateByUrl(url);\r\n    });\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}