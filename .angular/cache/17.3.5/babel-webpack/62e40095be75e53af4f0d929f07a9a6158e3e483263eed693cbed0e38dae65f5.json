{"ast":null,"code":"import * as i2 from '@angular/common';\nimport { DOCUMENT, isPlatformBrowser, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, booleanAttribute, numberAttribute, Component, ViewEncapsulation, Inject, Input, Output, ViewChild, ContentChildren, PLATFORM_ID, Directive, HostListener, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport * as i1 from 'primeng/api';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport { DomHandler } from 'primeng/dom';\nimport { ArrowDownIcon } from 'primeng/icons/arrowdown';\nimport { ArrowUpIcon } from 'primeng/icons/arrowup';\nimport { CheckIcon } from 'primeng/icons/check';\nimport { ChevronDownIcon } from 'primeng/icons/chevrondown';\nimport { ChevronRightIcon } from 'primeng/icons/chevronright';\nimport { MinusIcon } from 'primeng/icons/minus';\nimport { SortAltIcon } from 'primeng/icons/sortalt';\nimport { SortAmountDownIcon } from 'primeng/icons/sortamountdown';\nimport { SortAmountUpAltIcon } from 'primeng/icons/sortamountupalt';\nimport { SpinnerIcon } from 'primeng/icons/spinner';\nimport * as i3 from 'primeng/paginator';\nimport { PaginatorModule } from 'primeng/paginator';\nimport * as i5 from 'primeng/ripple';\nimport { RippleModule } from 'primeng/ripple';\nimport * as i4 from 'primeng/scroller';\nimport { ScrollerModule } from 'primeng/scroller';\nimport { ObjectUtils } from 'primeng/utils';\nimport { Subject } from 'rxjs';\nconst _c0 = [\"container\"];\nconst _c1 = [\"resizeHelper\"];\nconst _c2 = [\"reorderIndicatorUp\"];\nconst _c3 = [\"reorderIndicatorDown\"];\nconst _c4 = [\"table\"];\nconst _c5 = [\"scrollableView\"];\nconst _c6 = [\"scrollableFrozenView\"];\nconst _c7 = (a0, a1, a2, a3, a4) => ({\n  \"p-treetable p-component\": true,\n  \"p-treetable-hoverable-rows\": a0,\n  \"p-treetable-auto-layout\": a1,\n  \"p-treetable-resizable\": a2,\n  \"p-treetable-resizable-fit\": a3,\n  \"p-treetable-flex-scrollable\": a4\n});\nconst _c8 = a0 => ({\n  $implicit: a0\n});\nconst _c9 = (a0, a1) => ({\n  left: a0,\n  width: a1\n});\nconst _c10 = a0 => ({\n  width: a0\n});\nconst _c11 = () => ({\n  display: \"none\"\n});\nfunction TreeTable_div_2_i_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\");\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(\"p-treetable-loading-icon pi-spin \" + ctx_r0.loadingIcon);\n  }\n}\nfunction TreeTable_div_2_ng_container_3_SpinnerIcon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"SpinnerIcon\", 24);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"spin\", true)(\"styleClass\", \"p-treetable-loading-icon\");\n  }\n}\nfunction TreeTable_div_2_ng_container_3_span_2_1_ng_template_0_Template(rf, ctx) {}\nfunction TreeTable_div_2_ng_container_3_span_2_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeTable_div_2_ng_container_3_span_2_1_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction TreeTable_div_2_ng_container_3_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 25);\n    i0.ɵɵtemplate(1, TreeTable_div_2_ng_container_3_span_2_1_Template, 1, 0, null, 26);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.loadingIconTemplate);\n  }\n}\nfunction TreeTable_div_2_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TreeTable_div_2_ng_container_3_SpinnerIcon_1_Template, 1, 2, \"SpinnerIcon\", 22)(2, TreeTable_div_2_ng_container_3_span_2_Template, 2, 1, \"span\", 23);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.loadingIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.loadingIconTemplate);\n  }\n}\nfunction TreeTable_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18)(1, \"div\", 19);\n    i0.ɵɵtemplate(2, TreeTable_div_2_i_2_Template, 1, 2, \"i\", 20)(3, TreeTable_div_2_ng_container_3_Template, 3, 2, \"ng-container\", 21);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.loadingIcon);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.loadingIcon);\n  }\n}\nfunction TreeTable_div_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTable_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 27);\n    i0.ɵɵtemplate(1, TreeTable_div_3_ng_container_1_Template, 1, 0, \"ng-container\", 26);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.captionTemplate);\n  }\n}\nfunction TreeTable_p_paginator_4_1_ng_template_0_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTable_p_paginator_4_1_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeTable_p_paginator_4_1_ng_template_0_ng_container_0_Template, 1, 0, \"ng-container\", 26);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.paginatorFirstPageLinkIconTemplate);\n  }\n}\nfunction TreeTable_p_paginator_4_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeTable_p_paginator_4_1_ng_template_0_Template, 1, 1, \"ng-template\", 29);\n  }\n}\nfunction TreeTable_p_paginator_4_2_ng_template_0_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTable_p_paginator_4_2_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeTable_p_paginator_4_2_ng_template_0_ng_container_0_Template, 1, 0, \"ng-container\", 26);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.paginatorPreviousPageLinkIconTemplate);\n  }\n}\nfunction TreeTable_p_paginator_4_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeTable_p_paginator_4_2_ng_template_0_Template, 1, 1, \"ng-template\", 30);\n  }\n}\nfunction TreeTable_p_paginator_4_3_ng_template_0_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTable_p_paginator_4_3_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeTable_p_paginator_4_3_ng_template_0_ng_container_0_Template, 1, 0, \"ng-container\", 26);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.paginatorLastPageLinkIconTemplate);\n  }\n}\nfunction TreeTable_p_paginator_4_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeTable_p_paginator_4_3_ng_template_0_Template, 1, 1, \"ng-template\", 31);\n  }\n}\nfunction TreeTable_p_paginator_4_4_ng_template_0_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTable_p_paginator_4_4_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeTable_p_paginator_4_4_ng_template_0_ng_container_0_Template, 1, 0, \"ng-container\", 26);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.paginatorNextPageLinkIconTemplate);\n  }\n}\nfunction TreeTable_p_paginator_4_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeTable_p_paginator_4_4_ng_template_0_Template, 1, 1, \"ng-template\", 32);\n  }\n}\nfunction TreeTable_p_paginator_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-paginator\", 28);\n    i0.ɵɵlistener(\"onPageChange\", function TreeTable_p_paginator_4_Template_p_paginator_onPageChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r0 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r0.onPageChange($event));\n    });\n    i0.ɵɵtemplate(1, TreeTable_p_paginator_4_1_Template, 1, 0, null, 21)(2, TreeTable_p_paginator_4_2_Template, 1, 0, null, 21)(3, TreeTable_p_paginator_4_3_Template, 1, 0, null, 21)(4, TreeTable_p_paginator_4_4_Template, 1, 0, null, 21);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"rows\", ctx_r0.rows)(\"first\", ctx_r0.first)(\"totalRecords\", ctx_r0.totalRecords)(\"pageLinkSize\", ctx_r0.pageLinks)(\"alwaysShow\", ctx_r0.alwaysShowPaginator)(\"rowsPerPageOptions\", ctx_r0.rowsPerPageOptions)(\"templateLeft\", ctx_r0.paginatorLeftTemplate)(\"templateRight\", ctx_r0.paginatorRightTemplate)(\"dropdownAppendTo\", ctx_r0.paginatorDropdownAppendTo)(\"currentPageReportTemplate\", ctx_r0.currentPageReportTemplate)(\"showFirstLastIcon\", ctx_r0.showFirstLastIcon)(\"dropdownItemTemplate\", ctx_r0.paginatorDropdownItemTemplate)(\"showCurrentPageReport\", ctx_r0.showCurrentPageReport)(\"showJumpToPageDropdown\", ctx_r0.showJumpToPageDropdown)(\"showPageLinks\", ctx_r0.showPageLinks)(\"styleClass\", ctx_r0.paginatorStyleClass)(\"locale\", ctx_r0.paginatorLocale);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.paginatorFirstPageLinkIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.paginatorPreviousPageLinkIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.paginatorLastPageLinkIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.paginatorNextPageLinkIconTemplate);\n  }\n}\nfunction TreeTable_div_5_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTable_div_5_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTable_div_5_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTable_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 33)(1, \"table\", 34, 1);\n    i0.ɵɵtemplate(3, TreeTable_div_5_ng_container_3_Template, 1, 0, \"ng-container\", 35);\n    i0.ɵɵelementStart(4, \"thead\", 36);\n    i0.ɵɵtemplate(5, TreeTable_div_5_ng_container_5_Template, 1, 0, \"ng-container\", 35);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"tbody\", 37);\n    i0.ɵɵelementStart(7, \"tfoot\", 38);\n    i0.ɵɵtemplate(8, TreeTable_div_5_ng_container_8_Template, 1, 0, \"ng-container\", 35);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.tableStyleClass)(\"ngStyle\", ctx_r0.tableStyle);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.colGroupTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(10, _c8, ctx_r0.columns));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.headerTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(12, _c8, ctx_r0.columns));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"pTreeTableBody\", ctx_r0.columns)(\"pTreeTableBodyTemplate\", ctx_r0.bodyTemplate);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.footerTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(14, _c8, ctx_r0.columns));\n  }\n}\nfunction TreeTable_div_6_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 42, 3);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ttScrollableView\", ctx_r0.frozenColumns)(\"frozen\", true)(\"ngStyle\", i0.ɵɵpureFunction1(4, _c10, ctx_r0.frozenWidth))(\"scrollHeight\", ctx_r0.scrollHeight);\n  }\n}\nfunction TreeTable_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 39);\n    i0.ɵɵtemplate(1, TreeTable_div_6_div_1_Template, 2, 6, \"div\", 40);\n    i0.ɵɵelement(2, \"div\", 41, 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.frozenColumns || ctx_r0.frozenBodyTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ttScrollableView\", ctx_r0.columns)(\"frozen\", false)(\"scrollHeight\", ctx_r0.scrollHeight)(\"ngStyle\", i0.ɵɵpureFunction2(5, _c9, ctx_r0.frozenWidth, \"calc(100% - \" + ctx_r0.frozenWidth + \")\"));\n  }\n}\nfunction TreeTable_p_paginator_7_1_ng_template_0_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTable_p_paginator_7_1_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeTable_p_paginator_7_1_ng_template_0_ng_container_0_Template, 1, 0, \"ng-container\", 26);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.paginatorFirstPageLinkIconTemplate);\n  }\n}\nfunction TreeTable_p_paginator_7_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeTable_p_paginator_7_1_ng_template_0_Template, 1, 1, \"ng-template\", 29);\n  }\n}\nfunction TreeTable_p_paginator_7_2_ng_template_0_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTable_p_paginator_7_2_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeTable_p_paginator_7_2_ng_template_0_ng_container_0_Template, 1, 0, \"ng-container\", 26);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.paginatorPreviousPageLinkIconTemplate);\n  }\n}\nfunction TreeTable_p_paginator_7_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeTable_p_paginator_7_2_ng_template_0_Template, 1, 1, \"ng-template\", 30);\n  }\n}\nfunction TreeTable_p_paginator_7_3_ng_template_0_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTable_p_paginator_7_3_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeTable_p_paginator_7_3_ng_template_0_ng_container_0_Template, 1, 0, \"ng-container\", 26);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.paginatorLastPageLinkIconTemplate);\n  }\n}\nfunction TreeTable_p_paginator_7_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeTable_p_paginator_7_3_ng_template_0_Template, 1, 1, \"ng-template\", 31);\n  }\n}\nfunction TreeTable_p_paginator_7_4_ng_template_0_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTable_p_paginator_7_4_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeTable_p_paginator_7_4_ng_template_0_ng_container_0_Template, 1, 0, \"ng-container\", 26);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.paginatorNextPageLinkIconTemplate);\n  }\n}\nfunction TreeTable_p_paginator_7_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeTable_p_paginator_7_4_ng_template_0_Template, 1, 1, \"ng-template\", 32);\n  }\n}\nfunction TreeTable_p_paginator_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-paginator\", 43);\n    i0.ɵɵlistener(\"onPageChange\", function TreeTable_p_paginator_7_Template_p_paginator_onPageChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r0 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r0.onPageChange($event));\n    });\n    i0.ɵɵtemplate(1, TreeTable_p_paginator_7_1_Template, 1, 0, null, 21)(2, TreeTable_p_paginator_7_2_Template, 1, 0, null, 21)(3, TreeTable_p_paginator_7_3_Template, 1, 0, null, 21)(4, TreeTable_p_paginator_7_4_Template, 1, 0, null, 21);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"rows\", ctx_r0.rows)(\"first\", ctx_r0.first)(\"totalRecords\", ctx_r0.totalRecords)(\"pageLinkSize\", ctx_r0.pageLinks)(\"alwaysShow\", ctx_r0.alwaysShowPaginator)(\"rowsPerPageOptions\", ctx_r0.rowsPerPageOptions)(\"templateLeft\", ctx_r0.paginatorLeftTemplate)(\"templateRight\", ctx_r0.paginatorRightTemplate)(\"dropdownAppendTo\", ctx_r0.paginatorDropdownAppendTo)(\"currentPageReportTemplate\", ctx_r0.currentPageReportTemplate)(\"showFirstLastIcon\", ctx_r0.showFirstLastIcon)(\"dropdownItemTemplate\", ctx_r0.paginatorDropdownItemTemplate)(\"showCurrentPageReport\", ctx_r0.showCurrentPageReport)(\"showJumpToPageDropdown\", ctx_r0.showJumpToPageDropdown)(\"showPageLinks\", ctx_r0.showPageLinks)(\"styleClass\", ctx_r0.paginatorStyleClass)(\"locale\", ctx_r0.paginatorLocale);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.paginatorFirstPageLinkIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.paginatorPreviousPageLinkIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.paginatorLastPageLinkIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.paginatorNextPageLinkIconTemplate);\n  }\n}\nfunction TreeTable_div_8_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTable_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 44);\n    i0.ɵɵtemplate(1, TreeTable_div_8_ng_container_1_Template, 1, 0, \"ng-container\", 26);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.summaryTemplate);\n  }\n}\nfunction TreeTable_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 45, 4);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction0(1, _c11));\n  }\n}\nfunction TreeTable_span_10_ArrowDownIcon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ArrowDownIcon\");\n  }\n}\nfunction TreeTable_span_10_3_ng_template_0_Template(rf, ctx) {}\nfunction TreeTable_span_10_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeTable_span_10_3_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction TreeTable_span_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 46, 5);\n    i0.ɵɵtemplate(2, TreeTable_span_10_ArrowDownIcon_2_Template, 1, 0, \"ArrowDownIcon\", 21)(3, TreeTable_span_10_3_Template, 1, 0, null, 26);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction0(3, _c11));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.reorderIndicatorUpIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.reorderIndicatorUpIconTemplate);\n  }\n}\nfunction TreeTable_span_11_ArrowUpIcon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ArrowUpIcon\");\n  }\n}\nfunction TreeTable_span_11_3_ng_template_0_Template(rf, ctx) {}\nfunction TreeTable_span_11_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeTable_span_11_3_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction TreeTable_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 47, 6);\n    i0.ɵɵtemplate(2, TreeTable_span_11_ArrowUpIcon_2_Template, 1, 0, \"ArrowUpIcon\", 21)(3, TreeTable_span_11_3_Template, 1, 0, null, 26);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction0(3, _c11));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.reorderIndicatorDownIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.reorderIndicatorDownIconTemplate);\n  }\n}\nconst _c12 = [\"pTreeTableBody\", \"\"];\nconst _c13 = (a0, a1, a2, a3) => ({\n  $implicit: a0,\n  node: a1,\n  rowData: a2,\n  columns: a3\n});\nconst _c14 = (a0, a1) => ({\n  $implicit: a0,\n  frozen: a1\n});\nfunction TTBody_ng_template_0_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TTBody_ng_template_0_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TTBody_ng_template_0_ng_container_0_ng_container_1_Template, 1, 0, \"ng-container\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const serializedNode_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.template)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction4(2, _c13, serializedNode_r1, serializedNode_r1.node, serializedNode_r1.node.data, ctx_r1.columns));\n  }\n}\nfunction TTBody_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TTBody_ng_template_0_ng_container_0_Template, 2, 7, \"ng-container\", 1);\n  }\n  if (rf & 2) {\n    const serializedNode_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngIf\", serializedNode_r1.visible);\n  }\n}\nfunction TTBody_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TTBody_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TTBody_ng_container_1_ng_container_1_Template, 1, 0, \"ng-container\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.tt.emptyMessageTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c14, ctx_r1.columns, ctx_r1.frozen));\n  }\n}\nconst _c15 = [\"scrollHeader\"];\nconst _c16 = [\"scrollHeaderBox\"];\nconst _c17 = [\"scrollBody\"];\nconst _c18 = [\"scrollTable\"];\nconst _c19 = [\"loadingTable\"];\nconst _c20 = [\"scrollFooter\"];\nconst _c21 = [\"scrollFooterBox\"];\nconst _c22 = [\"scrollableAligner\"];\nconst _c23 = [\"scroller\"];\nconst _c24 = [\"ttScrollableView\", \"\"];\nconst _c25 = a0 => ({\n  height: a0\n});\nconst _c26 = (a0, a1) => ({\n  $implicit: a0,\n  options: a1\n});\nconst _c27 = a0 => ({\n  options: a0\n});\nconst _c28 = (a0, a1) => ({\n  \"max-height\": a0,\n  \"overflow-y\": a1\n});\nconst _c29 = () => ({});\nconst _c30 = () => ({\n  \"background-color\": \"transparent\"\n});\nfunction TTScrollableView_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TTScrollableView_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TTScrollableView_p_scroller_8_ng_template_2_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TTScrollableView_p_scroller_8_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TTScrollableView_p_scroller_8_ng_template_2_ng_container_0_Template, 1, 0, \"ng-container\", 12);\n  }\n  if (rf & 2) {\n    const items_r3 = ctx.$implicit;\n    const scrollerOptions_r4 = ctx.options;\n    i0.ɵɵnextContext(2);\n    const buildInItems_r5 = i0.ɵɵreference(11);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", buildInItems_r5)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c26, items_r3, scrollerOptions_r4));\n  }\n}\nfunction TTScrollableView_p_scroller_8_ng_container_3_ng_template_1_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TTScrollableView_p_scroller_8_ng_container_3_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TTScrollableView_p_scroller_8_ng_container_3_ng_template_1_ng_container_0_Template, 1, 0, \"ng-container\", 12);\n  }\n  if (rf & 2) {\n    const scrollerOptions_r6 = ctx.options;\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.loaderTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c27, scrollerOptions_r6));\n  }\n}\nfunction TTScrollableView_p_scroller_8_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TTScrollableView_p_scroller_8_ng_container_3_ng_template_1_Template, 1, 4, \"ng-template\", 19);\n    i0.ɵɵelementContainerEnd();\n  }\n}\nfunction TTScrollableView_p_scroller_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-scroller\", 17, 3);\n    i0.ɵɵlistener(\"onLazyLoad\", function TTScrollableView_p_scroller_8_Template_p_scroller_onLazyLoad_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.tt.onLazyItemLoad($event));\n    });\n    i0.ɵɵtemplate(2, TTScrollableView_p_scroller_8_ng_template_2_Template, 1, 5, \"ng-template\", 18)(3, TTScrollableView_p_scroller_8_ng_container_3_Template, 2, 0, \"ng-container\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction1(8, _c25, ctx_r1.tt.scrollHeight !== \"flex\" ? ctx_r1.tt.scrollHeight : undefined));\n    i0.ɵɵproperty(\"items\", ctx_r1.tt.serializedValue)(\"scrollHeight\", ctx_r1.scrollHeight !== \"flex\" ? undefined : \"100%\")(\"itemSize\", ctx_r1.tt.virtualScrollItemSize || ctx_r1.tt._virtualRowHeight)(\"lazy\", ctx_r1.tt.lazy)(\"options\", ctx_r1.tt.virtualScrollOptions);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.loaderTemplate);\n  }\n}\nfunction TTScrollableView_ng_container_9_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TTScrollableView_ng_container_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 20, 4);\n    i0.ɵɵtemplate(3, TTScrollableView_ng_container_9_ng_container_3_Template, 1, 0, \"ng-container\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    const buildInItems_r5 = i0.ɵɵreference(11);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction2(3, _c28, ctx_r1.tt.scrollHeight !== \"flex\" ? ctx_r1.scrollHeight : undefined, !ctx_r1.frozen && ctx_r1.tt.scrollHeight ? \"scroll\" : undefined));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", buildInItems_r5)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(7, _c26, ctx_r1.serializedValue, i0.ɵɵpureFunction0(6, _c29)));\n  }\n}\nfunction TTScrollableView_ng_template_10_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TTScrollableView_ng_template_10_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 24, 6);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction0(1, _c30));\n  }\n}\nfunction TTScrollableView_ng_template_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 21, 5);\n    i0.ɵɵtemplate(2, TTScrollableView_ng_template_10_ng_container_2_Template, 1, 0, \"ng-container\", 12);\n    i0.ɵɵelement(3, \"tbody\", 22);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, TTScrollableView_ng_template_10_div_4_Template, 2, 2, \"div\", 23);\n  }\n  if (rf & 2) {\n    const items_r7 = ctx.$implicit;\n    const scrollerOptions_r8 = ctx.options;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.tt.tableStyleClass);\n    i0.ɵɵproperty(\"ngClass\", scrollerOptions_r8.contentStyleClass)(\"ngStyle\", ctx_r1.getMergedTableStyles(scrollerOptions_r8.contentStyle));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.frozen ? ctx_r1.tt.frozenColGroupTemplate || ctx_r1.tt.colGroupTemplate : ctx_r1.tt.colGroupTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(11, _c8, ctx_r1.columns));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"pTreeTableBody\", ctx_r1.columns)(\"pTreeTableBodyTemplate\", ctx_r1.frozen ? ctx_r1.tt.frozenBodyTemplate || ctx_r1.tt.bodyTemplate : ctx_r1.tt.bodyTemplate)(\"serializedNodes\", items_r7)(\"frozen\", ctx_r1.frozen);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.frozen);\n  }\n}\nfunction TTScrollableView_div_12_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TTScrollableView_div_12_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TTScrollableView_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 25, 7)(2, \"div\", 26, 8)(4, \"table\", 27);\n    i0.ɵɵtemplate(5, TTScrollableView_div_12_ng_container_5_Template, 1, 0, \"ng-container\", 12);\n    i0.ɵɵelementStart(6, \"tfoot\", 28);\n    i0.ɵɵtemplate(7, TTScrollableView_div_12_ng_container_7_Template, 1, 0, \"ng-container\", 12);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngClass\", ctx_r1.tt.tableStyleClass)(\"ngStyle\", ctx_r1.tt.tableStyle);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.frozen ? ctx_r1.tt.frozenColGroupTemplate || ctx_r1.tt.colGroupTemplate : ctx_r1.tt.colGroupTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(6, _c8, ctx_r1.columns));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.frozen ? ctx_r1.tt.frozenFooterTemplate || ctx_r1.tt.footerTemplate : ctx_r1.tt.footerTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(8, _c8, ctx_r1.columns));\n  }\n}\nfunction TTSortIcon_ng_container_0_SortAltIcon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"SortAltIcon\", 3);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"styleClass\", \"p-sortable-column-icon\");\n  }\n}\nfunction TTSortIcon_ng_container_0_SortAmountUpAltIcon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"SortAmountUpAltIcon\", 3);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"styleClass\", \"p-sortable-column-icon\");\n  }\n}\nfunction TTSortIcon_ng_container_0_SortAmountDownIcon_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"SortAmountDownIcon\", 3);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"styleClass\", \"p-sortable-column-icon\");\n  }\n}\nfunction TTSortIcon_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TTSortIcon_ng_container_0_SortAltIcon_1_Template, 1, 1, \"SortAltIcon\", 2)(2, TTSortIcon_ng_container_0_SortAmountUpAltIcon_2_Template, 1, 1, \"SortAmountUpAltIcon\", 2)(3, TTSortIcon_ng_container_0_SortAmountDownIcon_3_Template, 1, 1, \"SortAmountDownIcon\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.sortOrder === 0);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.sortOrder === 1);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.sortOrder === -1);\n  }\n}\nfunction TTSortIcon_span_1_1_ng_template_0_Template(rf, ctx) {}\nfunction TTSortIcon_span_1_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TTSortIcon_span_1_1_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction TTSortIcon_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 4);\n    i0.ɵɵtemplate(1, TTSortIcon_span_1_1_Template, 1, 0, null, 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.tt.sortIconTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c8, ctx_r0.sortOrder));\n  }\n}\nconst _c31 = (a0, a1) => ({\n  \"p-checkbox-focused\": a0,\n  \"p-variant-filled\": a1\n});\nconst _c32 = (a0, a1, a2, a3) => ({\n  \"p-checkbox-box\": true,\n  \"p-highlight\": a0,\n  \"p-focus\": a1,\n  \"p-indeterminate\": a2,\n  \"p-disabled\": a3\n});\nconst _c33 = (a0, a1) => ({\n  $implicit: a0,\n  partialSelected: a1\n});\nfunction TTCheckbox_ng_container_5_CheckIcon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"CheckIcon\", 7);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"styleClass\", \"p-checkbox-icon\");\n  }\n}\nfunction TTCheckbox_ng_container_5_MinusIcon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"MinusIcon\", 7);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"styleClass\", \"p-checkbox-icon\");\n  }\n}\nfunction TTCheckbox_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TTCheckbox_ng_container_5_CheckIcon_1_Template, 1, 1, \"CheckIcon\", 6)(2, TTCheckbox_ng_container_5_MinusIcon_2_Template, 1, 1, \"MinusIcon\", 6);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.checked);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.partialChecked);\n  }\n}\nfunction TTCheckbox_span_6_1_ng_template_0_Template(rf, ctx) {}\nfunction TTCheckbox_span_6_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TTCheckbox_span_6_1_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction TTCheckbox_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtemplate(1, TTCheckbox_span_6_1_Template, 1, 0, null, 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.tt.checkboxIconTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c33, ctx_r1.checked, ctx_r1.partialChecked));\n  }\n}\nconst _c34 = [\"box\"];\nconst _c35 = a0 => ({\n  \"p-checkbox-focused\": a0\n});\nconst _c36 = (a0, a1, a2) => ({\n  \"p-checkbox-box\": true,\n  \"p-highlight\": a0,\n  \"p-focus\": a1,\n  \"p-disabled\": a2\n});\nfunction TTHeaderCheckbox_ng_container_6_CheckIcon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"CheckIcon\", 9);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"styleClass\", \"p-checkbox-icon\");\n  }\n}\nfunction TTHeaderCheckbox_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TTHeaderCheckbox_ng_container_6_CheckIcon_1_Template, 1, 1, \"CheckIcon\", 8);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.checked);\n  }\n}\nfunction TTHeaderCheckbox_span_7_1_ng_template_0_Template(rf, ctx) {}\nfunction TTHeaderCheckbox_span_7_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TTHeaderCheckbox_span_7_1_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction TTHeaderCheckbox_span_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 10);\n    i0.ɵɵtemplate(1, TTHeaderCheckbox_span_7_1_Template, 1, 0, null, 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.tt.headerCheckboxIconTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c8, ctx_r2.checked));\n  }\n}\nfunction TreeTableCellEditor_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTableCellEditor_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TreeTableCellEditor_ng_container_0_ng_container_1_Template, 1, 0, \"ng-container\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.inputTemplate);\n  }\n}\nfunction TreeTableCellEditor_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTableCellEditor_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TreeTableCellEditor_ng_container_1_ng_container_1_Template, 1, 0, \"ng-container\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.outputTemplate);\n  }\n}\nconst _c37 = (a0, a1) => ({\n  visibility: a0,\n  \"margin-left\": a1\n});\nfunction TreeTableToggler_ng_container_1_ChevronDownIcon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ChevronDownIcon\");\n  }\n  if (rf & 2) {\n    i0.ɵɵattribute(\"aria-hidden\", true);\n  }\n}\nfunction TreeTableToggler_ng_container_1_ChevronRightIcon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ChevronRightIcon\");\n  }\n  if (rf & 2) {\n    i0.ɵɵattribute(\"aria-hidden\", true);\n  }\n}\nfunction TreeTableToggler_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TreeTableToggler_ng_container_1_ChevronDownIcon_1_Template, 1, 1, \"ChevronDownIcon\", 1)(2, TreeTableToggler_ng_container_1_ChevronRightIcon_2_Template, 1, 1, \"ChevronRightIcon\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.rowNode.node.expanded);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.rowNode.node.expanded);\n  }\n}\nfunction TreeTableToggler_2_ng_template_0_Template(rf, ctx) {}\nfunction TreeTableToggler_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeTableToggler_2_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nclass TreeTableService {\n  sortSource = new Subject();\n  selectionSource = new Subject();\n  contextMenuSource = new Subject();\n  uiUpdateSource = new Subject();\n  totalRecordsSource = new Subject();\n  sortSource$ = this.sortSource.asObservable();\n  selectionSource$ = this.selectionSource.asObservable();\n  contextMenuSource$ = this.contextMenuSource.asObservable();\n  uiUpdateSource$ = this.uiUpdateSource.asObservable();\n  totalRecordsSource$ = this.totalRecordsSource.asObservable();\n  onSort(sortMeta) {\n    this.sortSource.next(sortMeta);\n  }\n  onSelectionChange() {\n    this.selectionSource.next(null);\n  }\n  onContextMenu(node) {\n    this.contextMenuSource.next(node);\n  }\n  onUIUpdate(value) {\n    this.uiUpdateSource.next(value);\n  }\n  onTotalRecordsChange(value) {\n    this.totalRecordsSource.next(value);\n  }\n  static ɵfac = function TreeTableService_Factory(t) {\n    return new (t || TreeTableService)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TreeTableService,\n    factory: TreeTableService.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeTableService, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * TreeTable is used to display hierarchical data in tabular format.\n * @group Components\n */\nclass TreeTable {\n  document;\n  renderer;\n  el;\n  cd;\n  zone;\n  tableService;\n  filterService;\n  config;\n  /**\n   * An array of objects to represent dynamic columns.\n   * @group Props\n   */\n  columns;\n  /**\n   * Inline style of the component.\n   * @group Props\n   */\n  style;\n  /**\n   * Style class of the component.\n   * @group Props\n   */\n  styleClass;\n  /**\n   * Inline style of the table.\n   * @group Props\n   */\n  tableStyle;\n  /**\n   * Style class of the table.\n   * @group Props\n   */\n  tableStyleClass;\n  /**\n   * Whether the cell widths scale according to their content or not.\n   * @group Props\n   */\n  autoLayout;\n  /**\n   * Defines if data is loaded and interacted with in lazy manner.\n   * @group Props\n   */\n  lazy = false;\n  /**\n   * Whether to call lazy loading on initialization.\n   * @group Props\n   */\n  lazyLoadOnInit = true;\n  /**\n   * When specified as true, enables the pagination.\n   * @group Props\n   */\n  paginator;\n  /**\n   * Number of rows to display per page.\n   * @group Props\n   */\n  rows;\n  /**\n   * Index of the first row to be displayed.\n   * @group Props\n   */\n  first = 0;\n  /**\n   * Number of page links to display in paginator.\n   * @group Props\n   */\n  pageLinks = 5;\n  /**\n   * Array of integer/object values to display inside rows per page dropdown of paginator\n   * @group Props\n   */\n  rowsPerPageOptions;\n  /**\n   * Whether to show it even there is only one page.\n   * @group Props\n   */\n  alwaysShowPaginator = true;\n  /**\n   * Position of the paginator.\n   * @group Props\n   */\n  paginatorPosition = 'bottom';\n  /**\n   * Custom style class for paginator\n   * @group Props\n   */\n  paginatorStyleClass;\n  /**\n   * Target element to attach the paginator dropdown overlay, valid values are \"body\" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\"mydiv\" for a div element having #mydiv as variable name).\n   * @group Props\n   */\n  paginatorDropdownAppendTo;\n  /**\n   * Template of the current page report element. Available placeholders are {currentPage},{totalPages},{rows},{first},{last} and {totalRecords}\n   * @group Props\n   */\n  currentPageReportTemplate = '{currentPage} of {totalPages}';\n  /**\n   * Whether to display current page report.\n   * @group Props\n   */\n  showCurrentPageReport;\n  /**\n   * Whether to display a dropdown to navigate to any page.\n   * @group Props\n   */\n  showJumpToPageDropdown;\n  /**\n   * When enabled, icons are displayed on paginator to go first and last page.\n   * @group Props\n   */\n  showFirstLastIcon = true;\n  /**\n   * Whether to show page links.\n   * @group Props\n   */\n  showPageLinks = true;\n  /**\n   * Sort order to use when an unsorted column gets sorted by user interaction.\n   * @group Props\n   */\n  defaultSortOrder = 1;\n  /**\n   * Defines whether sorting works on single column or on multiple columns.\n   * @group Props\n   */\n  sortMode = 'single';\n  /**\n   * When true, resets paginator to first page after sorting.\n   * @group Props\n   */\n  resetPageOnSort = true;\n  /**\n   * Whether to use the default sorting or a custom one using sortFunction.\n   * @group Props\n   */\n  customSort;\n  /**\n   * Specifies the selection mode, valid values are \"single\" and \"multiple\".\n   * @group Props\n   */\n  selectionMode;\n  /**\n   * Selected row with a context menu.\n   * @group Props\n   */\n  contextMenuSelection;\n  /**\n   * Mode of the contet menu selection.\n   * @group Props\n   */\n  contextMenuSelectionMode = 'separate';\n  /**\n   * A property to uniquely identify a record in data.\n   * @group Props\n   */\n  dataKey;\n  /**\n   * Defines whether metaKey is should be considered for the selection. On touch enabled devices, metaKeySelection is turned off automatically.\n   * @group Props\n   */\n  metaKeySelection = false;\n  /**\n   * Algorithm to define if a row is selected, valid values are \"equals\" that compares by reference and \"deepEquals\" that compares all fields.\n   * @group Props\n   */\n  compareSelectionBy = 'deepEquals';\n  /**\n   * Adds hover effect to rows without the need for selectionMode.\n   * @group Props\n   */\n  rowHover;\n  /**\n   * Displays a loader to indicate data load is in progress.\n   * @group Props\n   */\n  loading;\n  /**\n   * The icon to show while indicating data load is in progress.\n   * @group Props\n   */\n  loadingIcon;\n  /**\n   * Whether to show the loading mask when loading property is true.\n   * @group Props\n   */\n  showLoader = true;\n  /**\n   * When specifies, enables horizontal and/or vertical scrolling.\n   * @group Props\n   */\n  scrollable;\n  /**\n   * Height of the scroll viewport in fixed pixels or the \"flex\" keyword for a dynamic size.\n   * @group Props\n   */\n  scrollHeight;\n  /**\n   * Whether the data should be loaded on demand during scroll.\n   * @group Props\n   */\n  virtualScroll;\n  /**\n   * Height of a row to use in calculations of virtual scrolling.\n   * @group Props\n   */\n  virtualScrollItemSize;\n  /**\n   * Whether to use the scroller feature. The properties of scroller component can be used like an object in it.\n   * @group Props\n   */\n  virtualScrollOptions;\n  /**\n   * The delay (in milliseconds) before triggering the virtual scroll. This determines the time gap between the user's scroll action and the actual rendering of the next set of items in the virtual scroll.\n   * @group Props\n   */\n  virtualScrollDelay = 150;\n  /**\n   * Width of the frozen columns container.\n   * @group Props\n   */\n  frozenWidth;\n  /**\n   * An array of objects to represent dynamic columns that are frozen.\n   * @group Props\n   */\n  frozenColumns;\n  /**\n   * When enabled, columns can be resized using drag and drop.\n   * @group Props\n   */\n  resizableColumns;\n  /**\n   * Defines whether the overall table width should change on column resize, valid values are \"fit\" and \"expand\".\n   * @group Props\n   */\n  columnResizeMode = 'fit';\n  /**\n   * When enabled, columns can be reordered using drag and drop.\n   * @group Props\n   */\n  reorderableColumns;\n  /**\n   * Local ng-template varilable of a ContextMenu.\n   * @group Props\n   */\n  contextMenu;\n  /**\n   * Function to optimize the dom operations by delegating to ngForTrackBy, default algorithm checks for object identity.\n   * @group Props\n   */\n  rowTrackBy = (index, item) => item;\n  /**\n   * An array of FilterMetadata objects to provide external filters.\n   * @group Props\n   */\n  filters = {};\n  /**\n   * An array of fields as string to use in global filtering.\n   * @group Props\n   */\n  globalFilterFields;\n  /**\n   * Delay in milliseconds before filtering the data.\n   * @group Props\n   */\n  filterDelay = 300;\n  /**\n   * Mode for filtering valid values are \"lenient\" and \"strict\". Default is lenient.\n   * @group Props\n   */\n  filterMode = 'lenient';\n  /**\n   * Locale to use in filtering. The default locale is the host environment's current locale.\n   * @group Props\n   */\n  filterLocale;\n  /**\n   * Locale to be used in paginator formatting.\n   * @group Props\n   */\n  paginatorLocale;\n  /**\n   * Number of total records, defaults to length of value when not defined.\n   * @group Props\n   */\n  get totalRecords() {\n    return this._totalRecords;\n  }\n  set totalRecords(val) {\n    this._totalRecords = val;\n    this.tableService.onTotalRecordsChange(this._totalRecords);\n  }\n  /**\n   * Name of the field to sort data by default.\n   * @group Props\n   */\n  get sortField() {\n    return this._sortField;\n  }\n  set sortField(val) {\n    this._sortField = val;\n  }\n  /**\n   * Order to sort when default sorting is enabled.\n   * @defaultValue 1\n   * @group Props\n   */\n  get sortOrder() {\n    return this._sortOrder;\n  }\n  set sortOrder(val) {\n    this._sortOrder = val;\n  }\n  /**\n   * An array of SortMeta objects to sort the data by default in multiple sort mode.\n   * @defaultValue null\n   * @group Props\n   */\n  get multiSortMeta() {\n    return this._multiSortMeta;\n  }\n  set multiSortMeta(val) {\n    this._multiSortMeta = val;\n  }\n  /**\n   * Selected row in single mode or an array of values in multiple mode.\n   * @defaultValue null\n   * @group Props\n   */\n  get selection() {\n    return this._selection;\n  }\n  set selection(val) {\n    this._selection = val;\n  }\n  /**\n   * An array of objects to display.\n   * @defaultValue null\n   * @group Props\n   */\n  get value() {\n    return this._value;\n  }\n  set value(val) {\n    this._value = val;\n  }\n  /**\n   * Indicates the height of rows to be scrolled.\n   * @defaultValue 28\n   * @group Props\n   * @deprecated use virtualScrollItemSize property instead.\n   */\n  get virtualRowHeight() {\n    return this._virtualRowHeight;\n  }\n  set virtualRowHeight(val) {\n    this._virtualRowHeight = val;\n    console.warn('The virtualRowHeight property is deprecated, use virtualScrollItemSize property instead.');\n  }\n  /**\n   * A map of keys to control the selection state.\n   * @group Props\n   */\n  get selectionKeys() {\n    return this._selectionKeys;\n  }\n  set selectionKeys(value) {\n    this._selectionKeys = value;\n    this.selectionKeysChange.emit(this._selectionKeys);\n  }\n  /**\n   * Callback to invoke on selected node change.\n   * @param {TreeTableNode} object - Node instance.\n   * @group Emits\n   */\n  selectionChange = new EventEmitter();\n  /**\n   * Callback to invoke on context menu selection change.\n   * @param {TreeTableNode} object - Node instance.\n   * @group Emits\n   */\n  contextMenuSelectionChange = new EventEmitter();\n  /**\n   * Callback to invoke when data is filtered.\n   * @param {TreeTableFilterEvent} event - Custom filter event.\n   * @group Emits\n   */\n  onFilter = new EventEmitter();\n  /**\n   * Callback to invoke when a node is expanded.\n   * @param {TreeTableNodeExpandEvent} event - Node expand event.\n   * @group Emits\n   */\n  onNodeExpand = new EventEmitter();\n  /**\n   * Callback to invoke when a node is collapsed.\n   * @param {TreeTableNodeCollapseEvent} event - Node collapse event.\n   * @group Emits\n   */\n  onNodeCollapse = new EventEmitter();\n  /**\n   * Callback to invoke when pagination occurs.\n   * @param {TreeTablePaginatorState} object - Paginator state.\n   * @group Emits\n   */\n  onPage = new EventEmitter();\n  /**\n   * Callback to invoke when a column gets sorted.\n   * @param {Object} Object - Sort data.\n   * @group Emits\n   */\n  onSort = new EventEmitter();\n  /**\n   * Callback to invoke when paging, sorting or filtering happens in lazy mode.\n   * @param {TreeTableLazyLoadEvent} event - Custom lazy load event.\n   * @group Emits\n   */\n  onLazyLoad = new EventEmitter();\n  /**\n   * An event emitter to invoke on custom sorting, refer to sorting section for details.\n   * @param {TreeTableSortEvent} event - Custom sort event.\n   * @group Emits\n   */\n  sortFunction = new EventEmitter();\n  /**\n   * Callback to invoke when a column is resized.\n   * @param {TreeTableColResizeEvent} event - Custom column resize event.\n   * @group Emits\n   */\n  onColResize = new EventEmitter();\n  /**\n   * Callback to invoke when a column is reordered.\n   * @param {TreeTableColumnReorderEvent} event - Custom column reorder.\n   * @group Emits\n   */\n  onColReorder = new EventEmitter();\n  /**\n   * Callback to invoke when a node is selected.\n   * @param {TreeTableNode} object - Node instance.\n   * @group Emits\n   */\n  onNodeSelect = new EventEmitter();\n  /**\n   * Callback to invoke when a node is unselected.\n   * @param {TreeTableNodeUnSelectEvent} event - Custom node unselect event.\n   * @group Emits\n   */\n  onNodeUnselect = new EventEmitter();\n  /**\n   * Callback to invoke when a node is selected with right click.\n   * @param {TreeTableContextMenuSelectEvent} event - Custom context menu select event.\n   * @group Emits\n   */\n  onContextMenuSelect = new EventEmitter();\n  /**\n   * Callback to invoke when state of header checkbox changes.\n   * @param {TreeTableHeaderCheckboxToggleEvent} event - Custom checkbox toggle event.\n   * @group Emits\n   */\n  onHeaderCheckboxToggle = new EventEmitter();\n  /**\n   * Callback to invoke when a cell switches to edit mode.\n   * @param {TreeTableEditEvent} event - Custom edit event.\n   * @group Emits\n   */\n  onEditInit = new EventEmitter();\n  /**\n   * Callback to invoke when cell edit is completed.\n   * @param {TreeTableEditEvent} event - Custom edit event.\n   * @group Emits\n   */\n  onEditComplete = new EventEmitter();\n  /**\n   * Callback to invoke when cell edit is cancelled with escape key.\n   * @param {TreeTableEditEvent} event - Custom edit event.\n   * @group Emits\n   */\n  onEditCancel = new EventEmitter();\n  /**\n   * Callback to invoke when selectionKeys are changed.\n   * @param {Object} object - updated value of the selectionKeys.\n   * @group Emits\n   */\n  selectionKeysChange = new EventEmitter();\n  containerViewChild;\n  resizeHelperViewChild;\n  reorderIndicatorUpViewChild;\n  reorderIndicatorDownViewChild;\n  tableViewChild;\n  scrollableViewChild;\n  scrollableFrozenViewChild;\n  templates;\n  _value = [];\n  _virtualRowHeight = 28;\n  _selectionKeys;\n  serializedValue;\n  _totalRecords = 0;\n  _multiSortMeta;\n  _sortField;\n  _sortOrder = 1;\n  filteredNodes;\n  filterTimeout;\n  colGroupTemplate;\n  captionTemplate;\n  headerTemplate;\n  bodyTemplate;\n  footerTemplate;\n  summaryTemplate;\n  emptyMessageTemplate;\n  paginatorLeftTemplate;\n  paginatorRightTemplate;\n  paginatorDropdownItemTemplate;\n  frozenHeaderTemplate;\n  frozenBodyTemplate;\n  frozenFooterTemplate;\n  frozenColGroupTemplate;\n  loadingIconTemplate;\n  reorderIndicatorUpIconTemplate;\n  reorderIndicatorDownIconTemplate;\n  sortIconTemplate;\n  checkboxIconTemplate;\n  headerCheckboxIconTemplate;\n  togglerIconTemplate;\n  paginatorFirstPageLinkIconTemplate;\n  paginatorLastPageLinkIconTemplate;\n  paginatorPreviousPageLinkIconTemplate;\n  paginatorNextPageLinkIconTemplate;\n  lastResizerHelperX;\n  reorderIconWidth;\n  reorderIconHeight;\n  draggedColumn;\n  dropPosition;\n  preventSelectionSetterPropagation;\n  _selection;\n  selectedKeys = {};\n  rowTouched;\n  editingCell;\n  editingCellData;\n  editingCellField;\n  editingCellClick;\n  documentEditListener;\n  initialized;\n  toggleRowIndex;\n  ngOnInit() {\n    if (this.lazy && this.lazyLoadOnInit && !this.virtualScroll) {\n      this.onLazyLoad.emit(this.createLazyLoadMetadata());\n    }\n    this.initialized = true;\n  }\n  ngAfterContentInit() {\n    this.templates.forEach(item => {\n      switch (item.getType()) {\n        case 'caption':\n          this.captionTemplate = item.template;\n          break;\n        case 'header':\n          this.headerTemplate = item.template;\n          break;\n        case 'body':\n          this.bodyTemplate = item.template;\n          break;\n        case 'footer':\n          this.footerTemplate = item.template;\n          break;\n        case 'summary':\n          this.summaryTemplate = item.template;\n          break;\n        case 'colgroup':\n          this.colGroupTemplate = item.template;\n          break;\n        case 'emptymessage':\n          this.emptyMessageTemplate = item.template;\n          break;\n        case 'paginatorleft':\n          this.paginatorLeftTemplate = item.template;\n          break;\n        case 'paginatorright':\n          this.paginatorRightTemplate = item.template;\n          break;\n        case 'paginatordropdownitem':\n          this.paginatorDropdownItemTemplate = item.template;\n          break;\n        case 'frozenheader':\n          this.frozenHeaderTemplate = item.template;\n          break;\n        case 'frozenbody':\n          this.frozenBodyTemplate = item.template;\n          break;\n        case 'frozenfooter':\n          this.frozenFooterTemplate = item.template;\n          break;\n        case 'frozencolgroup':\n          this.frozenColGroupTemplate = item.template;\n          break;\n        case 'loadingicon':\n          this.loadingIconTemplate = item.template;\n          break;\n        case 'reorderindicatorupicon':\n          this.reorderIndicatorUpIconTemplate = item.template;\n          break;\n        case 'reorderindicatordownicon':\n          this.reorderIndicatorDownIconTemplate = item.template;\n          break;\n        case 'sorticon':\n          this.sortIconTemplate = item.template;\n          break;\n        case 'checkboxicon':\n          this.checkboxIconTemplate = item.template;\n          break;\n        case 'headercheckboxicon':\n          this.headerCheckboxIconTemplate = item.template;\n          break;\n        case 'togglericon':\n          this.togglerIconTemplate = item.template;\n          break;\n        case 'paginatorfirstpagelinkicon':\n          this.paginatorFirstPageLinkIconTemplate = item.template;\n          break;\n        case 'paginatorlastpagelinkicon':\n          this.paginatorLastPageLinkIconTemplate = item.template;\n          break;\n        case 'paginatorpreviouspagelinkicon':\n          this.paginatorPreviousPageLinkIconTemplate = item.template;\n          break;\n        case 'paginatornextpagelinkicon':\n          this.paginatorNextPageLinkIconTemplate = item.template;\n          break;\n      }\n    });\n  }\n  constructor(document, renderer, el, cd, zone, tableService, filterService, config) {\n    this.document = document;\n    this.renderer = renderer;\n    this.el = el;\n    this.cd = cd;\n    this.zone = zone;\n    this.tableService = tableService;\n    this.filterService = filterService;\n    this.config = config;\n  }\n  ngOnChanges(simpleChange) {\n    if (simpleChange.value) {\n      this._value = simpleChange.value.currentValue;\n      if (!this.lazy) {\n        this.totalRecords = this._value ? this._value.length : 0;\n        if (this.sortMode == 'single' && this.sortField) this.sortSingle();else if (this.sortMode == 'multiple' && this.multiSortMeta) this.sortMultiple();else if (this.hasFilter())\n          //sort already filters\n          this._filter();\n      }\n      this.updateSerializedValue();\n      this.tableService.onUIUpdate(this.value);\n    }\n    if (simpleChange.sortField) {\n      this._sortField = simpleChange.sortField.currentValue;\n      //avoid triggering lazy load prior to lazy initialization at onInit\n      if (!this.lazy || this.initialized) {\n        if (this.sortMode === 'single') {\n          this.sortSingle();\n        }\n      }\n    }\n    if (simpleChange.sortOrder) {\n      this._sortOrder = simpleChange.sortOrder.currentValue;\n      //avoid triggering lazy load prior to lazy initialization at onInit\n      if (!this.lazy || this.initialized) {\n        if (this.sortMode === 'single') {\n          this.sortSingle();\n        }\n      }\n    }\n    if (simpleChange.multiSortMeta) {\n      this._multiSortMeta = simpleChange.multiSortMeta.currentValue;\n      if (this.sortMode === 'multiple') {\n        this.sortMultiple();\n      }\n    }\n    if (simpleChange.selection) {\n      this._selection = simpleChange.selection.currentValue;\n      if (!this.preventSelectionSetterPropagation) {\n        this.updateselectedKeys();\n        this.tableService.onSelectionChange();\n      }\n      this.preventSelectionSetterPropagation = false;\n    }\n  }\n  updateSerializedValue() {\n    this.serializedValue = [];\n    if (this.paginator) this.serializePageNodes();else this.serializeNodes(null, this.filteredNodes || this.value, 0, true);\n  }\n  serializeNodes(parent, nodes, level, visible) {\n    if (nodes && nodes.length) {\n      for (let node of nodes) {\n        node.parent = parent;\n        const rowNode = {\n          node: node,\n          parent: parent,\n          level: level,\n          visible: visible && (parent ? parent.expanded : true)\n        };\n        this.serializedValue.push(rowNode);\n        if (rowNode.visible && node.expanded) {\n          this.serializeNodes(node, node.children, level + 1, rowNode.visible);\n        }\n      }\n    }\n  }\n  serializePageNodes() {\n    let data = this.filteredNodes || this.value;\n    this.serializedValue = [];\n    if (data && data.length) {\n      const first = this.lazy ? 0 : this.first;\n      for (let i = first; i < first + this.rows; i++) {\n        let node = data[i];\n        if (node) {\n          this.serializedValue.push({\n            node: node,\n            parent: null,\n            level: 0,\n            visible: true\n          });\n          this.serializeNodes(node, node.children, 1, true);\n        }\n      }\n    }\n  }\n  updateselectedKeys() {\n    if (this.dataKey && this._selection) {\n      this.selectedKeys = {};\n      if (Array.isArray(this._selection)) {\n        for (let node of this._selection) {\n          this.selectedKeys[String(ObjectUtils.resolveFieldData(node.data, this.dataKey))] = 1;\n        }\n      } else {\n        this.selectedKeys[String(ObjectUtils.resolveFieldData(this._selection.data, this.dataKey))] = 1;\n      }\n    }\n  }\n  onPageChange(event) {\n    this.first = event.first;\n    this.rows = event.rows;\n    if (this.lazy) this.onLazyLoad.emit(this.createLazyLoadMetadata());else this.serializePageNodes();\n    this.onPage.emit({\n      first: this.first,\n      rows: this.rows\n    });\n    this.tableService.onUIUpdate(this.value);\n    if (this.scrollable) {\n      this.resetScrollTop();\n    }\n  }\n  sort(event) {\n    let originalEvent = event.originalEvent;\n    if (this.sortMode === 'single') {\n      this._sortOrder = this.sortField === event.field ? this.sortOrder * -1 : this.defaultSortOrder;\n      this._sortField = event.field;\n      this.sortSingle();\n      if (this.resetPageOnSort && this.scrollable) {\n        this.resetScrollTop();\n      }\n    }\n    if (this.sortMode === 'multiple') {\n      let metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n      let sortMeta = this.getSortMeta(event.field);\n      if (sortMeta) {\n        if (!metaKey) {\n          this._multiSortMeta = [{\n            field: event.field,\n            order: sortMeta.order * -1\n          }];\n          if (this.resetPageOnSort && this.scrollable) {\n            this.resetScrollTop();\n          }\n        } else {\n          sortMeta.order = sortMeta.order * -1;\n        }\n      } else {\n        if (!metaKey || !this.multiSortMeta) {\n          this._multiSortMeta = [];\n          if (this.resetPageOnSort && this.scrollable) {\n            this.resetScrollTop();\n          }\n        }\n        this.multiSortMeta.push({\n          field: event.field,\n          order: this.defaultSortOrder\n        });\n      }\n      this.sortMultiple();\n    }\n  }\n  sortSingle() {\n    if (this.sortField && this.sortOrder) {\n      if (this.lazy) {\n        this.onLazyLoad.emit(this.createLazyLoadMetadata());\n      } else if (this.value) {\n        this.sortNodes(this.value);\n        if (this.hasFilter()) {\n          this._filter();\n        }\n      }\n      let sortMeta = {\n        field: this.sortField,\n        order: this.sortOrder\n      };\n      this.onSort.emit(sortMeta);\n      this.tableService.onSort(sortMeta);\n      this.updateSerializedValue();\n    }\n  }\n  sortNodes(nodes) {\n    if (!nodes || nodes.length === 0) {\n      return;\n    }\n    if (this.customSort) {\n      this.sortFunction.emit({\n        data: nodes,\n        mode: this.sortMode,\n        field: this.sortField,\n        order: this.sortOrder\n      });\n    } else {\n      nodes.sort((node1, node2) => {\n        let value1 = ObjectUtils.resolveFieldData(node1.data, this.sortField);\n        let value2 = ObjectUtils.resolveFieldData(node2.data, this.sortField);\n        let result = null;\n        if (value1 == null && value2 != null) result = -1;else if (value1 != null && value2 == null) result = 1;else if (value1 == null && value2 == null) result = 0;else if (typeof value1 === 'string' && typeof value2 === 'string') result = value1.localeCompare(value2, undefined, {\n          numeric: true\n        });else result = value1 < value2 ? -1 : value1 > value2 ? 1 : 0;\n        return this.sortOrder * result;\n      });\n    }\n    for (let node of nodes) {\n      this.sortNodes(node.children);\n    }\n  }\n  sortMultiple() {\n    if (this.multiSortMeta) {\n      if (this.lazy) {\n        this.onLazyLoad.emit(this.createLazyLoadMetadata());\n      } else if (this.value) {\n        this.sortMultipleNodes(this.value);\n        if (this.hasFilter()) {\n          this._filter();\n        }\n      }\n      this.onSort.emit({\n        multisortmeta: this.multiSortMeta\n      });\n      this.updateSerializedValue();\n      this.tableService.onSort(this.multiSortMeta);\n    }\n  }\n  sortMultipleNodes(nodes) {\n    if (!nodes || nodes.length === 0) {\n      return;\n    }\n    if (this.customSort) {\n      this.sortFunction.emit({\n        data: this.value,\n        mode: this.sortMode,\n        multiSortMeta: this.multiSortMeta\n      });\n    } else {\n      nodes.sort((node1, node2) => {\n        return this.multisortField(node1, node2, this.multiSortMeta, 0);\n      });\n    }\n    for (let node of nodes) {\n      this.sortMultipleNodes(node.children);\n    }\n  }\n  multisortField(node1, node2, multiSortMeta, index) {\n    if (ObjectUtils.isEmpty(this.multiSortMeta) || ObjectUtils.isEmpty(multiSortMeta[index])) {\n      return 0;\n    }\n    let value1 = ObjectUtils.resolveFieldData(node1.data, multiSortMeta[index].field);\n    let value2 = ObjectUtils.resolveFieldData(node2.data, multiSortMeta[index].field);\n    let result = null;\n    if (value1 == null && value2 != null) result = -1;else if (value1 != null && value2 == null) result = 1;else if (value1 == null && value2 == null) result = 0;\n    if (typeof value1 == 'string' || value1 instanceof String) {\n      if (value1.localeCompare && value1 != value2) {\n        return multiSortMeta[index].order * value1.localeCompare(value2, undefined, {\n          numeric: true\n        });\n      }\n    } else {\n      result = value1 < value2 ? -1 : 1;\n    }\n    if (value1 == value2) {\n      return multiSortMeta.length - 1 > index ? this.multisortField(node1, node2, multiSortMeta, index + 1) : 0;\n    }\n    return multiSortMeta[index].order * result;\n  }\n  getSortMeta(field) {\n    if (this.multiSortMeta && this.multiSortMeta.length) {\n      for (let i = 0; i < this.multiSortMeta.length; i++) {\n        if (this.multiSortMeta[i].field === field) {\n          return this.multiSortMeta[i];\n        }\n      }\n    }\n    return null;\n  }\n  isSorted(field) {\n    if (this.sortMode === 'single') {\n      return this.sortField && this.sortField === field;\n    } else if (this.sortMode === 'multiple') {\n      let sorted = false;\n      if (this.multiSortMeta) {\n        for (let i = 0; i < this.multiSortMeta.length; i++) {\n          if (this.multiSortMeta[i].field == field) {\n            sorted = true;\n            break;\n          }\n        }\n      }\n      return sorted;\n    }\n  }\n  createLazyLoadMetadata() {\n    return {\n      first: this.first,\n      rows: this.rows,\n      sortField: this.sortField,\n      sortOrder: this.sortOrder,\n      filters: this.filters,\n      globalFilter: this.filters && this.filters['global'] ? this.filters['global'].value : null,\n      multiSortMeta: this.multiSortMeta,\n      forceUpdate: () => this.cd.detectChanges()\n    };\n  }\n  onLazyItemLoad(event) {\n    this.onLazyLoad.emit({\n      ...this.createLazyLoadMetadata(),\n      ...event,\n      rows: event.last - event.first\n    });\n  }\n  /**\n   * Resets scroll to top.\n   * @group Method\n   */\n  resetScrollTop() {\n    if (this.virtualScroll) this.scrollToVirtualIndex(0);else this.scrollTo({\n      top: 0\n    });\n  }\n  /**\n   * Scrolls to given index when using virtual scroll.\n   * @param {number} index - index of the element.\n   * @group Method\n   */\n  scrollToVirtualIndex(index) {\n    if (this.scrollableViewChild) {\n      this.scrollableViewChild.scrollToVirtualIndex(index);\n    }\n    if (this.scrollableFrozenViewChild) {\n      this.scrollableViewChild.scrollToVirtualIndex(index);\n    }\n  }\n  /**\n   * Scrolls to given index.\n   * @param {ScrollToOptions} options - Scroll options.\n   * @group Method\n   */\n  scrollTo(options) {\n    if (this.scrollableViewChild) {\n      this.scrollableViewChild.scrollTo(options);\n    }\n    if (this.scrollableFrozenViewChild) {\n      this.scrollableViewChild.scrollTo(options);\n    }\n  }\n  isEmpty() {\n    let data = this.filteredNodes || this.value;\n    return data == null || data.length == 0;\n  }\n  getBlockableElement() {\n    return this.el.nativeElement.children[0];\n  }\n  onColumnResizeBegin(event) {\n    let containerLeft = DomHandler.getOffset(this.containerViewChild?.nativeElement).left;\n    this.lastResizerHelperX = event.pageX - containerLeft + this.containerViewChild?.nativeElement.scrollLeft;\n    event.preventDefault();\n  }\n  onColumnResize(event) {\n    let containerLeft = DomHandler.getOffset(this.containerViewChild?.nativeElement).left;\n    DomHandler.addClass(this.containerViewChild?.nativeElement, 'p-unselectable-text');\n    this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild?.nativeElement.offsetHeight + 'px';\n    this.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';\n    this.resizeHelperViewChild.nativeElement.style.left = event.pageX - containerLeft + this.containerViewChild?.nativeElement.scrollLeft + 'px';\n    this.resizeHelperViewChild.nativeElement.style.display = 'block';\n  }\n  onColumnResizeEnd(event, column) {\n    let delta = this.resizeHelperViewChild.nativeElement.offsetLeft - this.lastResizerHelperX;\n    let columnWidth = column.offsetWidth;\n    let newColumnWidth = columnWidth + delta;\n    let minWidth = column.style.minWidth || 15;\n    if (columnWidth + delta > parseInt(minWidth)) {\n      if (this.columnResizeMode === 'fit') {\n        let nextColumn = column.nextElementSibling;\n        while (!nextColumn.offsetParent) {\n          nextColumn = nextColumn.nextElementSibling;\n        }\n        if (nextColumn) {\n          let nextColumnWidth = nextColumn.offsetWidth - delta;\n          let nextColumnMinWidth = nextColumn.style.minWidth || 15;\n          if (newColumnWidth > 15 && nextColumnWidth > parseInt(nextColumnMinWidth)) {\n            if (this.scrollable) {\n              let scrollableView = this.findParentScrollableView(column);\n              let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body table') || DomHandler.findSingle(scrollableView, '.p-scroller-viewport table');\n              let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-header-table');\n              let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-footer-table');\n              let resizeColumnIndex = DomHandler.index(column);\n              this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n              this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n              this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n            } else {\n              column.style.width = newColumnWidth + 'px';\n              if (nextColumn) {\n                nextColumn.style.width = nextColumnWidth + 'px';\n              }\n            }\n          }\n        }\n      } else if (this.columnResizeMode === 'expand') {\n        if (this.scrollable) {\n          let scrollableView = this.findParentScrollableView(column);\n          let scrollableBody = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body') || DomHandler.findSingle(scrollableView, '.p-scroller-viewport');\n          let scrollableHeader = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-header');\n          let scrollableFooter = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-footer');\n          let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body table') || DomHandler.findSingle(scrollableView, '.p-scroller-viewport table');\n          let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-header-table');\n          let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-footer-table');\n          let resizeColumnIndex = DomHandler.index(column);\n          const scrollableBodyTableWidth = column ? scrollableBodyTable.offsetWidth + delta : newColumnWidth;\n          const scrollableHeaderTableWidth = column ? scrollableHeaderTable.offsetWidth + delta : newColumnWidth;\n          const isContainerInViewport = this.containerViewChild?.nativeElement.offsetWidth >= scrollableBodyTableWidth;\n          let setWidth = (container, table, width, isContainerInViewport) => {\n            if (container && table) {\n              container.style.width = isContainerInViewport ? width + DomHandler.calculateScrollbarWidth(scrollableBody) + 'px' : 'auto';\n              table.style.width = width + 'px';\n            }\n          };\n          setWidth(scrollableBody, scrollableBodyTable, scrollableBodyTableWidth, isContainerInViewport);\n          setWidth(scrollableHeader, scrollableHeaderTable, scrollableHeaderTableWidth, isContainerInViewport);\n          setWidth(scrollableFooter, scrollableFooterTable, scrollableHeaderTableWidth, isContainerInViewport);\n          this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);\n          this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);\n          this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);\n        } else {\n          this.tableViewChild.nativeElement.style.width = this.tableViewChild?.nativeElement.offsetWidth + delta + 'px';\n          column.style.width = newColumnWidth + 'px';\n          let containerWidth = this.tableViewChild?.nativeElement.style.width;\n          this.containerViewChild.nativeElement.style.width = containerWidth + 'px';\n        }\n      }\n      this.onColResize.emit({\n        element: column,\n        delta: delta\n      });\n    }\n    this.resizeHelperViewChild.nativeElement.style.display = 'none';\n    DomHandler.removeClass(this.containerViewChild?.nativeElement, 'p-unselectable-text');\n  }\n  findParentScrollableView(column) {\n    if (column) {\n      let parent = column.parentElement;\n      while (parent && !DomHandler.hasClass(parent, 'p-treetable-scrollable-view')) {\n        parent = parent.parentElement;\n      }\n      return parent;\n    } else {\n      return null;\n    }\n  }\n  resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {\n    if (table) {\n      let colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\n      if (colGroup) {\n        let col = colGroup.children[resizeColumnIndex];\n        let nextCol = col.nextElementSibling;\n        col.style.width = newColumnWidth + 'px';\n        if (nextCol && nextColumnWidth) {\n          nextCol.style.width = nextColumnWidth + 'px';\n        }\n      } else {\n        throw 'Scrollable tables require a colgroup to support resizable columns';\n      }\n    }\n  }\n  onColumnDragStart(event, columnElement) {\n    this.reorderIconWidth = DomHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild?.nativeElement);\n    this.reorderIconHeight = DomHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild?.nativeElement);\n    this.draggedColumn = columnElement;\n    event.dataTransfer.setData('text', 'b'); // For firefox\n  }\n  onColumnDragEnter(event, dropHeader) {\n    if (this.reorderableColumns && this.draggedColumn && dropHeader) {\n      event.preventDefault();\n      let containerOffset = DomHandler.getOffset(this.containerViewChild?.nativeElement);\n      let dropHeaderOffset = DomHandler.getOffset(dropHeader);\n      if (this.draggedColumn != dropHeader) {\n        let targetLeft = dropHeaderOffset.left - containerOffset.left;\n        let targetTop = containerOffset.top - dropHeaderOffset.top;\n        let columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\n        this.reorderIndicatorUpViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + 'px';\n        this.reorderIndicatorDownViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\n        if (event.pageX > columnCenter) {\n          this.reorderIndicatorUpViewChild.nativeElement.style.left = targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2) + 'px';\n          this.reorderIndicatorDownViewChild.nativeElement.style.left = targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2) + 'px';\n          this.dropPosition = 1;\n        } else {\n          this.reorderIndicatorUpViewChild.nativeElement.style.left = targetLeft - Math.ceil(this.reorderIconWidth / 2) + 'px';\n          this.reorderIndicatorDownViewChild.nativeElement.style.left = targetLeft - Math.ceil(this.reorderIconWidth / 2) + 'px';\n          this.dropPosition = -1;\n        }\n        this.reorderIndicatorUpViewChild.nativeElement.style.display = 'block';\n        this.reorderIndicatorDownViewChild.nativeElement.style.display = 'block';\n      } else {\n        event.dataTransfer.dropEffect = 'none';\n      }\n    }\n  }\n  onColumnDragLeave(event) {\n    if (this.reorderableColumns && this.draggedColumn) {\n      event.preventDefault();\n      this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n      this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n    }\n  }\n  onColumnDrop(event, dropColumn) {\n    event.preventDefault();\n    if (this.draggedColumn) {\n      let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'ttreorderablecolumn');\n      let dropIndex = DomHandler.indexWithinGroup(dropColumn, 'ttreorderablecolumn');\n      let allowDrop = dragIndex != dropIndex;\n      if (allowDrop && (dropIndex - dragIndex == 1 && this.dropPosition === -1 || dragIndex - dropIndex == 1 && this.dropPosition === 1)) {\n        allowDrop = false;\n      }\n      if (allowDrop && dropIndex < dragIndex && this.dropPosition === 1) {\n        dropIndex = dropIndex + 1;\n      }\n      if (allowDrop && dropIndex > dragIndex && this.dropPosition === -1) {\n        dropIndex = dropIndex - 1;\n      }\n      if (allowDrop) {\n        ObjectUtils.reorderArray(this.columns, dragIndex, dropIndex);\n        this.onColReorder.emit({\n          dragIndex: dragIndex,\n          dropIndex: dropIndex,\n          columns: this.columns\n        });\n      }\n      this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n      this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n      this.draggedColumn.draggable = false;\n      this.draggedColumn = null;\n      this.dropPosition = null;\n    }\n  }\n  handleRowClick(event) {\n    let targetNode = event.originalEvent.target.nodeName;\n    if (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' || DomHandler.hasClass(event.originalEvent.target, 'p-clickable')) {\n      return;\n    }\n    if (this.selectionMode) {\n      this.preventSelectionSetterPropagation = true;\n      let rowNode = event.rowNode;\n      let selected = this.isSelected(rowNode.node);\n      let metaSelection = this.rowTouched ? false : this.metaKeySelection;\n      let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowNode.node.data, this.dataKey)) : null;\n      if (metaSelection) {\n        let keyboardEvent = event.originalEvent;\n        let metaKey = keyboardEvent.metaKey || keyboardEvent.ctrlKey;\n        if (selected && metaKey) {\n          if (this.isSingleSelectionMode()) {\n            this._selection = null;\n            this.selectedKeys = {};\n            this.selectionChange.emit(null);\n          } else {\n            let selectionIndex = this.findIndexInSelection(rowNode.node);\n            this._selection = this.selection.filter((val, i) => i != selectionIndex);\n            this.selectionChange.emit(this.selection);\n            if (dataKeyValue) {\n              delete this.selectedKeys[dataKeyValue];\n            }\n          }\n          this.onNodeUnselect.emit({\n            originalEvent: event.originalEvent,\n            node: rowNode.node,\n            type: 'row'\n          });\n        } else {\n          if (this.isSingleSelectionMode()) {\n            this._selection = rowNode.node;\n            this.selectionChange.emit(rowNode.node);\n            if (dataKeyValue) {\n              this.selectedKeys = {};\n              this.selectedKeys[dataKeyValue] = 1;\n            }\n          } else if (this.isMultipleSelectionMode()) {\n            if (metaKey) {\n              this._selection = this.selection || [];\n            } else {\n              this._selection = [];\n              this.selectedKeys = {};\n            }\n            this._selection = [...this.selection, rowNode.node];\n            this.selectionChange.emit(this.selection);\n            if (dataKeyValue) {\n              this.selectedKeys[dataKeyValue] = 1;\n            }\n          }\n          this.onNodeSelect.emit({\n            originalEvent: event.originalEvent,\n            node: rowNode.node,\n            type: 'row',\n            index: event.rowIndex\n          });\n        }\n      } else {\n        if (this.selectionMode === 'single') {\n          if (selected) {\n            this._selection = null;\n            this.selectedKeys = {};\n            this.selectionChange.emit(this.selection);\n            this.onNodeUnselect.emit({\n              originalEvent: event.originalEvent,\n              node: rowNode.node,\n              type: 'row'\n            });\n          } else {\n            this._selection = rowNode.node;\n            this.selectionChange.emit(this.selection);\n            this.onNodeSelect.emit({\n              originalEvent: event.originalEvent,\n              node: rowNode.node,\n              type: 'row',\n              index: event.rowIndex\n            });\n            if (dataKeyValue) {\n              this.selectedKeys = {};\n              this.selectedKeys[dataKeyValue] = 1;\n            }\n          }\n        } else if (this.selectionMode === 'multiple') {\n          if (selected) {\n            let selectionIndex = this.findIndexInSelection(rowNode.node);\n            this._selection = this.selection.filter((val, i) => i != selectionIndex);\n            this.selectionChange.emit(this.selection);\n            this.onNodeUnselect.emit({\n              originalEvent: event.originalEvent,\n              node: rowNode.node,\n              type: 'row'\n            });\n            if (dataKeyValue) {\n              delete this.selectedKeys[dataKeyValue];\n            }\n          } else {\n            this._selection = this.selection ? [...this.selection, rowNode.node] : [rowNode.node];\n            this.selectionChange.emit(this.selection);\n            this.onNodeSelect.emit({\n              originalEvent: event.originalEvent,\n              node: rowNode.node,\n              type: 'row',\n              index: event.rowIndex\n            });\n            if (dataKeyValue) {\n              this.selectedKeys[dataKeyValue] = 1;\n            }\n          }\n        }\n      }\n      this.tableService.onSelectionChange();\n    }\n    this.rowTouched = false;\n  }\n  handleRowTouchEnd(event) {\n    this.rowTouched = true;\n  }\n  handleRowRightClick(event) {\n    if (this.contextMenu) {\n      const node = event.rowNode.node;\n      if (this.contextMenuSelectionMode === 'separate') {\n        this.contextMenuSelection = node;\n        this.contextMenuSelectionChange.emit(node);\n        this.onContextMenuSelect.emit({\n          originalEvent: event.originalEvent,\n          node: node\n        });\n        this.contextMenu.show(event.originalEvent);\n        this.tableService.onContextMenu(node);\n      } else if (this.contextMenuSelectionMode === 'joint') {\n        this.preventSelectionSetterPropagation = true;\n        let selected = this.isSelected(node);\n        let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n        if (!selected) {\n          if (this.isSingleSelectionMode()) {\n            this.selection = node;\n            this.selectionChange.emit(node);\n          } else if (this.isMultipleSelectionMode()) {\n            this.selection = [node];\n            this.selectionChange.emit(this.selection);\n          }\n          if (dataKeyValue) {\n            this.selectedKeys[dataKeyValue] = 1;\n          }\n        }\n        this.contextMenu.show(event.originalEvent);\n        this.onContextMenuSelect.emit({\n          originalEvent: event.originalEvent,\n          node: node\n        });\n      }\n    }\n  }\n  toggleNodeWithCheckbox(event) {\n    // legacy selection support, will be removed in v18\n    this.selection = this.selection || [];\n    this.preventSelectionSetterPropagation = true;\n    let node = event.rowNode.node;\n    let selected = this.isSelected(node);\n    if (selected) {\n      this.propagateSelectionDown(node, false);\n      if (event.rowNode.parent) {\n        this.propagateSelectionUp(node.parent, false);\n      }\n      this.selectionChange.emit(this.selection);\n      this.onNodeUnselect.emit({\n        originalEvent: event,\n        node: node\n      });\n    } else {\n      this.propagateSelectionDown(node, true);\n      if (event.rowNode.parent) {\n        this.propagateSelectionUp(node.parent, true);\n      }\n      this.selectionChange.emit(this.selection);\n      this.onNodeSelect.emit({\n        originalEvent: event,\n        node: node\n      });\n    }\n    this.tableService.onSelectionChange();\n  }\n  toggleNodesWithCheckbox(event, check) {\n    // legacy selection support, will be removed in v18\n    let data = this.filteredNodes || this.value;\n    this._selection = check && data ? data.slice() : [];\n    this.toggleAll(check);\n    if (!check) {\n      this._selection = [];\n      this.selectedKeys = {};\n    }\n    this.preventSelectionSetterPropagation = true;\n    this.selectionChange.emit(this._selection);\n    this.tableService.onSelectionChange();\n    this.onHeaderCheckboxToggle.emit({\n      originalEvent: event,\n      checked: check\n    });\n  }\n  toggleAll(checked) {\n    let data = this.filteredNodes || this.value;\n    if (!this.selectionKeys) {\n      if (data && data.length) {\n        for (let node of data) {\n          this.propagateSelectionDown(node, checked);\n        }\n      }\n    } else {\n      // legacy selection support, will be removed in v18\n      if (data && data.length) {\n        for (let node of data) {\n          this.propagateDown(node, checked);\n        }\n        this.selectionKeysChange.emit(this.selectionKeys);\n      }\n    }\n  }\n  propagateSelectionUp(node, select) {\n    // legacy selection support, will be removed in v18\n    if (node.children && node.children.length) {\n      let selectedChildCount = 0;\n      let childPartialSelected = false;\n      let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n      for (let child of node.children) {\n        if (this.isSelected(child)) selectedChildCount++;else if (child.partialSelected) childPartialSelected = true;\n      }\n      if (select && selectedChildCount == node.children.length) {\n        this._selection = [...(this.selection || []), node];\n        node.partialSelected = false;\n        if (dataKeyValue) {\n          this.selectedKeys[dataKeyValue] = 1;\n        }\n      } else {\n        if (!select) {\n          let index = this.findIndexInSelection(node);\n          if (index >= 0) {\n            this._selection = this.selection.filter((val, i) => i != index);\n            if (dataKeyValue) {\n              delete this.selectedKeys[dataKeyValue];\n            }\n          }\n        }\n        if (childPartialSelected || selectedChildCount > 0 && selectedChildCount != node.children.length) node.partialSelected = true;else node.partialSelected = false;\n      }\n    }\n    let parent = node.parent;\n    node.checked = select;\n    if (parent) {\n      this.propagateSelectionUp(parent, select);\n    }\n  }\n  propagateSelectionDown(node, select) {\n    // legacy selection support, will be removed in v18\n    let index = this.findIndexInSelection(node);\n    let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n    if (select && index == -1) {\n      this._selection = [...(this.selection || []), node];\n      if (dataKeyValue) {\n        this.selectedKeys[dataKeyValue] = 1;\n      }\n    } else if (!select && index > -1) {\n      this._selection = this.selection.filter((val, i) => i != index);\n      if (dataKeyValue) {\n        delete this.selectedKeys[dataKeyValue];\n      }\n    }\n    node.partialSelected = false;\n    node.checked = select;\n    if (node.children && node.children.length) {\n      for (let child of node.children) {\n        this.propagateSelectionDown(child, select);\n      }\n    }\n  }\n  isSelected(node) {\n    // legacy selection support, will be removed in v18\n    if (node && this.selection) {\n      if (this.dataKey) {\n        if (node.hasOwnProperty('checked')) {\n          return node['checked'];\n        } else {\n          return this.selectedKeys[ObjectUtils.resolveFieldData(node.data, this.dataKey)] !== undefined;\n        }\n      } else {\n        if (Array.isArray(this.selection)) return this.findIndexInSelection(node) > -1;else return this.equals(node, this.selection);\n      }\n    }\n    return false;\n  }\n  isNodeSelected(node) {\n    return this.selectionMode && this.selectionKeys ? this.selectionKeys[this.nodeKey(node)]?.checked === true : false;\n  }\n  isNodePartialSelected(node) {\n    return this.selectionMode && this.selectionKeys ? this.selectionKeys[this.nodeKey(node)]?.partialChecked === true : false;\n  }\n  nodeKey(node) {\n    return ObjectUtils.resolveFieldData(node, this.dataKey) || ObjectUtils.resolveFieldData(node?.data, this.dataKey);\n  }\n  toggleCheckbox(event) {\n    let {\n      rowNode,\n      check,\n      originalEvent\n    } = event;\n    let node = rowNode.node;\n    if (this.selectionKeys) {\n      this.propagateDown(node, check);\n      if (node.parent) {\n        this.propagateUp(node.parent, check);\n      }\n      this.selectionKeysChange.emit(this.selectionKeys);\n    } else {\n      this.toggleNodeWithCheckbox({\n        originalEvent,\n        rowNode\n      });\n    }\n    this.tableService.onSelectionChange();\n  }\n  propagateDown(node, check) {\n    if (check) {\n      this.selectionKeys[this.nodeKey(node)] = {\n        checked: true,\n        partialChecked: false\n      };\n    } else {\n      delete this.selectionKeys[this.nodeKey(node)];\n    }\n    if (node.children && node.children.length) {\n      for (let child of node.children) {\n        this.propagateDown(child, check);\n      }\n    }\n  }\n  propagateUp(node, check) {\n    let checkedChildCount = 0;\n    let childPartialSelected = false;\n    for (let child of node.children) {\n      if (this.selectionKeys[this.nodeKey(child)] && this.selectionKeys[this.nodeKey(child)].checked) checkedChildCount++;else if (this.selectionKeys[this.nodeKey(child)] && this.selectionKeys[this.nodeKey(child)].partialChecked) childPartialSelected = true;\n    }\n    if (check && checkedChildCount === node.children.length) {\n      this.selectionKeys[this.nodeKey(node)] = {\n        checked: true,\n        partialChecked: false\n      };\n    } else {\n      if (!check) {\n        delete this.selectionKeys[this.nodeKey(node)];\n      }\n      if (childPartialSelected || checkedChildCount > 0 && checkedChildCount !== node.children.length) this.selectionKeys[this.nodeKey(node)] = {\n        checked: false,\n        partialChecked: true\n      };else this.selectionKeys[this.nodeKey(node)] = {\n        checked: false,\n        partialChecked: false\n      };\n    }\n    let parent = node.parent;\n    if (parent) {\n      this.propagateUp(parent, check);\n    }\n  }\n  findIndexInSelection(node) {\n    let index = -1;\n    if (this.selection && this.selection.length) {\n      for (let i = 0; i < this.selection.length; i++) {\n        if (this.equals(node, this.selection[i])) {\n          index = i;\n          break;\n        }\n      }\n    }\n    return index;\n  }\n  isSingleSelectionMode() {\n    return this.selectionMode === 'single';\n  }\n  isMultipleSelectionMode() {\n    return this.selectionMode === 'multiple';\n  }\n  equals(node1, node2) {\n    return this.compareSelectionBy === 'equals' ? ObjectUtils.equals(node1, node2) : ObjectUtils.equals(node1.data, node2.data, this.dataKey);\n  }\n  filter(value, field, matchMode) {\n    if (this.filterTimeout) {\n      clearTimeout(this.filterTimeout);\n    }\n    if (!this.isFilterBlank(value)) {\n      this.filters[field] = {\n        value: value,\n        matchMode: matchMode\n      };\n    } else if (this.filters[field]) {\n      delete this.filters[field];\n    }\n    this.filterTimeout = setTimeout(() => {\n      this._filter();\n      this.filterTimeout = null;\n    }, this.filterDelay);\n  }\n  filterGlobal(value, matchMode) {\n    this.filter(value, 'global', matchMode);\n  }\n  isFilterBlank(filter) {\n    if (filter !== null && filter !== undefined) {\n      if (typeof filter === 'string' && filter.trim().length == 0 || Array.isArray(filter) && filter.length == 0) return true;else return false;\n    }\n    return true;\n  }\n  _filter() {\n    if (this.lazy) {\n      this.onLazyLoad.emit(this.createLazyLoadMetadata());\n    } else {\n      if (!this.value) {\n        return;\n      }\n      if (!this.hasFilter()) {\n        this.filteredNodes = null;\n        if (this.paginator) {\n          this.totalRecords = this.value ? this.value.length : 0;\n        }\n      } else {\n        let globalFilterFieldsArray;\n        if (this.filters['global']) {\n          if (!this.columns && !this.globalFilterFields) throw new Error('Global filtering requires dynamic columns or globalFilterFields to be defined.');else globalFilterFieldsArray = this.globalFilterFields || this.columns;\n        }\n        this.filteredNodes = [];\n        const isStrictMode = this.filterMode === 'strict';\n        let isValueChanged = false;\n        for (let node of this.value) {\n          let copyNode = {\n            ...node\n          };\n          let localMatch = true;\n          let globalMatch = false;\n          let paramsWithoutNode;\n          for (let prop in this.filters) {\n            if (this.filters.hasOwnProperty(prop) && prop !== 'global') {\n              let filterMeta = this.filters[prop];\n              let filterField = prop;\n              let filterValue = filterMeta.value;\n              let filterMatchMode = filterMeta.matchMode || 'startsWith';\n              let filterConstraint = this.filterService.filters[filterMatchMode];\n              paramsWithoutNode = {\n                filterField,\n                filterValue,\n                filterConstraint,\n                isStrictMode\n              };\n              if (isStrictMode && !(this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode)) || !isStrictMode && !(this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode))) {\n                localMatch = false;\n              }\n              if (!localMatch) {\n                break;\n              }\n            }\n          }\n          if (this.filters['global'] && !globalMatch && globalFilterFieldsArray) {\n            let copyNodeForGlobal = {\n              ...copyNode\n            };\n            let filterField = undefined;\n            let filterValue = this.filters['global'].value;\n            let filterConstraint = this.filterService.filters[this.filters['global'].matchMode];\n            paramsWithoutNode = {\n              filterField,\n              filterValue,\n              filterConstraint,\n              isStrictMode,\n              globalFilterFieldsArray\n            };\n            if (isStrictMode && (this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode) || this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode)) || !isStrictMode && (this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode) || this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode))) {\n              globalMatch = true;\n              copyNode = copyNodeForGlobal;\n            }\n          }\n          let matches = localMatch;\n          if (this.filters['global']) {\n            matches = localMatch && globalMatch;\n          }\n          if (matches) {\n            this.filteredNodes.push(copyNode);\n          }\n          isValueChanged = isValueChanged || !localMatch || globalMatch || localMatch && this.filteredNodes.length > 0 || !globalMatch && this.filteredNodes.length === 0;\n        }\n        if (!isValueChanged) {\n          this.filteredNodes = null;\n        }\n        if (this.paginator) {\n          this.totalRecords = this.filteredNodes ? this.filteredNodes.length : this.value ? this.value.length : 0;\n        }\n      }\n      this.cd.markForCheck();\n    }\n    this.first = 0;\n    const filteredValue = this.filteredNodes || this.value;\n    this.onFilter.emit({\n      filters: this.filters,\n      filteredValue: filteredValue\n    });\n    this.tableService.onUIUpdate(filteredValue);\n    this.updateSerializedValue();\n    if (this.scrollable) {\n      this.resetScrollTop();\n    }\n  }\n  findFilteredNodes(node, paramsWithoutNode) {\n    if (node) {\n      let matched = false;\n      if (node.children) {\n        let childNodes = [...node.children];\n        node.children = [];\n        for (let childNode of childNodes) {\n          let copyChildNode = {\n            ...childNode\n          };\n          if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n            matched = true;\n            node.children.push(copyChildNode);\n          }\n        }\n      }\n      if (matched) {\n        return true;\n      }\n    }\n  }\n  isFilterMatched(node, filterOptions) {\n    let {\n      filterField,\n      filterValue,\n      filterConstraint,\n      isStrictMode,\n      globalFilterFieldsArray\n    } = filterOptions;\n    let matched = false;\n    const isMatched = field => filterConstraint(ObjectUtils.resolveFieldData(node.data, field), filterValue, this.filterLocale);\n    matched = globalFilterFieldsArray?.length ? globalFilterFieldsArray.some(globalFilterField => isMatched(globalFilterField.field || globalFilterField)) : isMatched(filterField);\n    if (!matched || isStrictMode && !this.isNodeLeaf(node)) {\n      matched = this.findFilteredNodes(node, {\n        filterField,\n        filterValue,\n        filterConstraint,\n        isStrictMode,\n        globalFilterFieldsArray\n      }) || matched;\n    }\n    return matched;\n  }\n  isNodeLeaf(node) {\n    return node.leaf === false ? false : !(node.children && node.children.length);\n  }\n  hasFilter() {\n    let empty = true;\n    for (let prop in this.filters) {\n      if (this.filters.hasOwnProperty(prop)) {\n        empty = false;\n        break;\n      }\n    }\n    return !empty;\n  }\n  /**\n   * Clears the sort and paginator state.\n   * @group Method\n   */\n  reset() {\n    this._sortField = null;\n    this._sortOrder = 1;\n    this._multiSortMeta = null;\n    this.tableService.onSort(null);\n    this.filteredNodes = null;\n    this.filters = {};\n    this.first = 0;\n    if (this.lazy) {\n      this.onLazyLoad.emit(this.createLazyLoadMetadata());\n    } else {\n      this.totalRecords = this._value ? this._value.length : 0;\n    }\n  }\n  updateEditingCell(cell, data, field) {\n    this.editingCell = cell;\n    this.editingCellData = data;\n    this.editingCellField = field;\n    this.bindDocumentEditListener();\n  }\n  isEditingCellValid() {\n    return this.editingCell && DomHandler.find(this.editingCell, '.ng-invalid.ng-dirty').length === 0;\n  }\n  bindDocumentEditListener() {\n    if (!this.documentEditListener) {\n      this.documentEditListener = this.renderer.listen(this.document, 'click', event => {\n        if (this.editingCell && !this.editingCellClick && this.isEditingCellValid()) {\n          DomHandler.removeClass(this.editingCell, 'p-cell-editing');\n          this.editingCell = null;\n          this.onEditComplete.emit({\n            field: this.editingCellField,\n            data: this.editingCellData\n          });\n          this.editingCellField = null;\n          this.editingCellData = null;\n          this.unbindDocumentEditListener();\n        }\n        this.editingCellClick = false;\n      });\n    }\n  }\n  unbindDocumentEditListener() {\n    if (this.documentEditListener) {\n      this.documentEditListener();\n      this.documentEditListener = null;\n    }\n  }\n  ngOnDestroy() {\n    this.unbindDocumentEditListener();\n    this.editingCell = null;\n    this.editingCellField = null;\n    this.editingCellData = null;\n    this.initialized = null;\n  }\n  static ɵfac = function TreeTable_Factory(t) {\n    return new (t || TreeTable)(i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(TreeTableService), i0.ɵɵdirectiveInject(i1.FilterService), i0.ɵɵdirectiveInject(i1.PrimeNGConfig));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TreeTable,\n    selectors: [[\"p-treeTable\"]],\n    contentQueries: function TreeTable_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    viewQuery: function TreeTable_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(_c2, 5);\n        i0.ɵɵviewQuery(_c3, 5);\n        i0.ɵɵviewQuery(_c4, 5);\n        i0.ɵɵviewQuery(_c5, 5);\n        i0.ɵɵviewQuery(_c6, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.resizeHelperViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.reorderIndicatorUpViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.reorderIndicatorDownViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollableViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollableFrozenViewChild = _t.first);\n      }\n    },\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      columns: \"columns\",\n      style: \"style\",\n      styleClass: \"styleClass\",\n      tableStyle: \"tableStyle\",\n      tableStyleClass: \"tableStyleClass\",\n      autoLayout: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"autoLayout\", \"autoLayout\", booleanAttribute],\n      lazy: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"lazy\", \"lazy\", booleanAttribute],\n      lazyLoadOnInit: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"lazyLoadOnInit\", \"lazyLoadOnInit\", booleanAttribute],\n      paginator: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"paginator\", \"paginator\", booleanAttribute],\n      rows: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"rows\", \"rows\", numberAttribute],\n      first: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"first\", \"first\", numberAttribute],\n      pageLinks: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"pageLinks\", \"pageLinks\", numberAttribute],\n      rowsPerPageOptions: \"rowsPerPageOptions\",\n      alwaysShowPaginator: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"alwaysShowPaginator\", \"alwaysShowPaginator\", booleanAttribute],\n      paginatorPosition: \"paginatorPosition\",\n      paginatorStyleClass: \"paginatorStyleClass\",\n      paginatorDropdownAppendTo: \"paginatorDropdownAppendTo\",\n      currentPageReportTemplate: \"currentPageReportTemplate\",\n      showCurrentPageReport: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"showCurrentPageReport\", \"showCurrentPageReport\", booleanAttribute],\n      showJumpToPageDropdown: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"showJumpToPageDropdown\", \"showJumpToPageDropdown\", booleanAttribute],\n      showFirstLastIcon: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"showFirstLastIcon\", \"showFirstLastIcon\", booleanAttribute],\n      showPageLinks: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"showPageLinks\", \"showPageLinks\", booleanAttribute],\n      defaultSortOrder: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"defaultSortOrder\", \"defaultSortOrder\", numberAttribute],\n      sortMode: \"sortMode\",\n      resetPageOnSort: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"resetPageOnSort\", \"resetPageOnSort\", booleanAttribute],\n      customSort: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"customSort\", \"customSort\", booleanAttribute],\n      selectionMode: \"selectionMode\",\n      contextMenuSelection: \"contextMenuSelection\",\n      contextMenuSelectionMode: \"contextMenuSelectionMode\",\n      dataKey: \"dataKey\",\n      metaKeySelection: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"metaKeySelection\", \"metaKeySelection\", booleanAttribute],\n      compareSelectionBy: \"compareSelectionBy\",\n      rowHover: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"rowHover\", \"rowHover\", booleanAttribute],\n      loading: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"loading\", \"loading\", booleanAttribute],\n      loadingIcon: \"loadingIcon\",\n      showLoader: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"showLoader\", \"showLoader\", booleanAttribute],\n      scrollable: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"scrollable\", \"scrollable\", booleanAttribute],\n      scrollHeight: \"scrollHeight\",\n      virtualScroll: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"virtualScroll\", \"virtualScroll\", booleanAttribute],\n      virtualScrollItemSize: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"virtualScrollItemSize\", \"virtualScrollItemSize\", numberAttribute],\n      virtualScrollOptions: \"virtualScrollOptions\",\n      virtualScrollDelay: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"virtualScrollDelay\", \"virtualScrollDelay\", numberAttribute],\n      frozenWidth: \"frozenWidth\",\n      frozenColumns: \"frozenColumns\",\n      resizableColumns: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"resizableColumns\", \"resizableColumns\", booleanAttribute],\n      columnResizeMode: \"columnResizeMode\",\n      reorderableColumns: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"reorderableColumns\", \"reorderableColumns\", booleanAttribute],\n      contextMenu: \"contextMenu\",\n      rowTrackBy: \"rowTrackBy\",\n      filters: \"filters\",\n      globalFilterFields: \"globalFilterFields\",\n      filterDelay: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"filterDelay\", \"filterDelay\", numberAttribute],\n      filterMode: \"filterMode\",\n      filterLocale: \"filterLocale\",\n      paginatorLocale: \"paginatorLocale\",\n      totalRecords: \"totalRecords\",\n      sortField: \"sortField\",\n      sortOrder: \"sortOrder\",\n      multiSortMeta: \"multiSortMeta\",\n      selection: \"selection\",\n      value: \"value\",\n      virtualRowHeight: \"virtualRowHeight\",\n      selectionKeys: \"selectionKeys\"\n    },\n    outputs: {\n      selectionChange: \"selectionChange\",\n      contextMenuSelectionChange: \"contextMenuSelectionChange\",\n      onFilter: \"onFilter\",\n      onNodeExpand: \"onNodeExpand\",\n      onNodeCollapse: \"onNodeCollapse\",\n      onPage: \"onPage\",\n      onSort: \"onSort\",\n      onLazyLoad: \"onLazyLoad\",\n      sortFunction: \"sortFunction\",\n      onColResize: \"onColResize\",\n      onColReorder: \"onColReorder\",\n      onNodeSelect: \"onNodeSelect\",\n      onNodeUnselect: \"onNodeUnselect\",\n      onContextMenuSelect: \"onContextMenuSelect\",\n      onHeaderCheckboxToggle: \"onHeaderCheckboxToggle\",\n      onEditInit: \"onEditInit\",\n      onEditComplete: \"onEditComplete\",\n      onEditCancel: \"onEditCancel\",\n      selectionKeysChange: \"selectionKeysChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([TreeTableService]), i0.ɵɵInputTransformsFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 12,\n    vars: 20,\n    consts: [[\"container\", \"\"], [\"table\", \"\"], [\"scrollableView\", \"\"], [\"scrollableFrozenView\", \"\"], [\"resizeHelper\", \"\"], [\"reorderIndicatorUp\", \"\"], [\"reorderIndicatorDown\", \"\"], [\"data-scrollselectors\", \".p-treetable-scrollable-body\", 3, \"ngStyle\", \"ngClass\"], [\"class\", \"p-treetable-loading\", 4, \"ngIf\"], [\"class\", \"p-treetable-header\", 4, \"ngIf\"], [\"styleClass\", \"p-paginator-top\", 3, \"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"alwaysShow\", \"rowsPerPageOptions\", \"templateLeft\", \"templateRight\", \"dropdownAppendTo\", \"currentPageReportTemplate\", \"showFirstLastIcon\", \"dropdownItemTemplate\", \"showCurrentPageReport\", \"showJumpToPageDropdown\", \"showPageLinks\", \"styleClass\", \"locale\", \"onPageChange\", 4, \"ngIf\"], [\"class\", \"p-treetable-wrapper\", 4, \"ngIf\"], [\"class\", \"p-treetable-scrollable-wrapper\", 4, \"ngIf\"], [\"styleClass\", \"p-paginator-bottom\", 3, \"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"alwaysShow\", \"rowsPerPageOptions\", \"templateLeft\", \"templateRight\", \"dropdownAppendTo\", \"currentPageReportTemplate\", \"showFirstLastIcon\", \"dropdownItemTemplate\", \"showCurrentPageReport\", \"showJumpToPageDropdown\", \"showPageLinks\", \"styleClass\", \"locale\", \"onPageChange\", 4, \"ngIf\"], [\"class\", \"p-treetable-footer\", 4, \"ngIf\"], [\"class\", \"p-column-resizer-helper\", 3, \"ngStyle\", 4, \"ngIf\"], [\"class\", \"p-treetable-reorder-indicator-up\", 3, \"ngStyle\", 4, \"ngIf\"], [\"class\", \"p-treetable-reorder-indicator-down\", 3, \"ngStyle\", 4, \"ngIf\"], [1, \"p-treetable-loading\"], [1, \"p-treetable-loading-overlay\", \"p-component-overlay\"], [3, \"class\", 4, \"ngIf\"], [4, \"ngIf\"], [3, \"spin\", \"styleClass\", 4, \"ngIf\"], [\"class\", \"p-treetable-loading-icon\", 4, \"ngIf\"], [3, \"spin\", \"styleClass\"], [1, \"p-treetable-loading-icon\"], [4, \"ngTemplateOutlet\"], [1, \"p-treetable-header\"], [\"styleClass\", \"p-paginator-top\", 3, \"onPageChange\", \"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"alwaysShow\", \"rowsPerPageOptions\", \"templateLeft\", \"templateRight\", \"dropdownAppendTo\", \"currentPageReportTemplate\", \"showFirstLastIcon\", \"dropdownItemTemplate\", \"showCurrentPageReport\", \"showJumpToPageDropdown\", \"showPageLinks\", \"styleClass\", \"locale\"], [\"pTemplate\", \"firstpagelinkicon\"], [\"pTemplate\", \"previouspagelinkicon\"], [\"pTemplate\", \"lastpagelinkicon\"], [\"pTemplate\", \"nextpagelinkicon\"], [1, \"p-treetable-wrapper\"], [\"role\", \"table\", 3, \"ngClass\", \"ngStyle\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"role\", \"rowgroup\", 1, \"p-treetable-thead\"], [\"role\", \"rowgroup\", 1, \"p-treetable-tbody\", 3, \"pTreeTableBody\", \"pTreeTableBodyTemplate\"], [\"role\", \"rowgroup\", 1, \"p-treetable-tfoot\"], [1, \"p-treetable-scrollable-wrapper\"], [\"class\", \"p-treetable-scrollable-view p-treetable-frozen-view\", 3, \"ttScrollableView\", \"frozen\", \"ngStyle\", \"scrollHeight\", 4, \"ngIf\"], [1, \"p-treetable-scrollable-view\", 3, \"ttScrollableView\", \"frozen\", \"scrollHeight\", \"ngStyle\"], [1, \"p-treetable-scrollable-view\", \"p-treetable-frozen-view\", 3, \"ttScrollableView\", \"frozen\", \"ngStyle\", \"scrollHeight\"], [\"styleClass\", \"p-paginator-bottom\", 3, \"onPageChange\", \"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"alwaysShow\", \"rowsPerPageOptions\", \"templateLeft\", \"templateRight\", \"dropdownAppendTo\", \"currentPageReportTemplate\", \"showFirstLastIcon\", \"dropdownItemTemplate\", \"showCurrentPageReport\", \"showJumpToPageDropdown\", \"showPageLinks\", \"styleClass\", \"locale\"], [1, \"p-treetable-footer\"], [1, \"p-column-resizer-helper\", 3, \"ngStyle\"], [1, \"p-treetable-reorder-indicator-up\", 3, \"ngStyle\"], [1, \"p-treetable-reorder-indicator-down\", 3, \"ngStyle\"]],\n    template: function TreeTable_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 7, 0);\n        i0.ɵɵtemplate(2, TreeTable_div_2_Template, 4, 2, \"div\", 8)(3, TreeTable_div_3_Template, 2, 1, \"div\", 9)(4, TreeTable_p_paginator_4_Template, 5, 21, \"p-paginator\", 10)(5, TreeTable_div_5_Template, 9, 16, \"div\", 11)(6, TreeTable_div_6_Template, 4, 8, \"div\", 12)(7, TreeTable_p_paginator_7_Template, 5, 21, \"p-paginator\", 13)(8, TreeTable_div_8_Template, 2, 1, \"div\", 14)(9, TreeTable_div_9_Template, 2, 2, \"div\", 15)(10, TreeTable_span_10_Template, 4, 4, \"span\", 16)(11, TreeTable_span_11_Template, 4, 4, \"span\", 17);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.styleClass);\n        i0.ɵɵproperty(\"ngStyle\", ctx.style)(\"ngClass\", i0.ɵɵpureFunction5(14, _c7, ctx.rowHover || ctx.selectionMode === \"single\" || ctx.selectionMode === \"multiple\", ctx.autoLayout, ctx.resizableColumns, ctx.resizableColumns && ctx.columnResizeMode === \"fit\", ctx.scrollable && ctx.scrollHeight === \"flex\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading && ctx.showLoader);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.captionTemplate);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.paginator && (ctx.paginatorPosition === \"top\" || ctx.paginatorPosition == \"both\"));\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", !ctx.scrollable);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.scrollable);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.paginator && (ctx.paginatorPosition === \"bottom\" || ctx.paginatorPosition == \"both\"));\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.summaryTemplate);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.resizableColumns);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.reorderableColumns);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.reorderableColumns);\n      }\n    },\n    dependencies: () => [i2.NgClass, i2.NgIf, i2.NgTemplateOutlet, i2.NgStyle, i3.Paginator, i1.PrimeTemplate, SpinnerIcon, ArrowDownIcon, ArrowUpIcon, TTScrollableView, TTBody],\n    styles: [\"@layer primeng{.p-treetable{position:relative}.p-treetable table{border-collapse:collapse;width:100%;table-layout:fixed}.p-treetable .p-sortable-column{cursor:pointer;-webkit-user-select:none;user-select:none}.p-treetable .p-sortable-column .p-column-title,.p-treetable .p-sortable-column .p-sortable-column-icon,.p-treetable .p-sortable-column .p-sortable-column-badge{vertical-align:middle}.p-treetable .p-sortable-column .p-sortable-column-badge{display:inline-flex;align-items:center;justify-content:center}.p-treetable-auto-layout>.p-treetable-wrapper{overflow-x:auto}.p-treetable-auto-layout>.p-treetable-wrapper>table{table-layout:auto}.p-treetable-hoverable-rows .p-treetable-tbody>tr{cursor:pointer}.p-treetable-toggler{cursor:pointer;-webkit-user-select:none;user-select:none;display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;overflow:hidden;position:relative}p-treetabletoggler+p-treetablecheckbox .p-checkbox{vertical-align:middle}p-treetabletoggler+p-treetablecheckbox+span{vertical-align:middle}.p-treetable-scrollable-wrapper{position:relative}.p-treetable-scrollable-header,.p-treetable-scrollable-footer{overflow:hidden;flex-shrink:0}.p-treetable-scrollable-body{overflow:auto;position:relative}.p-treetable-scrollable-body>table>.p-treetable-tbody>tr:first-child>td{border-top:0 none}.p-treetable-virtual-table{position:absolute}.p-treetable-frozen-view .p-treetable-scrollable-body{overflow:hidden}.p-treetable-frozen-view>.p-treetable-scrollable-body>table>.p-treetable-tbody>tr>td:last-child{border-right:0 none}.p-treetable-unfrozen-view{position:absolute;top:0}.p-treetable-flex-scrollable,.p-treetable-flex-scrollable .p-treetable-scrollable-wrapper,.p-treetable-flex-scrollable .p-treetable-scrollable-view{display:flex;flex-direction:column;flex:1;height:100%}.p-treetable-flex-scrollable .p-treetable-virtual-scrollable-body{flex:1}.p-treetable-resizable>.p-treetable-wrapper{overflow-x:auto}.p-treetable-resizable .p-treetable-thead>tr>th,.p-treetable-resizable .p-treetable-tfoot>tr>td,.p-treetable-resizable .p-treetable-tbody>tr>td{overflow:hidden}.p-treetable-resizable .p-resizable-column{background-clip:padding-box;position:relative}.p-treetable-resizable-fit .p-resizable-column:last-child .p-column-resizer{display:none}.p-treetable .p-column-resizer{display:block;position:absolute!important;top:0;right:0;margin:0;width:.5rem;height:100%;padding:0;cursor:col-resize;border:1px solid transparent}.p-treetable .p-column-resizer-helper{width:1px;position:absolute;z-index:10;display:none}.p-treetable .p-row-editor-init,.p-treetable .p-row-editor-save,.p-treetable .p-row-editor-cancel,.p-treetable .p-row-toggler{display:inline-flex;align-items:center;justify-content:center;overflow:hidden;position:relative}.p-treetable-reorder-indicator-up,.p-treetable-reorder-indicator-down{position:absolute;display:none}[ttReorderableColumn]{cursor:move}.p-treetable .p-treetable-loading-overlay{position:absolute;display:flex;align-items:center;justify-content:center;z-index:2}.p-treetable .p-scroller-loading{transform:none!important;min-height:0;position:sticky;top:0;left:0}}\\n\"],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeTable, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTable',\n      template: `\n        <div\n            #container\n            [ngStyle]=\"style\"\n            [class]=\"styleClass\"\n            data-scrollselectors=\".p-treetable-scrollable-body\"\n            [ngClass]=\"{\n                'p-treetable p-component': true,\n                'p-treetable-hoverable-rows': rowHover || selectionMode === 'single' || selectionMode === 'multiple',\n                'p-treetable-auto-layout': autoLayout,\n                'p-treetable-resizable': resizableColumns,\n                'p-treetable-resizable-fit': resizableColumns && columnResizeMode === 'fit',\n                'p-treetable-flex-scrollable': scrollable && scrollHeight === 'flex'\n            }\"\n        >\n            <div class=\"p-treetable-loading\" *ngIf=\"loading && showLoader\">\n                <div class=\"p-treetable-loading-overlay p-component-overlay\">\n                    <i *ngIf=\"loadingIcon\" [class]=\"'p-treetable-loading-icon pi-spin ' + loadingIcon\"></i>\n                    <ng-container *ngIf=\"!loadingIcon\">\n                        <SpinnerIcon *ngIf=\"!loadingIconTemplate\" [spin]=\"true\" [styleClass]=\"'p-treetable-loading-icon'\" />\n                        <span *ngIf=\"loadingIconTemplate\" class=\"p-treetable-loading-icon\">\n                            <ng-template *ngTemplateOutlet=\"loadingIconTemplate\"></ng-template>\n                        </span>\n                    </ng-container>\n                </div>\n            </div>\n            <div *ngIf=\"captionTemplate\" class=\"p-treetable-header\">\n                <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n            </div>\n            <p-paginator\n                [rows]=\"rows\"\n                [first]=\"first\"\n                [totalRecords]=\"totalRecords\"\n                [pageLinkSize]=\"pageLinks\"\n                styleClass=\"p-paginator-top\"\n                [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\"\n                [rowsPerPageOptions]=\"rowsPerPageOptions\"\n                *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition == 'both')\"\n                [templateLeft]=\"paginatorLeftTemplate\"\n                [templateRight]=\"paginatorRightTemplate\"\n                [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\"\n                [showFirstLastIcon]=\"showFirstLastIcon\"\n                [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\"\n                [showCurrentPageReport]=\"showCurrentPageReport\"\n                [showJumpToPageDropdown]=\"showJumpToPageDropdown\"\n                [showPageLinks]=\"showPageLinks\"\n                [styleClass]=\"paginatorStyleClass\"\n                [locale]=\"paginatorLocale\"\n            >\n                <ng-template pTemplate=\"firstpagelinkicon\" *ngIf=\"paginatorFirstPageLinkIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorFirstPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"previouspagelinkicon\" *ngIf=\"paginatorPreviousPageLinkIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorPreviousPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"lastpagelinkicon\" *ngIf=\"paginatorLastPageLinkIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorLastPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"nextpagelinkicon\" *ngIf=\"paginatorNextPageLinkIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorNextPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n            </p-paginator>\n\n            <div class=\"p-treetable-wrapper\" *ngIf=\"!scrollable\">\n                <table role=\"table\" #table [ngClass]=\"tableStyleClass\" [ngStyle]=\"tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                    <thead role=\"rowgroup\" class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </thead>\n                    <tbody class=\"p-treetable-tbody\" role=\"rowgroup\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"bodyTemplate\"></tbody>\n                    <tfoot class=\"p-treetable-tfoot\" role=\"rowgroup\">\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n\n            <div class=\"p-treetable-scrollable-wrapper\" *ngIf=\"scrollable\">\n                <div\n                    class=\"p-treetable-scrollable-view p-treetable-frozen-view\"\n                    *ngIf=\"frozenColumns || frozenBodyTemplate\"\n                    #scrollableFrozenView\n                    [ttScrollableView]=\"frozenColumns\"\n                    [frozen]=\"true\"\n                    [ngStyle]=\"{ width: frozenWidth }\"\n                    [scrollHeight]=\"scrollHeight\"\n                ></div>\n                <div class=\"p-treetable-scrollable-view\" #scrollableView [ttScrollableView]=\"columns\" [frozen]=\"false\" [scrollHeight]=\"scrollHeight\" [ngStyle]=\"{ left: frozenWidth, width: 'calc(100% - ' + frozenWidth + ')' }\"></div>\n            </div>\n\n            <p-paginator\n                [rows]=\"rows\"\n                [first]=\"first\"\n                [totalRecords]=\"totalRecords\"\n                [pageLinkSize]=\"pageLinks\"\n                styleClass=\"p-paginator-bottom\"\n                [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\"\n                [rowsPerPageOptions]=\"rowsPerPageOptions\"\n                *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition == 'both')\"\n                [templateLeft]=\"paginatorLeftTemplate\"\n                [templateRight]=\"paginatorRightTemplate\"\n                [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\"\n                [showFirstLastIcon]=\"showFirstLastIcon\"\n                [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\"\n                [showCurrentPageReport]=\"showCurrentPageReport\"\n                [showJumpToPageDropdown]=\"showJumpToPageDropdown\"\n                [showPageLinks]=\"showPageLinks\"\n                [styleClass]=\"paginatorStyleClass\"\n                [locale]=\"paginatorLocale\"\n            >\n                <ng-template pTemplate=\"firstpagelinkicon\" *ngIf=\"paginatorFirstPageLinkIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorFirstPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"previouspagelinkicon\" *ngIf=\"paginatorPreviousPageLinkIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorPreviousPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"lastpagelinkicon\" *ngIf=\"paginatorLastPageLinkIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorLastPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"nextpagelinkicon\" *ngIf=\"paginatorNextPageLinkIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorNextPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n            </p-paginator>\n            <div *ngIf=\"summaryTemplate\" class=\"p-treetable-footer\">\n                <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n            </div>\n\n            <div #resizeHelper class=\"p-column-resizer-helper\" [ngStyle]=\"{ display: 'none' }\" *ngIf=\"resizableColumns\"></div>\n            <span #reorderIndicatorUp class=\"p-treetable-reorder-indicator-up\" [ngStyle]=\"{ display: 'none' }\" *ngIf=\"reorderableColumns\">\n                <ArrowDownIcon *ngIf=\"!reorderIndicatorUpIconTemplate\" />\n                <ng-template *ngTemplateOutlet=\"reorderIndicatorUpIconTemplate\"></ng-template>\n            </span>\n            <span #reorderIndicatorDown class=\"p-treetable-reorder-indicator-down\" [ngStyle]=\"{ display: 'none' }\" *ngIf=\"reorderableColumns\">\n                <ArrowUpIcon *ngIf=\"!reorderIndicatorDownIconTemplate\" />\n                <ng-template *ngTemplateOutlet=\"reorderIndicatorDownIconTemplate\"></ng-template>\n            </span>\n        </div>\n    `,\n      providers: [TreeTableService],\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        class: 'p-element'\n      },\n      styles: [\"@layer primeng{.p-treetable{position:relative}.p-treetable table{border-collapse:collapse;width:100%;table-layout:fixed}.p-treetable .p-sortable-column{cursor:pointer;-webkit-user-select:none;user-select:none}.p-treetable .p-sortable-column .p-column-title,.p-treetable .p-sortable-column .p-sortable-column-icon,.p-treetable .p-sortable-column .p-sortable-column-badge{vertical-align:middle}.p-treetable .p-sortable-column .p-sortable-column-badge{display:inline-flex;align-items:center;justify-content:center}.p-treetable-auto-layout>.p-treetable-wrapper{overflow-x:auto}.p-treetable-auto-layout>.p-treetable-wrapper>table{table-layout:auto}.p-treetable-hoverable-rows .p-treetable-tbody>tr{cursor:pointer}.p-treetable-toggler{cursor:pointer;-webkit-user-select:none;user-select:none;display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;overflow:hidden;position:relative}p-treetabletoggler+p-treetablecheckbox .p-checkbox{vertical-align:middle}p-treetabletoggler+p-treetablecheckbox+span{vertical-align:middle}.p-treetable-scrollable-wrapper{position:relative}.p-treetable-scrollable-header,.p-treetable-scrollable-footer{overflow:hidden;flex-shrink:0}.p-treetable-scrollable-body{overflow:auto;position:relative}.p-treetable-scrollable-body>table>.p-treetable-tbody>tr:first-child>td{border-top:0 none}.p-treetable-virtual-table{position:absolute}.p-treetable-frozen-view .p-treetable-scrollable-body{overflow:hidden}.p-treetable-frozen-view>.p-treetable-scrollable-body>table>.p-treetable-tbody>tr>td:last-child{border-right:0 none}.p-treetable-unfrozen-view{position:absolute;top:0}.p-treetable-flex-scrollable,.p-treetable-flex-scrollable .p-treetable-scrollable-wrapper,.p-treetable-flex-scrollable .p-treetable-scrollable-view{display:flex;flex-direction:column;flex:1;height:100%}.p-treetable-flex-scrollable .p-treetable-virtual-scrollable-body{flex:1}.p-treetable-resizable>.p-treetable-wrapper{overflow-x:auto}.p-treetable-resizable .p-treetable-thead>tr>th,.p-treetable-resizable .p-treetable-tfoot>tr>td,.p-treetable-resizable .p-treetable-tbody>tr>td{overflow:hidden}.p-treetable-resizable .p-resizable-column{background-clip:padding-box;position:relative}.p-treetable-resizable-fit .p-resizable-column:last-child .p-column-resizer{display:none}.p-treetable .p-column-resizer{display:block;position:absolute!important;top:0;right:0;margin:0;width:.5rem;height:100%;padding:0;cursor:col-resize;border:1px solid transparent}.p-treetable .p-column-resizer-helper{width:1px;position:absolute;z-index:10;display:none}.p-treetable .p-row-editor-init,.p-treetable .p-row-editor-save,.p-treetable .p-row-editor-cancel,.p-treetable .p-row-toggler{display:inline-flex;align-items:center;justify-content:center;overflow:hidden;position:relative}.p-treetable-reorder-indicator-up,.p-treetable-reorder-indicator-down{position:absolute;display:none}[ttReorderableColumn]{cursor:move}.p-treetable .p-treetable-loading-overlay{position:absolute;display:flex;align-items:center;justify-content:center;z-index:2}.p-treetable .p-scroller-loading{transform:none!important;min-height:0;position:sticky;top:0;left:0}}\\n\"]\n    }]\n  }], () => [{\n    type: Document,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: i0.Renderer2\n  }, {\n    type: i0.ElementRef\n  }, {\n    type: i0.ChangeDetectorRef\n  }, {\n    type: i0.NgZone\n  }, {\n    type: TreeTableService\n  }, {\n    type: i1.FilterService\n  }, {\n    type: i1.PrimeNGConfig\n  }], {\n    columns: [{\n      type: Input\n    }],\n    style: [{\n      type: Input\n    }],\n    styleClass: [{\n      type: Input\n    }],\n    tableStyle: [{\n      type: Input\n    }],\n    tableStyleClass: [{\n      type: Input\n    }],\n    autoLayout: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    lazy: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    lazyLoadOnInit: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    paginator: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    rows: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    first: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    pageLinks: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    rowsPerPageOptions: [{\n      type: Input\n    }],\n    alwaysShowPaginator: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    paginatorPosition: [{\n      type: Input\n    }],\n    paginatorStyleClass: [{\n      type: Input\n    }],\n    paginatorDropdownAppendTo: [{\n      type: Input\n    }],\n    currentPageReportTemplate: [{\n      type: Input\n    }],\n    showCurrentPageReport: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    showJumpToPageDropdown: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    showFirstLastIcon: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    showPageLinks: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    defaultSortOrder: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    sortMode: [{\n      type: Input\n    }],\n    resetPageOnSort: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    customSort: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    selectionMode: [{\n      type: Input\n    }],\n    contextMenuSelection: [{\n      type: Input\n    }],\n    contextMenuSelectionMode: [{\n      type: Input\n    }],\n    dataKey: [{\n      type: Input\n    }],\n    metaKeySelection: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    compareSelectionBy: [{\n      type: Input\n    }],\n    rowHover: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    loading: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    loadingIcon: [{\n      type: Input\n    }],\n    showLoader: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    scrollable: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    scrollHeight: [{\n      type: Input\n    }],\n    virtualScroll: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    virtualScrollItemSize: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    virtualScrollOptions: [{\n      type: Input\n    }],\n    virtualScrollDelay: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    frozenWidth: [{\n      type: Input\n    }],\n    frozenColumns: [{\n      type: Input\n    }],\n    resizableColumns: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    columnResizeMode: [{\n      type: Input\n    }],\n    reorderableColumns: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    contextMenu: [{\n      type: Input\n    }],\n    rowTrackBy: [{\n      type: Input\n    }],\n    filters: [{\n      type: Input\n    }],\n    globalFilterFields: [{\n      type: Input\n    }],\n    filterDelay: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    filterMode: [{\n      type: Input\n    }],\n    filterLocale: [{\n      type: Input\n    }],\n    paginatorLocale: [{\n      type: Input\n    }],\n    totalRecords: [{\n      type: Input\n    }],\n    sortField: [{\n      type: Input\n    }],\n    sortOrder: [{\n      type: Input\n    }],\n    multiSortMeta: [{\n      type: Input\n    }],\n    selection: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    virtualRowHeight: [{\n      type: Input\n    }],\n    selectionKeys: [{\n      type: Input\n    }],\n    selectionChange: [{\n      type: Output\n    }],\n    contextMenuSelectionChange: [{\n      type: Output\n    }],\n    onFilter: [{\n      type: Output\n    }],\n    onNodeExpand: [{\n      type: Output\n    }],\n    onNodeCollapse: [{\n      type: Output\n    }],\n    onPage: [{\n      type: Output\n    }],\n    onSort: [{\n      type: Output\n    }],\n    onLazyLoad: [{\n      type: Output\n    }],\n    sortFunction: [{\n      type: Output\n    }],\n    onColResize: [{\n      type: Output\n    }],\n    onColReorder: [{\n      type: Output\n    }],\n    onNodeSelect: [{\n      type: Output\n    }],\n    onNodeUnselect: [{\n      type: Output\n    }],\n    onContextMenuSelect: [{\n      type: Output\n    }],\n    onHeaderCheckboxToggle: [{\n      type: Output\n    }],\n    onEditInit: [{\n      type: Output\n    }],\n    onEditComplete: [{\n      type: Output\n    }],\n    onEditCancel: [{\n      type: Output\n    }],\n    selectionKeysChange: [{\n      type: Output\n    }],\n    containerViewChild: [{\n      type: ViewChild,\n      args: ['container']\n    }],\n    resizeHelperViewChild: [{\n      type: ViewChild,\n      args: ['resizeHelper']\n    }],\n    reorderIndicatorUpViewChild: [{\n      type: ViewChild,\n      args: ['reorderIndicatorUp']\n    }],\n    reorderIndicatorDownViewChild: [{\n      type: ViewChild,\n      args: ['reorderIndicatorDown']\n    }],\n    tableViewChild: [{\n      type: ViewChild,\n      args: ['table']\n    }],\n    scrollableViewChild: [{\n      type: ViewChild,\n      args: ['scrollableView']\n    }],\n    scrollableFrozenViewChild: [{\n      type: ViewChild,\n      args: ['scrollableFrozenView']\n    }],\n    templates: [{\n      type: ContentChildren,\n      args: [PrimeTemplate]\n    }]\n  });\n})();\nclass TTBody {\n  tt;\n  treeTableService;\n  cd;\n  columns;\n  template;\n  frozen;\n  serializedNodes;\n  scrollerOptions;\n  subscription;\n  constructor(tt, treeTableService, cd) {\n    this.tt = tt;\n    this.treeTableService = treeTableService;\n    this.cd = cd;\n    this.subscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n      if (this.tt.virtualScroll) {\n        this.cd.detectChanges();\n      }\n    });\n  }\n  getScrollerOption(option, options) {\n    if (this.tt.virtualScroll) {\n      options = options || this.scrollerOptions;\n      return options ? options[option] : null;\n    }\n    return null;\n  }\n  getRowIndex(rowIndex) {\n    const getItemOptions = this.getScrollerOption('getItemOptions');\n    return getItemOptions ? getItemOptions(rowIndex).index : rowIndex;\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  static ɵfac = function TTBody_Factory(t) {\n    return new (t || TTBody)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TreeTableService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TTBody,\n    selectors: [[\"\", \"pTreeTableBody\", \"\"]],\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      columns: [i0.ɵɵInputFlags.None, \"pTreeTableBody\", \"columns\"],\n      template: [i0.ɵɵInputFlags.None, \"pTreeTableBodyTemplate\", \"template\"],\n      frozen: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"frozen\", \"frozen\", booleanAttribute],\n      serializedNodes: \"serializedNodes\",\n      scrollerOptions: \"scrollerOptions\"\n    },\n    features: [i0.ɵɵInputTransformsFeature],\n    attrs: _c12,\n    decls: 2,\n    vars: 3,\n    consts: [[\"ngFor\", \"\", 3, \"ngForOf\", \"ngForTrackBy\"], [4, \"ngIf\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function TTBody_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, TTBody_ng_template_0_Template, 1, 1, \"ng-template\", 0)(1, TTBody_ng_container_1_Template, 2, 5, \"ng-container\", 1);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngForOf\", ctx.serializedNodes || ctx.tt.serializedValue)(\"ngForTrackBy\", ctx.tt.rowTrackBy);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.tt.isEmpty());\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, i2.NgTemplateOutlet],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTBody, [{\n    type: Component,\n    args: [{\n      selector: '[pTreeTableBody]',\n      template: `\n        <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForOf]=\"serializedNodes || tt.serializedValue\" [ngForTrackBy]=\"tt.rowTrackBy\">\n            <ng-container *ngIf=\"serializedNode.visible\">\n                <ng-container *ngTemplateOutlet=\"template; context: { $implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns }\"></ng-container>\n            </ng-container>\n        </ng-template>\n        <ng-container *ngIf=\"tt.isEmpty()\">\n            <ng-container *ngTemplateOutlet=\"tt.emptyMessageTemplate; context: { $implicit: columns, frozen: frozen }\"></ng-container>\n        </ng-container>\n    `,\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        class: 'p-element'\n      }\n    }]\n  }], () => [{\n    type: TreeTable\n  }, {\n    type: TreeTableService\n  }, {\n    type: i0.ChangeDetectorRef\n  }], {\n    columns: [{\n      type: Input,\n      args: ['pTreeTableBody']\n    }],\n    template: [{\n      type: Input,\n      args: ['pTreeTableBodyTemplate']\n    }],\n    frozen: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    serializedNodes: [{\n      type: Input\n    }],\n    scrollerOptions: [{\n      type: Input\n    }]\n  });\n})();\nclass TTScrollableView {\n  platformId;\n  renderer;\n  tt;\n  el;\n  zone;\n  columns;\n  frozen;\n  scrollHeaderViewChild;\n  scrollHeaderBoxViewChild;\n  scrollBodyViewChild;\n  scrollTableViewChild;\n  scrollLoadingTableViewChild;\n  scrollFooterViewChild;\n  scrollFooterBoxViewChild;\n  scrollableAlignerViewChild;\n  scroller;\n  headerScrollListener;\n  bodyScrollListener;\n  footerScrollListener;\n  frozenSiblingBody;\n  totalRecordsSubscription;\n  _scrollHeight;\n  preventBodyScrollPropagation;\n  getMergedTableStyles(contentStyle) {\n    return {\n      ...this.tt.tableStyle,\n      ...contentStyle\n    };\n  }\n  get scrollHeight() {\n    return this._scrollHeight;\n  }\n  set scrollHeight(val) {\n    this._scrollHeight = val;\n    if (val != null && (val.includes('%') || val.includes('calc'))) {\n      console.log('Percentage scroll height calculation is removed in favor of the more performant CSS based flex mode, use scrollHeight=\"flex\" instead.');\n    }\n  }\n  constructor(platformId, renderer, tt, el, zone) {\n    this.platformId = platformId;\n    this.renderer = renderer;\n    this.tt = tt;\n    this.el = el;\n    this.zone = zone;\n  }\n  ngAfterViewInit() {\n    if (isPlatformBrowser(this.platformId)) {\n      if (!this.frozen) {\n        if (this.tt.frozenColumns || this.tt.frozenBodyTemplate) {\n          DomHandler.addClass(this.el.nativeElement, 'p-treetable-unfrozen-view');\n        }\n        let frozenView = this.el.nativeElement.previousElementSibling;\n        if (frozenView) {\n          if (this.tt.virtualScroll) this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-scroller-viewport');else this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-treetable-scrollable-body');\n        }\n        let scrollBarWidth = DomHandler.calculateScrollbarWidth();\n        this.scrollHeaderBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n        if (this.scrollFooterBoxViewChild && this.scrollFooterBoxViewChild.nativeElement) {\n          this.scrollFooterBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n        }\n      } else {\n        if (this.scrollableAlignerViewChild && this.scrollableAlignerViewChild.nativeElement) {\n          this.scrollableAlignerViewChild.nativeElement.style.height = DomHandler.calculateScrollbarHeight() + 'px';\n        }\n      }\n      this.bindEvents();\n    }\n  }\n  bindEvents() {\n    if (isPlatformBrowser(this.platformId)) {\n      this.zone.runOutsideAngular(() => {\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n          this.headerScrollListener = this.renderer.listen(this.scrollHeaderBoxViewChild?.nativeElement, 'scroll', this.onHeaderScroll.bind(this));\n        }\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n          this.footerScrollListener = this.renderer.listen(this.scrollFooterViewChild.nativeElement, 'scroll', this.onFooterScroll.bind(this));\n        }\n        if (!this.frozen) {\n          if (this.tt.virtualScroll) {\n            this.bodyScrollListener = this.renderer.listen((this.scroller?.getElementRef()).nativeElement, 'scroll', this.onBodyScroll.bind(this));\n          } else {\n            this.bodyScrollListener = this.renderer.listen(this.scrollBodyViewChild?.nativeElement, 'scroll', this.onBodyScroll.bind(this));\n          }\n        }\n      });\n    }\n  }\n  unbindEvents() {\n    if (isPlatformBrowser(this.platformId)) {\n      if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n        if (this.headerScrollListener) {\n          this.headerScrollListener();\n          this.headerScrollListener = null;\n        }\n      }\n      if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n        if (this.footerScrollListener) {\n          this.footerScrollListener();\n          this.footerScrollListener = null;\n        }\n      }\n      if (this.scrollBodyViewChild && this.scrollBodyViewChild.nativeElement) {\n        if (this.bodyScrollListener) {\n          this.bodyScrollListener();\n          this.bodyScrollListener = null;\n        }\n      }\n      if (this.scroller && this.scroller.getElementRef()) {\n        if (this.bodyScrollListener) {\n          this.bodyScrollListener();\n          this.bodyScrollListener = null;\n        }\n      }\n    }\n  }\n  onHeaderScroll() {\n    const scrollLeft = this.scrollHeaderViewChild?.nativeElement.scrollLeft;\n    this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n    if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n      this.scrollFooterViewChild.nativeElement.scrollLeft = scrollLeft;\n    }\n    this.preventBodyScrollPropagation = true;\n  }\n  onFooterScroll() {\n    const scrollLeft = this.scrollFooterViewChild?.nativeElement.scrollLeft;\n    this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n    if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n      this.scrollHeaderViewChild.nativeElement.scrollLeft = scrollLeft;\n    }\n    this.preventBodyScrollPropagation = true;\n  }\n  onBodyScroll(event) {\n    if (this.preventBodyScrollPropagation) {\n      this.preventBodyScrollPropagation = false;\n      return;\n    }\n    if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n      this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n    }\n    if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n      this.scrollFooterBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n    }\n    if (this.frozenSiblingBody) {\n      this.frozenSiblingBody.scrollTop = event.target.scrollTop;\n    }\n  }\n  scrollToVirtualIndex(index) {\n    if (this.scroller) {\n      this.scroller.scrollToIndex(index);\n    }\n  }\n  scrollTo(options) {\n    if (this.scroller) {\n      this.scroller.scrollTo(options);\n    } else {\n      if (this.scrollBodyViewChild?.nativeElement.scrollTo) {\n        this.scrollBodyViewChild.nativeElement.scrollTo(options);\n      } else {\n        this.scrollBodyViewChild.nativeElement.scrollLeft = options.left;\n        this.scrollBodyViewChild.nativeElement.scrollTop = options.top;\n      }\n    }\n  }\n  ngOnDestroy() {\n    this.unbindEvents();\n    this.frozenSiblingBody = null;\n  }\n  static ɵfac = function TTScrollableView_Factory(t) {\n    return new (t || TTScrollableView)(i0.ɵɵdirectiveInject(PLATFORM_ID), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TTScrollableView,\n    selectors: [[\"\", \"ttScrollableView\", \"\"]],\n    viewQuery: function TTScrollableView_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c15, 5);\n        i0.ɵɵviewQuery(_c16, 5);\n        i0.ɵɵviewQuery(_c17, 5);\n        i0.ɵɵviewQuery(_c18, 5);\n        i0.ɵɵviewQuery(_c19, 5);\n        i0.ɵɵviewQuery(_c20, 5);\n        i0.ɵɵviewQuery(_c21, 5);\n        i0.ɵɵviewQuery(_c22, 5);\n        i0.ɵɵviewQuery(_c23, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollHeaderViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollHeaderBoxViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollBodyViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollTableViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollLoadingTableViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollFooterViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollFooterBoxViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollableAlignerViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scroller = _t.first);\n      }\n    },\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      columns: [i0.ɵɵInputFlags.None, \"ttScrollableView\", \"columns\"],\n      frozen: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"frozen\", \"frozen\", booleanAttribute],\n      scrollHeight: \"scrollHeight\"\n    },\n    features: [i0.ɵɵInputTransformsFeature],\n    attrs: _c24,\n    decls: 13,\n    vars: 13,\n    consts: [[\"scrollHeader\", \"\"], [\"scrollHeaderBox\", \"\"], [\"buildInItems\", \"\"], [\"scroller\", \"\"], [\"scrollBody\", \"\"], [\"scrollTable\", \"\"], [\"scrollableAligner\", \"\"], [\"scrollFooter\", \"\"], [\"scrollFooterBox\", \"\"], [1, \"p-treetable-scrollable-header\"], [1, \"p-treetable-scrollable-header-box\"], [1, \"p-treetable-scrollable-header-table\", 3, \"ngClass\", \"ngStyle\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"role\", \"rowgroup\", 1, \"p-treetable-thead\"], [\"styleClass\", \"p-treetable-scrollable-body\", 3, \"items\", \"style\", \"scrollHeight\", \"itemSize\", \"lazy\", \"options\", \"onLazyLoad\", 4, \"ngIf\"], [4, \"ngIf\"], [\"class\", \"p-treetable-scrollable-footer\", 4, \"ngIf\"], [\"styleClass\", \"p-treetable-scrollable-body\", 3, \"onLazyLoad\", \"items\", \"scrollHeight\", \"itemSize\", \"lazy\", \"options\"], [\"pTemplate\", \"content\"], [\"pTemplate\", \"loader\"], [1, \"p-treetable-scrollable-body\", 3, \"ngStyle\"], [\"role\", \"table\", 3, \"ngClass\", \"ngStyle\"], [\"role\", \"rowgroup\", 1, \"p-treetable-tbody\", 3, \"pTreeTableBody\", \"pTreeTableBodyTemplate\", \"serializedNodes\", \"frozen\"], [3, \"ngStyle\", 4, \"ngIf\"], [3, \"ngStyle\"], [1, \"p-treetable-scrollable-footer\"], [1, \"p-treetable-scrollable-footer-box\"], [1, \"p-treetable-scrollable-footer-table\", 3, \"ngClass\", \"ngStyle\"], [\"role\", \"rowgroup\", 1, \"p-treetable-tfoot\"]],\n    template: function TTScrollableView_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 9, 0)(2, \"div\", 10, 1)(4, \"table\", 11);\n        i0.ɵɵtemplate(5, TTScrollableView_ng_container_5_Template, 1, 0, \"ng-container\", 12);\n        i0.ɵɵelementStart(6, \"thead\", 13);\n        i0.ɵɵtemplate(7, TTScrollableView_ng_container_7_Template, 1, 0, \"ng-container\", 12);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵtemplate(8, TTScrollableView_p_scroller_8_Template, 4, 10, \"p-scroller\", 14)(9, TTScrollableView_ng_container_9_Template, 4, 10, \"ng-container\", 15)(10, TTScrollableView_ng_template_10_Template, 5, 13, \"ng-template\", null, 2, i0.ɵɵtemplateRefExtractor)(12, TTScrollableView_div_12_Template, 8, 10, \"div\", 16);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngClass\", ctx.tt.tableStyleClass)(\"ngStyle\", ctx.tt.tableStyle);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.frozen ? ctx.tt.frozenColGroupTemplate || ctx.tt.colGroupTemplate : ctx.tt.colGroupTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(9, _c8, ctx.columns));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.frozen ? ctx.tt.frozenHeaderTemplate || ctx.tt.headerTemplate : ctx.tt.headerTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(11, _c8, ctx.columns));\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.tt.virtualScroll);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", !ctx.tt.virtualScroll);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.tt.footerTemplate);\n      }\n    },\n    dependencies: [i2.NgClass, i2.NgIf, i2.NgTemplateOutlet, i2.NgStyle, i1.PrimeTemplate, i4.Scroller, TTBody],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTScrollableView, [{\n    type: Component,\n    args: [{\n      selector: '[ttScrollableView]',\n      template: `\n        <div #scrollHeader class=\"p-treetable-scrollable-header\">\n            <div #scrollHeaderBox class=\"p-treetable-scrollable-header-box\">\n                <table class=\"p-treetable-scrollable-header-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate || tt.colGroupTemplate : tt.colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                    <thead role=\"rowgroup\" class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenHeaderTemplate || tt.headerTemplate : tt.headerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </thead>\n                </table>\n            </div>\n        </div>\n\n        <p-scroller\n            *ngIf=\"tt.virtualScroll\"\n            #scroller\n            [items]=\"tt.serializedValue\"\n            styleClass=\"p-treetable-scrollable-body\"\n            [style]=\"{ height: tt.scrollHeight !== 'flex' ? tt.scrollHeight : undefined }\"\n            [scrollHeight]=\"scrollHeight !== 'flex' ? undefined : '100%'\"\n            [itemSize]=\"tt.virtualScrollItemSize || tt._virtualRowHeight\"\n            [lazy]=\"tt.lazy\"\n            (onLazyLoad)=\"tt.onLazyItemLoad($event)\"\n            [options]=\"tt.virtualScrollOptions\"\n        >\n            <ng-template pTemplate=\"content\" let-items let-scrollerOptions=\"options\">\n                <ng-container *ngTemplateOutlet=\"buildInItems; context: { $implicit: items, options: scrollerOptions }\"></ng-container>\n            </ng-template>\n            <ng-container *ngIf=\"loaderTemplate\">\n                <ng-template pTemplate=\"loader\" let-scrollerOptions=\"options\">\n                    <ng-container *ngTemplateOutlet=\"loaderTemplate; context: { options: scrollerOptions }\"></ng-container>\n                </ng-template>\n            </ng-container>\n        </p-scroller>\n        <ng-container *ngIf=\"!tt.virtualScroll\">\n            <div #scrollBody class=\"p-treetable-scrollable-body\" [ngStyle]=\"{ 'max-height': tt.scrollHeight !== 'flex' ? scrollHeight : undefined, 'overflow-y': !frozen && tt.scrollHeight ? 'scroll' : undefined }\">\n                <ng-container *ngTemplateOutlet=\"buildInItems; context: { $implicit: serializedValue, options: {} }\"></ng-container>\n            </div>\n        </ng-container>\n\n        <ng-template #buildInItems let-items let-scrollerOptions=\"options\">\n            <table role=\"table\" #scrollTable [class]=\"tt.tableStyleClass\" [ngClass]=\"scrollerOptions.contentStyleClass\" [ngStyle]=\"getMergedTableStyles(scrollerOptions.contentStyle)\">\n                <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate || tt.colGroupTemplate : tt.colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                <tbody role=\"rowgroup\" class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate || tt.bodyTemplate : tt.bodyTemplate\" [serializedNodes]=\"items\" [frozen]=\"frozen\"></tbody>\n            </table>\n            <div #scrollableAligner [ngStyle]=\"{ 'background-color': 'transparent' }\" *ngIf=\"frozen\"></div>\n        </ng-template>\n\n        <div #scrollFooter *ngIf=\"tt.footerTemplate\" class=\"p-treetable-scrollable-footer\">\n            <div #scrollFooterBox class=\"p-treetable-scrollable-footer-box\">\n                <table class=\"p-treetable-scrollable-footer-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate || tt.colGroupTemplate : tt.colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                    <tfoot role=\"rowgroup\" class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenFooterTemplate || tt.footerTemplate : tt.footerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    `,\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        class: 'p-element'\n      }\n    }]\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: i0.Renderer2\n  }, {\n    type: TreeTable\n  }, {\n    type: i0.ElementRef\n  }, {\n    type: i0.NgZone\n  }], {\n    columns: [{\n      type: Input,\n      args: ['ttScrollableView']\n    }],\n    frozen: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    scrollHeaderViewChild: [{\n      type: ViewChild,\n      args: ['scrollHeader']\n    }],\n    scrollHeaderBoxViewChild: [{\n      type: ViewChild,\n      args: ['scrollHeaderBox']\n    }],\n    scrollBodyViewChild: [{\n      type: ViewChild,\n      args: ['scrollBody']\n    }],\n    scrollTableViewChild: [{\n      type: ViewChild,\n      args: ['scrollTable']\n    }],\n    scrollLoadingTableViewChild: [{\n      type: ViewChild,\n      args: ['loadingTable']\n    }],\n    scrollFooterViewChild: [{\n      type: ViewChild,\n      args: ['scrollFooter']\n    }],\n    scrollFooterBoxViewChild: [{\n      type: ViewChild,\n      args: ['scrollFooterBox']\n    }],\n    scrollableAlignerViewChild: [{\n      type: ViewChild,\n      args: ['scrollableAligner']\n    }],\n    scroller: [{\n      type: ViewChild,\n      args: ['scroller']\n    }],\n    scrollHeight: [{\n      type: Input\n    }]\n  });\n})();\nclass TTSortableColumn {\n  tt;\n  field;\n  ttSortableColumnDisabled;\n  sorted;\n  subscription;\n  get ariaSorted() {\n    if (this.sorted && this.tt.sortOrder < 0) return 'descending';else if (this.sorted && this.tt.sortOrder > 0) return 'ascending';else return 'none';\n  }\n  constructor(tt) {\n    this.tt = tt;\n    if (this.isEnabled()) {\n      this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\n        this.updateSortState();\n      });\n    }\n  }\n  ngOnInit() {\n    if (this.isEnabled()) {\n      this.updateSortState();\n    }\n  }\n  updateSortState() {\n    this.sorted = this.tt.isSorted(this.field);\n  }\n  onClick(event) {\n    if (this.isEnabled()) {\n      this.updateSortState();\n      this.tt.sort({\n        originalEvent: event,\n        field: this.field\n      });\n      DomHandler.clearSelection();\n    }\n  }\n  onEnterKey(event) {\n    this.onClick(event);\n  }\n  isEnabled() {\n    return this.ttSortableColumnDisabled !== true;\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  static ɵfac = function TTSortableColumn_Factory(t) {\n    return new (t || TTSortableColumn)(i0.ɵɵdirectiveInject(TreeTable));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TTSortableColumn,\n    selectors: [[\"\", \"ttSortableColumn\", \"\"]],\n    hostAttrs: [1, \"p-element\"],\n    hostVars: 7,\n    hostBindings: function TTSortableColumn_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function TTSortableColumn_click_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        })(\"keydown.enter\", function TTSortableColumn_keydown_enter_HostBindingHandler($event) {\n          return ctx.onEnterKey($event);\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"tabindex\", ctx.isEnabled() ? \"0\" : null)(\"role\", \"columnheader\")(\"aria-sort\", ctx.ariaSorted);\n        i0.ɵɵclassProp(\"p-sortable-column\", ctx.isEnabled())(\"p-highlight\", ctx.sorted);\n      }\n    },\n    inputs: {\n      field: [i0.ɵɵInputFlags.None, \"ttSortableColumn\", \"field\"],\n      ttSortableColumnDisabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"ttSortableColumnDisabled\", \"ttSortableColumnDisabled\", booleanAttribute]\n    },\n    features: [i0.ɵɵInputTransformsFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTSortableColumn, [{\n    type: Directive,\n    args: [{\n      selector: '[ttSortableColumn]',\n      host: {\n        class: 'p-element',\n        '[class.p-sortable-column]': 'isEnabled()',\n        '[class.p-highlight]': 'sorted',\n        '[attr.tabindex]': 'isEnabled() ? \"0\" : null',\n        '[attr.role]': '\"columnheader\"',\n        '[attr.aria-sort]': 'ariaSorted'\n      }\n    }]\n  }], () => [{\n    type: TreeTable\n  }], {\n    field: [{\n      type: Input,\n      args: ['ttSortableColumn']\n    }],\n    ttSortableColumnDisabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    onEnterKey: [{\n      type: HostListener,\n      args: ['keydown.enter', ['$event']]\n    }]\n  });\n})();\nclass TTSortIcon {\n  tt;\n  cd;\n  field;\n  ariaLabelDesc;\n  ariaLabelAsc;\n  subscription;\n  sortOrder;\n  constructor(tt, cd) {\n    this.tt = tt;\n    this.cd = cd;\n    this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\n      this.updateSortState();\n      this.cd.markForCheck();\n    });\n  }\n  ngOnInit() {\n    this.updateSortState();\n  }\n  onClick(event) {\n    event.preventDefault();\n  }\n  updateSortState() {\n    if (this.tt.sortMode === 'single') {\n      this.sortOrder = this.tt.isSorted(this.field) ? this.tt.sortOrder : 0;\n    } else if (this.tt.sortMode === 'multiple') {\n      let sortMeta = this.tt.getSortMeta(this.field);\n      this.sortOrder = sortMeta ? sortMeta.order : 0;\n    }\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  static ɵfac = function TTSortIcon_Factory(t) {\n    return new (t || TTSortIcon)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TTSortIcon,\n    selectors: [[\"p-treeTableSortIcon\"]],\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      field: \"field\",\n      ariaLabelDesc: \"ariaLabelDesc\",\n      ariaLabelAsc: \"ariaLabelAsc\"\n    },\n    decls: 2,\n    vars: 2,\n    consts: [[4, \"ngIf\"], [\"class\", \"p-sortable-column-icon\", 4, \"ngIf\"], [3, \"styleClass\", 4, \"ngIf\"], [3, \"styleClass\"], [1, \"p-sortable-column-icon\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function TTSortIcon_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, TTSortIcon_ng_container_0_Template, 4, 3, \"ng-container\", 0)(1, TTSortIcon_span_1_Template, 2, 4, \"span\", 1);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !ctx.tt.sortIconTemplate);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.tt.sortIconTemplate);\n      }\n    },\n    dependencies: () => [i2.NgIf, i2.NgTemplateOutlet, SortAltIcon, SortAmountUpAltIcon, SortAmountDownIcon],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTSortIcon, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTableSortIcon',\n      template: ` <ng-container *ngIf=\"!tt.sortIconTemplate\">\n            <SortAltIcon [styleClass]=\"'p-sortable-column-icon'\" *ngIf=\"sortOrder === 0\" />\n            <SortAmountUpAltIcon [styleClass]=\"'p-sortable-column-icon'\" *ngIf=\"sortOrder === 1\" />\n            <SortAmountDownIcon [styleClass]=\"'p-sortable-column-icon'\" *ngIf=\"sortOrder === -1\" />\n        </ng-container>\n        <span *ngIf=\"tt.sortIconTemplate\" class=\"p-sortable-column-icon\">\n            <ng-template *ngTemplateOutlet=\"tt.sortIconTemplate; context: { $implicit: sortOrder }\"></ng-template>\n        </span>`,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        class: 'p-element'\n      }\n    }]\n  }], () => [{\n    type: TreeTable\n  }, {\n    type: i0.ChangeDetectorRef\n  }], {\n    field: [{\n      type: Input\n    }],\n    ariaLabelDesc: [{\n      type: Input\n    }],\n    ariaLabelAsc: [{\n      type: Input\n    }]\n  });\n})();\nclass TTResizableColumn {\n  document;\n  platformId;\n  renderer;\n  tt;\n  el;\n  zone;\n  ttResizableColumnDisabled;\n  resizer;\n  resizerMouseDownListener;\n  documentMouseMoveListener;\n  documentMouseUpListener;\n  constructor(document, platformId, renderer, tt, el, zone) {\n    this.document = document;\n    this.platformId = platformId;\n    this.renderer = renderer;\n    this.tt = tt;\n    this.el = el;\n    this.zone = zone;\n  }\n  ngAfterViewInit() {\n    if (isPlatformBrowser(this.platformId)) {\n      if (this.isEnabled()) {\n        DomHandler.addClass(this.el.nativeElement, 'p-resizable-column');\n        this.resizer = this.renderer.createElement('span');\n        this.renderer.addClass(this.resizer, 'p-column-resizer');\n        this.renderer.appendChild(this.el.nativeElement, this.resizer);\n        this.zone.runOutsideAngular(() => {\n          this.resizerMouseDownListener = this.renderer.listen(this.resizer, 'mousedown', this.onMouseDown.bind(this));\n        });\n      }\n    }\n  }\n  bindDocumentEvents() {\n    this.zone.runOutsideAngular(() => {\n      this.documentMouseMoveListener = this.renderer.listen(this.document, 'mousemove', this.onDocumentMouseMove.bind(this));\n      this.documentMouseUpListener = this.renderer.listen(this.document, 'mouseup', this.onDocumentMouseUp.bind(this));\n    });\n  }\n  unbindDocumentEvents() {\n    if (this.documentMouseMoveListener) {\n      this.documentMouseMoveListener();\n      this.documentMouseMoveListener = null;\n    }\n    if (this.documentMouseUpListener) {\n      this.documentMouseUpListener();\n      this.documentMouseUpListener = null;\n    }\n  }\n  onMouseDown(event) {\n    this.tt.onColumnResizeBegin(event);\n    this.bindDocumentEvents();\n  }\n  onDocumentMouseMove(event) {\n    this.tt.onColumnResize(event);\n  }\n  onDocumentMouseUp(event) {\n    this.tt.onColumnResizeEnd(event, this.el.nativeElement);\n    this.unbindDocumentEvents();\n  }\n  isEnabled() {\n    return this.ttResizableColumnDisabled !== true;\n  }\n  ngOnDestroy() {\n    if (this.resizerMouseDownListener) {\n      this.resizerMouseDownListener();\n      this.resizerMouseDownListener = null;\n    }\n    this.unbindDocumentEvents();\n  }\n  static ɵfac = function TTResizableColumn_Factory(t) {\n    return new (t || TTResizableColumn)(i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(PLATFORM_ID), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TTResizableColumn,\n    selectors: [[\"\", \"ttResizableColumn\", \"\"]],\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      ttResizableColumnDisabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"ttResizableColumnDisabled\", \"ttResizableColumnDisabled\", booleanAttribute]\n    },\n    features: [i0.ɵɵInputTransformsFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTResizableColumn, [{\n    type: Directive,\n    args: [{\n      selector: '[ttResizableColumn]',\n      host: {\n        class: 'p-element'\n      }\n    }]\n  }], () => [{\n    type: Document,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: i0.Renderer2\n  }, {\n    type: TreeTable\n  }, {\n    type: i0.ElementRef\n  }, {\n    type: i0.NgZone\n  }], {\n    ttResizableColumnDisabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }]\n  });\n})();\nclass TTReorderableColumn {\n  document;\n  platformId;\n  renderer;\n  tt;\n  el;\n  zone;\n  ttReorderableColumnDisabled;\n  dragStartListener;\n  dragOverListener;\n  dragEnterListener;\n  dragLeaveListener;\n  mouseDownListener;\n  constructor(document, platformId, renderer, tt, el, zone) {\n    this.document = document;\n    this.platformId = platformId;\n    this.renderer = renderer;\n    this.tt = tt;\n    this.el = el;\n    this.zone = zone;\n  }\n  ngAfterViewInit() {\n    if (this.isEnabled()) {\n      this.bindEvents();\n    }\n  }\n  bindEvents() {\n    if (isPlatformBrowser(this.platformId)) {\n      this.zone.runOutsideAngular(() => {\n        this.mouseDownListener = this.renderer.listen(this.el.nativeElement, 'mousedown', this.onMouseDown.bind(this));\n        this.dragStartListener = this.renderer.listen(this.el.nativeElement, 'dragstart', this.onDragStart.bind(this));\n        this.dragOverListener = this.renderer.listen(this.el.nativeElement, 'dragover', this.onDragEnter.bind(this));\n        this.dragEnterListener = this.renderer.listen(this.el.nativeElement, 'dragenter', this.onDragEnter.bind(this));\n        this.dragLeaveListener = this.renderer.listen(this.el.nativeElement, 'dragleave', this.onDragLeave.bind(this));\n      });\n    }\n  }\n  unbindEvents() {\n    if (isPlatformBrowser(this.platformId)) {\n      if (this.mouseDownListener) {\n        this.mouseDownListener();\n        this.mouseDownListener = null;\n      }\n      if (this.dragOverListener) {\n        this.dragOverListener();\n        this.dragOverListener = null;\n      }\n      if (this.dragEnterListener) {\n        this.dragEnterListener();\n        this.dragEnterListener = null;\n      }\n      if (this.dragLeaveListener) {\n        this.dragLeaveListener();\n        this.dragLeaveListener = null;\n      }\n    }\n  }\n  onMouseDown(event) {\n    if (event.target.nodeName === 'INPUT' || event.target.nodeName === 'TEXTAREA' || DomHandler.hasClass(event.target, 'p-column-resizer')) this.el.nativeElement.draggable = false;else this.el.nativeElement.draggable = true;\n  }\n  onDragStart(event) {\n    this.tt.onColumnDragStart(event, this.el.nativeElement);\n  }\n  onDragOver(event) {\n    event.preventDefault();\n  }\n  onDragEnter(event) {\n    this.tt.onColumnDragEnter(event, this.el.nativeElement);\n  }\n  onDragLeave(event) {\n    this.tt.onColumnDragLeave(event);\n  }\n  onDrop(event) {\n    if (this.isEnabled()) {\n      this.tt.onColumnDrop(event, this.el.nativeElement);\n    }\n  }\n  isEnabled() {\n    return this.ttReorderableColumnDisabled !== true;\n  }\n  ngOnDestroy() {\n    this.unbindEvents();\n  }\n  static ɵfac = function TTReorderableColumn_Factory(t) {\n    return new (t || TTReorderableColumn)(i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(PLATFORM_ID), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TTReorderableColumn,\n    selectors: [[\"\", \"ttReorderableColumn\", \"\"]],\n    hostAttrs: [1, \"p-element\"],\n    hostBindings: function TTReorderableColumn_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"drop\", function TTReorderableColumn_drop_HostBindingHandler($event) {\n          return ctx.onDrop($event);\n        });\n      }\n    },\n    inputs: {\n      ttReorderableColumnDisabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"ttReorderableColumnDisabled\", \"ttReorderableColumnDisabled\", booleanAttribute]\n    },\n    features: [i0.ɵɵInputTransformsFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTReorderableColumn, [{\n    type: Directive,\n    args: [{\n      selector: '[ttReorderableColumn]',\n      host: {\n        class: 'p-element'\n      }\n    }]\n  }], () => [{\n    type: Document,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: i0.Renderer2\n  }, {\n    type: TreeTable\n  }, {\n    type: i0.ElementRef\n  }, {\n    type: i0.NgZone\n  }], {\n    ttReorderableColumnDisabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    onDrop: [{\n      type: HostListener,\n      args: ['drop', ['$event']]\n    }]\n  });\n})();\nclass TTSelectableRow {\n  tt;\n  tableService;\n  rowNode;\n  ttSelectableRowDisabled;\n  selected;\n  subscription;\n  constructor(tt, tableService) {\n    this.tt = tt;\n    this.tableService = tableService;\n    if (this.isEnabled()) {\n      this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n        this.selected = this.tt.isSelected(this.rowNode.node);\n      });\n    }\n  }\n  ngOnInit() {\n    if (this.isEnabled()) {\n      this.selected = this.tt.isSelected(this.rowNode.node);\n    }\n  }\n  onClick(event) {\n    if (this.isEnabled()) {\n      this.tt.handleRowClick({\n        originalEvent: event,\n        rowNode: this.rowNode\n      });\n    }\n  }\n  onKeyDown(event) {\n    switch (event.code) {\n      case 'Enter':\n      case 'Space':\n        this.onEnterKey(event);\n        break;\n      default:\n        break;\n    }\n  }\n  onTouchEnd(event) {\n    if (this.isEnabled()) {\n      this.tt.handleRowTouchEnd(event);\n    }\n  }\n  onEnterKey(event) {\n    if (this.tt.selectionMode === 'checkbox') {\n      this.tt.toggleNodeWithCheckbox({\n        originalEvent: event,\n        rowNode: this.rowNode\n      });\n    } else {\n      this.onClick(event);\n    }\n    event.preventDefault();\n  }\n  isEnabled() {\n    return this.ttSelectableRowDisabled !== true;\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  static ɵfac = function TTSelectableRow_Factory(t) {\n    return new (t || TTSelectableRow)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TreeTableService));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TTSelectableRow,\n    selectors: [[\"\", \"ttSelectableRow\", \"\"]],\n    hostAttrs: [1, \"p-element\"],\n    hostVars: 4,\n    hostBindings: function TTSelectableRow_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function TTSelectableRow_click_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        })(\"keydown\", function TTSelectableRow_keydown_HostBindingHandler($event) {\n          return ctx.onKeyDown($event);\n        })(\"touchend\", function TTSelectableRow_touchend_HostBindingHandler($event) {\n          return ctx.onTouchEnd($event);\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"data-p-highlight\", ctx.selected)(\"aria-checked\", ctx.selected);\n        i0.ɵɵclassProp(\"p-highlight\", ctx.selected);\n      }\n    },\n    inputs: {\n      rowNode: [i0.ɵɵInputFlags.None, \"ttSelectableRow\", \"rowNode\"],\n      ttSelectableRowDisabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"ttSelectableRowDisabled\", \"ttSelectableRowDisabled\", booleanAttribute]\n    },\n    features: [i0.ɵɵInputTransformsFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTSelectableRow, [{\n    type: Directive,\n    args: [{\n      selector: '[ttSelectableRow]',\n      host: {\n        class: 'p-element',\n        '[class.p-highlight]': 'selected',\n        '[attr.data-p-highlight]': 'selected',\n        '[attr.aria-checked]': 'selected'\n      }\n    }]\n  }], () => [{\n    type: TreeTable\n  }, {\n    type: TreeTableService\n  }], {\n    rowNode: [{\n      type: Input,\n      args: ['ttSelectableRow']\n    }],\n    ttSelectableRowDisabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    onKeyDown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }],\n    onTouchEnd: [{\n      type: HostListener,\n      args: ['touchend', ['$event']]\n    }]\n  });\n})();\nclass TTSelectableRowDblClick {\n  tt;\n  tableService;\n  rowNode;\n  ttSelectableRowDisabled;\n  selected;\n  subscription;\n  constructor(tt, tableService) {\n    this.tt = tt;\n    this.tableService = tableService;\n    if (this.isEnabled()) {\n      this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n        this.selected = this.tt.isSelected(this.rowNode.node);\n      });\n    }\n  }\n  ngOnInit() {\n    if (this.isEnabled()) {\n      this.selected = this.tt.isSelected(this.rowNode.node);\n    }\n  }\n  onClick(event) {\n    if (this.isEnabled()) {\n      this.tt.handleRowClick({\n        originalEvent: event,\n        rowNode: this.rowNode\n      });\n    }\n  }\n  isEnabled() {\n    return this.ttSelectableRowDisabled !== true;\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  static ɵfac = function TTSelectableRowDblClick_Factory(t) {\n    return new (t || TTSelectableRowDblClick)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TreeTableService));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TTSelectableRowDblClick,\n    selectors: [[\"\", \"ttSelectableRowDblClick\", \"\"]],\n    hostAttrs: [1, \"p-element\"],\n    hostVars: 2,\n    hostBindings: function TTSelectableRowDblClick_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"dblclick\", function TTSelectableRowDblClick_dblclick_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"p-highlight\", ctx.selected);\n      }\n    },\n    inputs: {\n      rowNode: [i0.ɵɵInputFlags.None, \"ttSelectableRowDblClick\", \"rowNode\"],\n      ttSelectableRowDisabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"ttSelectableRowDisabled\", \"ttSelectableRowDisabled\", booleanAttribute]\n    },\n    features: [i0.ɵɵInputTransformsFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTSelectableRowDblClick, [{\n    type: Directive,\n    args: [{\n      selector: '[ttSelectableRowDblClick]',\n      host: {\n        class: 'p-element',\n        '[class.p-highlight]': 'selected'\n      }\n    }]\n  }], () => [{\n    type: TreeTable\n  }, {\n    type: TreeTableService\n  }], {\n    rowNode: [{\n      type: Input,\n      args: ['ttSelectableRowDblClick']\n    }],\n    ttSelectableRowDisabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['dblclick', ['$event']]\n    }]\n  });\n})();\nclass TTContextMenuRow {\n  tt;\n  tableService;\n  el;\n  rowNode;\n  ttContextMenuRowDisabled;\n  selected;\n  subscription;\n  constructor(tt, tableService, el) {\n    this.tt = tt;\n    this.tableService = tableService;\n    this.el = el;\n    if (this.isEnabled()) {\n      this.subscription = this.tt.tableService.contextMenuSource$.subscribe(node => {\n        this.selected = this.tt.equals(this.rowNode.node, node);\n      });\n    }\n  }\n  onContextMenu(event) {\n    if (this.isEnabled()) {\n      this.tt.handleRowRightClick({\n        originalEvent: event,\n        rowNode: this.rowNode\n      });\n      this.el.nativeElement.focus();\n      event.preventDefault();\n    }\n  }\n  isEnabled() {\n    return this.ttContextMenuRowDisabled !== true;\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  static ɵfac = function TTContextMenuRow_Factory(t) {\n    return new (t || TTContextMenuRow)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TreeTableService), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TTContextMenuRow,\n    selectors: [[\"\", \"ttContextMenuRow\", \"\"]],\n    hostAttrs: [1, \"p-element\"],\n    hostVars: 3,\n    hostBindings: function TTContextMenuRow_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"contextmenu\", function TTContextMenuRow_contextmenu_HostBindingHandler($event) {\n          return ctx.onContextMenu($event);\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"tabindex\", ctx.isEnabled() ? 0 : undefined);\n        i0.ɵɵclassProp(\"p-highlight-contextmenu\", ctx.selected);\n      }\n    },\n    inputs: {\n      rowNode: [i0.ɵɵInputFlags.None, \"ttContextMenuRow\", \"rowNode\"],\n      ttContextMenuRowDisabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"ttContextMenuRowDisabled\", \"ttContextMenuRowDisabled\", booleanAttribute]\n    },\n    features: [i0.ɵɵInputTransformsFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTContextMenuRow, [{\n    type: Directive,\n    args: [{\n      selector: '[ttContextMenuRow]',\n      host: {\n        class: 'p-element',\n        '[class.p-highlight-contextmenu]': 'selected',\n        '[attr.tabindex]': 'isEnabled() ? 0 : undefined'\n      }\n    }]\n  }], () => [{\n    type: TreeTable\n  }, {\n    type: TreeTableService\n  }, {\n    type: i0.ElementRef\n  }], {\n    rowNode: [{\n      type: Input,\n      args: ['ttContextMenuRow']\n    }],\n    ttContextMenuRowDisabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    onContextMenu: [{\n      type: HostListener,\n      args: ['contextmenu', ['$event']]\n    }]\n  });\n})();\nclass TTCheckbox {\n  tt;\n  tableService;\n  cd;\n  disabled;\n  rowNode;\n  checked;\n  partialChecked;\n  focused;\n  subscription;\n  constructor(tt, tableService, cd) {\n    this.tt = tt;\n    this.tableService = tableService;\n    this.cd = cd;\n    this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n      if (this.tt.selectionKeys) {\n        this.checked = this.tt.isNodeSelected(this.rowNode.node);\n        this.partialChecked = this.tt.isNodePartialSelected(this.rowNode.node);\n      } else {\n        this.checked = this.tt.isSelected(this.rowNode.node);\n        this.partialChecked = this.rowNode.node.partialSelected;\n      }\n      this.cd.markForCheck();\n    });\n  }\n  ngOnInit() {\n    if (this.tt.selectionKeys) {\n      this.checked = this.tt.isNodeSelected(this.rowNode.node);\n      this.partialChecked = this.tt.isNodePartialSelected(this.rowNode.node);\n    } else {\n      // for backward compatibility\n      this.checked = this.tt.isSelected(this.rowNode.node);\n      this.partialChecked = this.rowNode.node.partialSelected;\n    }\n  }\n  onClick(event) {\n    if (!this.disabled) {\n      if (this.tt.selectionKeys) {\n        const _check = !this.checked;\n        this.tt.toggleCheckbox({\n          originalEvent: event,\n          check: _check,\n          rowNode: this.rowNode\n        });\n      } else {\n        this.tt.toggleNodeWithCheckbox({\n          originalEvent: event,\n          rowNode: this.rowNode\n        });\n      }\n    }\n    DomHandler.clearSelection();\n  }\n  onFocus() {\n    this.focused = true;\n  }\n  onBlur() {\n    this.focused = false;\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  static ɵfac = function TTCheckbox_Factory(t) {\n    return new (t || TTCheckbox)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TreeTableService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TTCheckbox,\n    selectors: [[\"p-treeTableCheckbox\"]],\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      disabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"disabled\", \"disabled\", booleanAttribute],\n      rowNode: [i0.ɵɵInputFlags.None, \"value\", \"rowNode\"]\n    },\n    features: [i0.ɵɵInputTransformsFeature],\n    decls: 7,\n    vars: 14,\n    consts: [[\"box\", \"\"], [1, \"p-checkbox\", \"p-component\", 3, \"click\", \"ngClass\"], [1, \"p-hidden-accessible\"], [\"type\", \"checkbox\", \"tabindex\", \"-1\", 3, \"focus\", \"blur\", \"checked\"], [\"role\", \"checkbox\", 3, \"ngClass\"], [4, \"ngIf\"], [3, \"styleClass\", 4, \"ngIf\"], [3, \"styleClass\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function TTCheckbox_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\", 1);\n        i0.ɵɵlistener(\"click\", function TTCheckbox_Template_div_click_0_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onClick($event));\n        });\n        i0.ɵɵelementStart(1, \"div\", 2)(2, \"input\", 3);\n        i0.ɵɵlistener(\"focus\", function TTCheckbox_Template_input_focus_2_listener() {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onFocus());\n        })(\"blur\", function TTCheckbox_Template_input_blur_2_listener() {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onBlur());\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(3, \"div\", 4, 0);\n        i0.ɵɵtemplate(5, TTCheckbox_ng_container_5_Template, 3, 2, \"ng-container\", 5)(6, TTCheckbox_span_6_Template, 2, 5, \"span\", 5);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(6, _c31, ctx.focused, ctx.tt.config.inputStyle() === \"filled\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"checked\", ctx.checked);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction4(9, _c32, ctx.checked, ctx.focused, ctx.partialChecked, ctx.disabled));\n        i0.ɵɵattribute(\"aria-checked\", ctx.checked);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", !ctx.tt.checkboxIconTemplate);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.tt.checkboxIconTemplate);\n      }\n    },\n    dependencies: () => [i2.NgClass, i2.NgIf, i2.NgTemplateOutlet, CheckIcon, MinusIcon],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTCheckbox, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTableCheckbox',\n      template: `\n        <div class=\"p-checkbox p-component\" [ngClass]=\"{ 'p-checkbox-focused': focused, 'p-variant-filled': tt.config.inputStyle() === 'filled' }\" (click)=\"onClick($event)\">\n            <div class=\"p-hidden-accessible\">\n                <input type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" tabindex=\"-1\" />\n            </div>\n            <div #box [ngClass]=\"{ 'p-checkbox-box': true, 'p-highlight': checked, 'p-focus': focused, 'p-indeterminate': partialChecked, 'p-disabled': disabled }\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <ng-container *ngIf=\"!tt.checkboxIconTemplate\">\n                    <CheckIcon [styleClass]=\"'p-checkbox-icon'\" *ngIf=\"checked\" />\n                    <MinusIcon [styleClass]=\"'p-checkbox-icon'\" *ngIf=\"partialChecked\" />\n                </ng-container>\n                <span *ngIf=\"tt.checkboxIconTemplate\">\n                    <ng-template *ngTemplateOutlet=\"tt.checkboxIconTemplate; context: { $implicit: checked, partialSelected: partialChecked }\"></ng-template>\n                </span>\n            </div>\n        </div>\n    `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        class: 'p-element'\n      }\n    }]\n  }], () => [{\n    type: TreeTable\n  }, {\n    type: TreeTableService\n  }, {\n    type: i0.ChangeDetectorRef\n  }], {\n    disabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    rowNode: [{\n      type: Input,\n      args: ['value']\n    }]\n  });\n})();\nclass TTHeaderCheckbox {\n  tt;\n  tableService;\n  cd;\n  boxViewChild;\n  checked;\n  focused;\n  disabled;\n  selectionChangeSubscription;\n  valueChangeSubscription;\n  constructor(tt, tableService, cd) {\n    this.tt = tt;\n    this.tableService = tableService;\n    this.cd = cd;\n    this.valueChangeSubscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n      this.checked = this.updateCheckedState();\n    });\n    this.selectionChangeSubscription = this.tt.tableService.selectionSource$.subscribe(() => {\n      this.checked = this.updateCheckedState();\n    });\n  }\n  ngOnInit() {\n    this.checked = this.updateCheckedState();\n  }\n  onClick(event, checked) {\n    if ((this.tt.value || this.tt.filteredNodes) && (this.tt.value.length > 0 || this.tt.filteredNodes.length > 0)) {\n      this.tt.toggleNodesWithCheckbox(event, !checked);\n    }\n    DomHandler.clearSelection();\n  }\n  onFocus() {\n    this.focused = true;\n  }\n  onBlur() {\n    this.focused = false;\n  }\n  ngOnDestroy() {\n    if (this.selectionChangeSubscription) {\n      this.selectionChangeSubscription.unsubscribe();\n    }\n    if (this.valueChangeSubscription) {\n      this.valueChangeSubscription.unsubscribe();\n    }\n  }\n  updateCheckedState() {\n    this.cd.markForCheck();\n    let checked;\n    const data = this.tt.filteredNodes || this.tt.value;\n    if (data) {\n      if (this.tt.selectionKeys) {\n        for (let node of data) {\n          if (this.tt.isNodeSelected(node)) {\n            checked = true;\n          } else {\n            checked = false;\n            break;\n          }\n        }\n      }\n      if (!this.tt.selectionKeys) {\n        // legacy selection support, will be removed in v18\n        for (let node of data) {\n          if (this.tt.isSelected(node)) {\n            checked = true;\n          } else {\n            checked = false;\n            break;\n          }\n        }\n      }\n    } else {\n      checked = false;\n    }\n    return checked;\n  }\n  static ɵfac = function TTHeaderCheckbox_Factory(t) {\n    return new (t || TTHeaderCheckbox)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TreeTableService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TTHeaderCheckbox,\n    selectors: [[\"p-treeTableHeaderCheckbox\"]],\n    viewQuery: function TTHeaderCheckbox_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c34, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.boxViewChild = _t.first);\n      }\n    },\n    hostAttrs: [1, \"p-element\"],\n    decls: 8,\n    vars: 13,\n    consts: [[\"cb\", \"\"], [\"box\", \"\"], [1, \"p-checkbox\", \"p-component\", 3, \"click\", \"ngClass\"], [1, \"p-hidden-accessible\"], [\"type\", \"checkbox\", 3, \"focus\", \"blur\", \"checked\", \"disabled\"], [\"role\", \"checkbox\", 3, \"ngClass\"], [4, \"ngIf\"], [\"class\", \"p-checkbox-icon\", 4, \"ngIf\"], [3, \"styleClass\", 4, \"ngIf\"], [3, \"styleClass\"], [1, \"p-checkbox-icon\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function TTHeaderCheckbox_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\", 2);\n        i0.ɵɵlistener(\"click\", function TTHeaderCheckbox_Template_div_click_0_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          const cb_r2 = i0.ɵɵreference(3);\n          return i0.ɵɵresetView(ctx.onClick($event, cb_r2.checked));\n        });\n        i0.ɵɵelementStart(1, \"div\", 3)(2, \"input\", 4, 0);\n        i0.ɵɵlistener(\"focus\", function TTHeaderCheckbox_Template_input_focus_2_listener() {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onFocus());\n        })(\"blur\", function TTHeaderCheckbox_Template_input_blur_2_listener() {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onBlur());\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"div\", 5, 1);\n        i0.ɵɵtemplate(6, TTHeaderCheckbox_ng_container_6_Template, 2, 1, \"ng-container\", 6)(7, TTHeaderCheckbox_span_7_Template, 2, 4, \"span\", 7);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(7, _c35, ctx.focused));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"checked\", ctx.checked)(\"disabled\", !ctx.tt.value || ctx.tt.value.length === 0);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction3(9, _c36, ctx.checked, ctx.focused, !ctx.tt.value || ctx.tt.value.length === 0));\n        i0.ɵɵattribute(\"aria-checked\", ctx.checked);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", !ctx.tt.headerCheckboxIconTemplate);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.tt.headerCheckboxIconTemplate);\n      }\n    },\n    dependencies: () => [i2.NgClass, i2.NgIf, i2.NgTemplateOutlet, CheckIcon],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTHeaderCheckbox, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTableHeaderCheckbox',\n      template: `\n        <div class=\"p-checkbox p-component\" [ngClass]=\"{ 'p-checkbox-focused': focused }\" (click)=\"onClick($event, cb.checked)\">\n            <div class=\"p-hidden-accessible\">\n                <input #cb type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"!tt.value || tt.value.length === 0\" />\n            </div>\n            <div #box [ngClass]=\"{ 'p-checkbox-box': true, 'p-highlight': checked, 'p-focus': focused, 'p-disabled': !tt.value || tt.value.length === 0 }\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <ng-container *ngIf=\"!tt.headerCheckboxIconTemplate\">\n                    <CheckIcon *ngIf=\"checked\" [styleClass]=\"'p-checkbox-icon'\" />\n                </ng-container>\n                <span class=\"p-checkbox-icon\" *ngIf=\"tt.headerCheckboxIconTemplate\">\n                    <ng-template *ngTemplateOutlet=\"tt.headerCheckboxIconTemplate; context: { $implicit: checked }\"></ng-template>\n                </span>\n            </div>\n        </div>\n    `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        class: 'p-element'\n      }\n    }]\n  }], () => [{\n    type: TreeTable\n  }, {\n    type: TreeTableService\n  }, {\n    type: i0.ChangeDetectorRef\n  }], {\n    boxViewChild: [{\n      type: ViewChild,\n      args: ['box']\n    }]\n  });\n})();\nclass TTEditableColumn {\n  tt;\n  el;\n  zone;\n  data;\n  field;\n  ttEditableColumnDisabled;\n  constructor(tt, el, zone) {\n    this.tt = tt;\n    this.el = el;\n    this.zone = zone;\n  }\n  ngAfterViewInit() {\n    if (this.isEnabled()) {\n      DomHandler.addClass(this.el.nativeElement, 'p-editable-column');\n    }\n  }\n  onClick(event) {\n    if (this.isEnabled()) {\n      this.tt.editingCellClick = true;\n      if (this.tt.editingCell) {\n        if (this.tt.editingCell !== this.el.nativeElement) {\n          if (!this.tt.isEditingCellValid()) {\n            return;\n          }\n          DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n          this.openCell();\n        }\n      } else {\n        this.openCell();\n      }\n    }\n  }\n  openCell() {\n    this.tt.updateEditingCell(this.el.nativeElement, this.data, this.field);\n    DomHandler.addClass(this.el.nativeElement, 'p-cell-editing');\n    this.tt.onEditInit.emit({\n      field: this.field,\n      data: this.data\n    });\n    this.tt.editingCellClick = true;\n    this.zone.runOutsideAngular(() => {\n      setTimeout(() => {\n        let focusable = DomHandler.findSingle(this.el.nativeElement, 'input, textarea');\n        if (focusable) {\n          focusable.focus();\n        }\n      }, 50);\n    });\n  }\n  closeEditingCell() {\n    DomHandler.removeClass(this.tt.editingCell, 'p-checkbox-icon');\n    this.tt.editingCell = null;\n    this.tt.unbindDocumentEditListener();\n  }\n  onKeyDown(event) {\n    if (this.isEnabled()) {\n      if (event.code == 'Enter' && !event.shiftKey) {\n        if (this.tt.isEditingCellValid()) {\n          DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n          this.closeEditingCell();\n          this.tt.onEditComplete.emit({\n            field: this.field,\n            data: this.data\n          });\n        }\n        event.preventDefault();\n      } else if (event.code == 'Escape') {\n        if (this.tt.isEditingCellValid()) {\n          DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n          this.closeEditingCell();\n          this.tt.onEditCancel.emit({\n            field: this.field,\n            data: this.data\n          });\n        }\n        event.preventDefault();\n      } else if (event.code == 'Tab') {\n        this.tt.onEditComplete.emit({\n          field: this.field,\n          data: this.data\n        });\n        if (event.shiftKey) this.moveToPreviousCell(event);else this.moveToNextCell(event);\n      }\n    }\n  }\n  findCell(element) {\n    if (element) {\n      let cell = element;\n      while (cell && !DomHandler.hasClass(cell, 'p-cell-editing')) {\n        cell = cell.parentElement;\n      }\n      return cell;\n    } else {\n      return null;\n    }\n  }\n  moveToPreviousCell(event) {\n    let currentCell = this.findCell(event.target);\n    let row = currentCell.parentElement;\n    let targetCell = this.findPreviousEditableColumn(currentCell);\n    if (targetCell) {\n      DomHandler.invokeElementMethod(targetCell, 'click');\n      event.preventDefault();\n    }\n  }\n  moveToNextCell(event) {\n    let currentCell = this.findCell(event.target);\n    let row = currentCell.parentElement;\n    let targetCell = this.findNextEditableColumn(currentCell);\n    if (targetCell) {\n      DomHandler.invokeElementMethod(targetCell, 'click');\n      event.preventDefault();\n    }\n  }\n  findPreviousEditableColumn(cell) {\n    let prevCell = cell.previousElementSibling;\n    if (!prevCell) {\n      let previousRow = cell.parentElement ? cell.parentElement.previousElementSibling : null;\n      if (previousRow) {\n        prevCell = previousRow.lastElementChild;\n      }\n    }\n    if (prevCell) {\n      if (DomHandler.hasClass(prevCell, 'p-editable-column')) return prevCell;else return this.findPreviousEditableColumn(prevCell);\n    } else {\n      return null;\n    }\n  }\n  findNextEditableColumn(cell) {\n    let nextCell = cell.nextElementSibling;\n    if (!nextCell) {\n      let nextRow = cell.parentElement ? cell.parentElement.nextElementSibling : null;\n      if (nextRow) {\n        nextCell = nextRow.firstElementChild;\n      }\n    }\n    if (nextCell) {\n      if (DomHandler.hasClass(nextCell, 'p-editable-column')) return nextCell;else return this.findNextEditableColumn(nextCell);\n    } else {\n      return null;\n    }\n  }\n  isEnabled() {\n    return this.ttEditableColumnDisabled !== true;\n  }\n  static ɵfac = function TTEditableColumn_Factory(t) {\n    return new (t || TTEditableColumn)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TTEditableColumn,\n    selectors: [[\"\", \"ttEditableColumn\", \"\"]],\n    hostAttrs: [1, \"p-element\"],\n    hostBindings: function TTEditableColumn_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function TTEditableColumn_click_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        })(\"keydown\", function TTEditableColumn_keydown_HostBindingHandler($event) {\n          return ctx.onKeyDown($event);\n        });\n      }\n    },\n    inputs: {\n      data: [i0.ɵɵInputFlags.None, \"ttEditableColumn\", \"data\"],\n      field: [i0.ɵɵInputFlags.None, \"ttEditableColumnField\", \"field\"],\n      ttEditableColumnDisabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"ttEditableColumnDisabled\", \"ttEditableColumnDisabled\", booleanAttribute]\n    },\n    features: [i0.ɵɵInputTransformsFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTEditableColumn, [{\n    type: Directive,\n    args: [{\n      selector: '[ttEditableColumn]',\n      host: {\n        class: 'p-element'\n      }\n    }]\n  }], () => [{\n    type: TreeTable\n  }, {\n    type: i0.ElementRef\n  }, {\n    type: i0.NgZone\n  }], {\n    data: [{\n      type: Input,\n      args: ['ttEditableColumn']\n    }],\n    field: [{\n      type: Input,\n      args: ['ttEditableColumnField']\n    }],\n    ttEditableColumnDisabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    onKeyDown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }]\n  });\n})();\nclass TreeTableCellEditor {\n  tt;\n  editableColumn;\n  templates;\n  inputTemplate;\n  outputTemplate;\n  constructor(tt, editableColumn) {\n    this.tt = tt;\n    this.editableColumn = editableColumn;\n  }\n  ngAfterContentInit() {\n    this.templates.forEach(item => {\n      switch (item.getType()) {\n        case 'input':\n          this.inputTemplate = item.template;\n          break;\n        case 'output':\n          this.outputTemplate = item.template;\n          break;\n      }\n    });\n  }\n  static ɵfac = function TreeTableCellEditor_Factory(t) {\n    return new (t || TreeTableCellEditor)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TTEditableColumn));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TreeTableCellEditor,\n    selectors: [[\"p-treeTableCellEditor\"]],\n    contentQueries: function TreeTableCellEditor_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    hostAttrs: [1, \"p-element\"],\n    decls: 2,\n    vars: 2,\n    consts: [[4, \"ngIf\"], [4, \"ngTemplateOutlet\"]],\n    template: function TreeTableCellEditor_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, TreeTableCellEditor_ng_container_0_Template, 2, 1, \"ng-container\", 0)(1, TreeTableCellEditor_ng_container_1_Template, 2, 1, \"ng-container\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.tt.editingCell === ctx.editableColumn.el.nativeElement);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", !ctx.tt.editingCell || ctx.tt.editingCell !== ctx.editableColumn.el.nativeElement);\n      }\n    },\n    dependencies: [i2.NgIf, i2.NgTemplateOutlet],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeTableCellEditor, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTableCellEditor',\n      template: `\n        <ng-container *ngIf=\"tt.editingCell === editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"inputTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!tt.editingCell || tt.editingCell !== editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"outputTemplate\"></ng-container>\n        </ng-container>\n    `,\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        class: 'p-element'\n      }\n    }]\n  }], () => [{\n    type: TreeTable\n  }, {\n    type: TTEditableColumn\n  }], {\n    templates: [{\n      type: ContentChildren,\n      args: [PrimeTemplate]\n    }]\n  });\n})();\nclass TTRow {\n  tt;\n  el;\n  zone;\n  get level() {\n    return this.rowNode?.['level'] + 1;\n  }\n  get styleClass() {\n    return this.rowNode?.node['styleClass'] || '';\n  }\n  get expanded() {\n    return this.rowNode?.node['expanded'];\n  }\n  rowNode;\n  constructor(tt, el, zone) {\n    this.tt = tt;\n    this.el = el;\n    this.zone = zone;\n  }\n  onKeyDown(event) {\n    switch (event.code) {\n      case 'ArrowDown':\n        this.onArrowDownKey(event);\n        break;\n      case 'ArrowUp':\n        this.onArrowUpKey(event);\n        break;\n      case 'ArrowRight':\n        this.onArrowRightKey(event);\n        break;\n      case 'ArrowLeft':\n        this.onArrowLeftKey(event);\n        break;\n      case 'Tab':\n        this.onTabKey(event);\n        break;\n      case 'Home':\n        this.onHomeKey(event);\n        break;\n      case 'End':\n        this.onEndKey(event);\n        break;\n      default:\n        break;\n    }\n  }\n  onArrowDownKey(event) {\n    let nextRow = this.el?.nativeElement?.nextElementSibling;\n    if (nextRow) {\n      this.focusRowChange(event.currentTarget, nextRow);\n    }\n    event.preventDefault();\n  }\n  onArrowUpKey(event) {\n    let prevRow = this.el?.nativeElement?.previousElementSibling;\n    if (prevRow) {\n      this.focusRowChange(event.currentTarget, prevRow);\n    }\n    event.preventDefault();\n  }\n  onArrowRightKey(event) {\n    const currentTarget = event.currentTarget;\n    const isHiddenIcon = DomHandler.findSingle(currentTarget, 'button').style.visibility === 'hidden';\n    if (!isHiddenIcon && !this.expanded && this.rowNode.node['children']) {\n      this.expand(event);\n      currentTarget.tabIndex = -1;\n    }\n    event.preventDefault();\n  }\n  onArrowLeftKey(event) {\n    const container = this.tt.containerViewChild?.nativeElement;\n    const expandedRows = DomHandler.find(container, '[aria-expanded=\"true\"]');\n    const lastExpandedRow = expandedRows[expandedRows.length - 1];\n    if (this.expanded) {\n      this.collapse(event);\n    }\n    if (lastExpandedRow) {\n      this.tt.toggleRowIndex = DomHandler.index(lastExpandedRow);\n    }\n    this.restoreFocus();\n    event.preventDefault();\n  }\n  onHomeKey(event) {\n    const firstElement = DomHandler.findSingle(this.tt.containerViewChild?.nativeElement, `tr[aria-level=\"${this.level}\"]`);\n    firstElement && DomHandler.focus(firstElement);\n    event.preventDefault();\n  }\n  onEndKey(event) {\n    const nodes = DomHandler.find(this.tt.containerViewChild?.nativeElement, `tr[aria-level=\"${this.level}\"]`);\n    const lastElement = nodes[nodes.length - 1];\n    DomHandler.focus(lastElement);\n    event.preventDefault();\n  }\n  onTabKey(event) {\n    const rows = this.el.nativeElement ? [...DomHandler.find(this.el.nativeElement.parentNode, 'tr')] : undefined;\n    if (rows && ObjectUtils.isNotEmpty(rows)) {\n      const hasSelectedRow = rows.some(row => DomHandler.getAttribute(row, 'data-p-highlight') || row.getAttribute('aria-checked') === 'true');\n      rows.forEach(row => {\n        row.tabIndex = -1;\n      });\n      if (hasSelectedRow) {\n        const selectedNodes = rows.filter(node => DomHandler.getAttribute(node, 'data-p-highlight') || node.getAttribute('aria-checked') === 'true');\n        selectedNodes[0].tabIndex = 0;\n        return;\n      }\n      rows[0].tabIndex = 0;\n    }\n  }\n  expand(event) {\n    this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n    this.rowNode.node['expanded'] = true;\n    this.tt.updateSerializedValue();\n    this.tt.tableService.onUIUpdate(this.tt.value);\n    this.rowNode.node['children'] ? this.restoreFocus(this.tt.toggleRowIndex + 1) : this.restoreFocus();\n    this.tt.onNodeExpand.emit({\n      originalEvent: event,\n      node: this.rowNode.node\n    });\n  }\n  collapse(event) {\n    this.rowNode.node['expanded'] = false;\n    this.tt.updateSerializedValue();\n    this.tt.tableService.onUIUpdate(this.tt.value);\n    this.tt.onNodeCollapse.emit({\n      originalEvent: event,\n      node: this.rowNode.node\n    });\n  }\n  focusRowChange(firstFocusableRow, currentFocusedRow, lastVisibleDescendant) {\n    firstFocusableRow.tabIndex = '-1';\n    currentFocusedRow.tabIndex = '0';\n    DomHandler.focus(currentFocusedRow);\n  }\n  restoreFocus(index) {\n    this.zone.runOutsideAngular(() => {\n      setTimeout(() => {\n        const container = this.tt.containerViewChild?.nativeElement;\n        const row = DomHandler.findSingle(container, '.p-treetable-tbody').children[index || this.tt.toggleRowIndex];\n        const rows = [...DomHandler.find(container, 'tr')];\n        rows && rows.forEach(r => {\n          if (!row.isSameNode(r)) {\n            r.tabIndex = -1;\n          }\n        });\n        if (row) {\n          row.tabIndex = 0;\n          row.focus();\n        }\n      }, 25);\n    });\n  }\n  static ɵfac = function TTRow_Factory(t) {\n    return new (t || TTRow)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TTRow,\n    selectors: [[\"\", \"ttRow\", \"\"]],\n    hostAttrs: [1, \"p-element\"],\n    hostVars: 7,\n    hostBindings: function TTRow_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keydown\", function TTRow_keydown_HostBindingHandler($event) {\n          return ctx.onKeyDown($event);\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"tabindex\", \"0\")(\"aria-expanded\", ctx.expanded)(\"aria-level\", ctx.level)(\"data-pc-section\", ctx.row)(\"role\", ctx.row);\n        i0.ɵɵclassMap(\"p-element \" + ctx.styleClass);\n      }\n    },\n    inputs: {\n      rowNode: [i0.ɵɵInputFlags.None, \"ttRow\", \"rowNode\"]\n    }\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTRow, [{\n    type: Directive,\n    args: [{\n      selector: '[ttRow]',\n      host: {\n        class: 'p-element',\n        '[class]': `'p-element ' + styleClass`,\n        '[attr.tabindex]': \"'0'\",\n        '[attr.aria-expanded]': 'expanded',\n        '[attr.aria-level]': 'level',\n        '[attr.data-pc-section]': 'row',\n        '[attr.role]': 'row'\n      }\n    }]\n  }], () => [{\n    type: TreeTable\n  }, {\n    type: i0.ElementRef\n  }, {\n    type: i0.NgZone\n  }], {\n    rowNode: [{\n      type: Input,\n      args: ['ttRow']\n    }],\n    onKeyDown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }]\n  });\n})();\nclass TreeTableToggler {\n  tt;\n  config;\n  rowNode;\n  constructor(tt, config) {\n    this.tt = tt;\n    this.config = config;\n  }\n  get toggleButtonAriaLabel() {\n    return this.config.translation ? this.rowNode.expanded ? this.config.translation.aria.collapseRow : this.config.translation.aria.expandRow : undefined;\n  }\n  onClick(event) {\n    this.rowNode.node.expanded = !this.rowNode.node.expanded;\n    if (this.rowNode.node.expanded) {\n      this.tt.onNodeExpand.emit({\n        originalEvent: event,\n        node: this.rowNode.node\n      });\n    } else {\n      this.tt.onNodeCollapse.emit({\n        originalEvent: event,\n        node: this.rowNode.node\n      });\n    }\n    this.tt.updateSerializedValue();\n    this.tt.tableService.onUIUpdate(this.tt.value);\n    event.preventDefault();\n  }\n  static ɵfac = function TreeTableToggler_Factory(t) {\n    return new (t || TreeTableToggler)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(i1.PrimeNGConfig));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TreeTableToggler,\n    selectors: [[\"p-treeTableToggler\"]],\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      rowNode: \"rowNode\"\n    },\n    decls: 3,\n    vars: 12,\n    consts: [[\"type\", \"button\", \"tabindex\", \"-1\", \"pRipple\", \"\", 1, \"p-treetable-toggler\", \"p-link\", 3, \"click\", \"ngStyle\"], [4, \"ngIf\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function TreeTableToggler_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function TreeTableToggler_Template_button_click_0_listener($event) {\n          return ctx.onClick($event);\n        });\n        i0.ɵɵtemplate(1, TreeTableToggler_ng_container_1_Template, 3, 2, \"ng-container\", 1)(2, TreeTableToggler_2_Template, 1, 0, null, 2);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction2(7, _c37, ctx.rowNode.node.leaf === false || ctx.rowNode.node.children && ctx.rowNode.node.children.length ? \"visible\" : \"hidden\", ctx.rowNode.level * 16 + \"px\"));\n        i0.ɵɵattribute(\"data-pc-section\", \"rowtoggler\")(\"data-pc-group-section\", \"rowactionbutton\")(\"aria-label\", ctx.toggleButtonAriaLabel);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", !ctx.tt.togglerIconTemplate);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.tt.togglerIconTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(10, _c8, ctx.rowNode.node.expanded));\n      }\n    },\n    dependencies: () => [i2.NgIf, i2.NgTemplateOutlet, i2.NgStyle, i5.Ripple, ChevronDownIcon, ChevronRightIcon],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeTableToggler, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTableToggler',\n      template: `\n        <button\n            type=\"button\"\n            class=\"p-treetable-toggler p-link\"\n            (click)=\"onClick($event)\"\n            tabindex=\"-1\"\n            pRipple\n            [ngStyle]=\"{\n                visibility: rowNode.node.leaf === false || (rowNode.node.children && rowNode.node.children.length) ? 'visible' : 'hidden',\n                'margin-left': rowNode.level * 16 + 'px'\n            }\"\n            [attr.data-pc-section]=\"'rowtoggler'\"\n            [attr.data-pc-group-section]=\"'rowactionbutton'\"\n            [attr.aria-label]=\"toggleButtonAriaLabel\"\n        >\n            <ng-container *ngIf=\"!tt.togglerIconTemplate\">\n                <ChevronDownIcon *ngIf=\"rowNode.node.expanded\" [attr.aria-hidden]=\"true\" />\n                <ChevronRightIcon *ngIf=\"!rowNode.node.expanded\" [attr.aria-hidden]=\"true\" />\n            </ng-container>\n            <ng-template *ngTemplateOutlet=\"tt.togglerIconTemplate; context: { $implicit: rowNode.node.expanded }\"></ng-template>\n        </button>\n    `,\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        class: 'p-element'\n      }\n    }]\n  }], () => [{\n    type: TreeTable\n  }, {\n    type: i1.PrimeNGConfig\n  }], {\n    rowNode: [{\n      type: Input\n    }]\n  });\n})();\nclass TreeTableModule {\n  static ɵfac = function TreeTableModule_Factory(t) {\n    return new (t || TreeTableModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TreeTableModule,\n    declarations: [TreeTable, TreeTableToggler, TTScrollableView, TTBody, TTSortableColumn, TTSortIcon, TTResizableColumn, TTRow, TTReorderableColumn, TTSelectableRow, TTSelectableRowDblClick, TTContextMenuRow, TTCheckbox, TTHeaderCheckbox, TTEditableColumn, TreeTableCellEditor],\n    imports: [CommonModule, PaginatorModule, RippleModule, ScrollerModule, SpinnerIcon, ArrowDownIcon, ArrowUpIcon, SortAltIcon, SortAmountUpAltIcon, SortAmountDownIcon, CheckIcon, MinusIcon, ChevronDownIcon, ChevronRightIcon],\n    exports: [TreeTable, SharedModule, TreeTableToggler, TTSortableColumn, TTSortIcon, TTResizableColumn, TTRow, TTReorderableColumn, TTSelectableRow, TTSelectableRowDblClick, TTContextMenuRow, TTCheckbox, TTHeaderCheckbox, TTEditableColumn, TreeTableCellEditor, ScrollerModule]\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule, PaginatorModule, RippleModule, ScrollerModule, SpinnerIcon, ArrowDownIcon, ArrowUpIcon, SortAltIcon, SortAmountUpAltIcon, SortAmountDownIcon, CheckIcon, MinusIcon, ChevronDownIcon, ChevronRightIcon, SharedModule, ScrollerModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeTableModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, PaginatorModule, RippleModule, ScrollerModule, SpinnerIcon, ArrowDownIcon, ArrowUpIcon, SortAltIcon, SortAmountUpAltIcon, SortAmountDownIcon, CheckIcon, MinusIcon, ChevronDownIcon, ChevronRightIcon],\n      exports: [TreeTable, SharedModule, TreeTableToggler, TTSortableColumn, TTSortIcon, TTResizableColumn, TTRow, TTReorderableColumn, TTSelectableRow, TTSelectableRowDblClick, TTContextMenuRow, TTCheckbox, TTHeaderCheckbox, TTEditableColumn, TreeTableCellEditor, ScrollerModule],\n      declarations: [TreeTable, TreeTableToggler, TTScrollableView, TTBody, TTSortableColumn, TTSortIcon, TTResizableColumn, TTRow, TTReorderableColumn, TTSelectableRow, TTSelectableRowDblClick, TTContextMenuRow, TTCheckbox, TTHeaderCheckbox, TTEditableColumn, TreeTableCellEditor]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TTBody, TTCheckbox, TTContextMenuRow, TTEditableColumn, TTHeaderCheckbox, TTReorderableColumn, TTResizableColumn, TTRow, TTScrollableView, TTSelectableRow, TTSelectableRowDblClick, TTSortIcon, TTSortableColumn, TreeTable, TreeTableCellEditor, TreeTableModule, TreeTableService, TreeTableToggler };","map":{"version":3,"names":["i2","DOCUMENT","isPlatformBrowser","CommonModule","i0","Injectable","EventEmitter","booleanAttribute","numberAttribute","Component","ViewEncapsulation","Inject","Input","Output","ViewChild","ContentChildren","PLATFORM_ID","Directive","HostListener","ChangeDetectionStrategy","NgModule","i1","PrimeTemplate","SharedModule","DomHandler","ArrowDownIcon","ArrowUpIcon","CheckIcon","ChevronDownIcon","ChevronRightIcon","MinusIcon","SortAltIcon","SortAmountDownIcon","SortAmountUpAltIcon","SpinnerIcon","i3","PaginatorModule","i5","RippleModule","i4","ScrollerModule","ObjectUtils","Subject","_c0","_c1","_c2","_c3","_c4","_c5","_c6","_c7","a0","a1","a2","a3","a4","_c8","$implicit","_c9","left","width","_c10","_c11","display","TreeTable_div_2_i_2_Template","rf","ctx","ɵɵelement","ctx_r0","ɵɵnextContext","ɵɵclassMap","loadingIcon","TreeTable_div_2_ng_container_3_SpinnerIcon_1_Template","ɵɵproperty","TreeTable_div_2_ng_container_3_span_2_1_ng_template_0_Template","TreeTable_div_2_ng_container_3_span_2_1_Template","ɵɵtemplate","TreeTable_div_2_ng_container_3_span_2_Template","ɵɵelementStart","ɵɵelementEnd","ɵɵadvance","loadingIconTemplate","TreeTable_div_2_ng_container_3_Template","ɵɵelementContainerStart","ɵɵelementContainerEnd","TreeTable_div_2_Template","TreeTable_div_3_ng_container_1_Template","ɵɵelementContainer","TreeTable_div_3_Template","captionTemplate","TreeTable_p_paginator_4_1_ng_template_0_ng_container_0_Template","TreeTable_p_paginator_4_1_ng_template_0_Template","paginatorFirstPageLinkIconTemplate","TreeTable_p_paginator_4_1_Template","TreeTable_p_paginator_4_2_ng_template_0_ng_container_0_Template","TreeTable_p_paginator_4_2_ng_template_0_Template","paginatorPreviousPageLinkIconTemplate","TreeTable_p_paginator_4_2_Template","TreeTable_p_paginator_4_3_ng_template_0_ng_container_0_Template","TreeTable_p_paginator_4_3_ng_template_0_Template","paginatorLastPageLinkIconTemplate","TreeTable_p_paginator_4_3_Template","TreeTable_p_paginator_4_4_ng_template_0_ng_container_0_Template","TreeTable_p_paginator_4_4_ng_template_0_Template","paginatorNextPageLinkIconTemplate","TreeTable_p_paginator_4_4_Template","TreeTable_p_paginator_4_Template","_r2","ɵɵgetCurrentView","ɵɵlistener","TreeTable_p_paginator_4_Template_p_paginator_onPageChange_0_listener","$event","ɵɵrestoreView","ɵɵresetView","onPageChange","rows","first","totalRecords","pageLinks","alwaysShowPaginator","rowsPerPageOptions","paginatorLeftTemplate","paginatorRightTemplate","paginatorDropdownAppendTo","currentPageReportTemplate","showFirstLastIcon","paginatorDropdownItemTemplate","showCurrentPageReport","showJumpToPageDropdown","showPageLinks","paginatorStyleClass","paginatorLocale","TreeTable_div_5_ng_container_3_Template","TreeTable_div_5_ng_container_5_Template","TreeTable_div_5_ng_container_8_Template","TreeTable_div_5_Template","tableStyleClass","tableStyle","colGroupTemplate","ɵɵpureFunction1","columns","headerTemplate","bodyTemplate","footerTemplate","TreeTable_div_6_div_1_Template","frozenColumns","frozenWidth","scrollHeight","TreeTable_div_6_Template","frozenBodyTemplate","ɵɵpureFunction2","TreeTable_p_paginator_7_1_ng_template_0_ng_container_0_Template","TreeTable_p_paginator_7_1_ng_template_0_Template","TreeTable_p_paginator_7_1_Template","TreeTable_p_paginator_7_2_ng_template_0_ng_container_0_Template","TreeTable_p_paginator_7_2_ng_template_0_Template","TreeTable_p_paginator_7_2_Template","TreeTable_p_paginator_7_3_ng_template_0_ng_container_0_Template","TreeTable_p_paginator_7_3_ng_template_0_Template","TreeTable_p_paginator_7_3_Template","TreeTable_p_paginator_7_4_ng_template_0_ng_container_0_Template","TreeTable_p_paginator_7_4_ng_template_0_Template","TreeTable_p_paginator_7_4_Template","TreeTable_p_paginator_7_Template","_r3","TreeTable_p_paginator_7_Template_p_paginator_onPageChange_0_listener","TreeTable_div_8_ng_container_1_Template","TreeTable_div_8_Template","summaryTemplate","TreeTable_div_9_Template","ɵɵpureFunction0","TreeTable_span_10_ArrowDownIcon_2_Template","TreeTable_span_10_3_ng_template_0_Template","TreeTable_span_10_3_Template","TreeTable_span_10_Template","reorderIndicatorUpIconTemplate","TreeTable_span_11_ArrowUpIcon_2_Template","TreeTable_span_11_3_ng_template_0_Template","TreeTable_span_11_3_Template","TreeTable_span_11_Template","reorderIndicatorDownIconTemplate","_c12","_c13","node","rowData","_c14","frozen","TTBody_ng_template_0_ng_container_0_ng_container_1_Template","TTBody_ng_template_0_ng_container_0_Template","serializedNode_r1","ctx_r1","template","ɵɵpureFunction4","data","TTBody_ng_template_0_Template","visible","TTBody_ng_container_1_ng_container_1_Template","TTBody_ng_container_1_Template","tt","emptyMessageTemplate","_c15","_c16","_c17","_c18","_c19","_c20","_c21","_c22","_c23","_c24","_c25","height","_c26","options","_c27","_c28","_c29","_c30","TTScrollableView_ng_container_5_Template","TTScrollableView_ng_container_7_Template","TTScrollableView_p_scroller_8_ng_template_2_ng_container_0_Template","TTScrollableView_p_scroller_8_ng_template_2_Template","items_r3","scrollerOptions_r4","buildInItems_r5","ɵɵreference","TTScrollableView_p_scroller_8_ng_container_3_ng_template_1_ng_container_0_Template","TTScrollableView_p_scroller_8_ng_container_3_ng_template_1_Template","scrollerOptions_r6","loaderTemplate","TTScrollableView_p_scroller_8_ng_container_3_Template","TTScrollableView_p_scroller_8_Template","_r1","TTScrollableView_p_scroller_8_Template_p_scroller_onLazyLoad_0_listener","onLazyItemLoad","ɵɵstyleMap","undefined","serializedValue","virtualScrollItemSize","_virtualRowHeight","lazy","virtualScrollOptions","TTScrollableView_ng_container_9_ng_container_3_Template","TTScrollableView_ng_container_9_Template","TTScrollableView_ng_template_10_ng_container_2_Template","TTScrollableView_ng_template_10_div_4_Template","TTScrollableView_ng_template_10_Template","items_r7","scrollerOptions_r8","contentStyleClass","getMergedTableStyles","contentStyle","frozenColGroupTemplate","TTScrollableView_div_12_ng_container_5_Template","TTScrollableView_div_12_ng_container_7_Template","TTScrollableView_div_12_Template","frozenFooterTemplate","TTSortIcon_ng_container_0_SortAltIcon_1_Template","TTSortIcon_ng_container_0_SortAmountUpAltIcon_2_Template","TTSortIcon_ng_container_0_SortAmountDownIcon_3_Template","TTSortIcon_ng_container_0_Template","sortOrder","TTSortIcon_span_1_1_ng_template_0_Template","TTSortIcon_span_1_1_Template","TTSortIcon_span_1_Template","sortIconTemplate","_c31","_c32","_c33","partialSelected","TTCheckbox_ng_container_5_CheckIcon_1_Template","TTCheckbox_ng_container_5_MinusIcon_2_Template","TTCheckbox_ng_container_5_Template","checked","partialChecked","TTCheckbox_span_6_1_ng_template_0_Template","TTCheckbox_span_6_1_Template","TTCheckbox_span_6_Template","checkboxIconTemplate","_c34","_c35","_c36","TTHeaderCheckbox_ng_container_6_CheckIcon_1_Template","TTHeaderCheckbox_ng_container_6_Template","ctx_r2","TTHeaderCheckbox_span_7_1_ng_template_0_Template","TTHeaderCheckbox_span_7_1_Template","TTHeaderCheckbox_span_7_Template","headerCheckboxIconTemplate","TreeTableCellEditor_ng_container_0_ng_container_1_Template","TreeTableCellEditor_ng_container_0_Template","inputTemplate","TreeTableCellEditor_ng_container_1_ng_container_1_Template","TreeTableCellEditor_ng_container_1_Template","outputTemplate","_c37","visibility","TreeTableToggler_ng_container_1_ChevronDownIcon_1_Template","ɵɵattribute","TreeTableToggler_ng_container_1_ChevronRightIcon_2_Template","TreeTableToggler_ng_container_1_Template","rowNode","expanded","TreeTableToggler_2_ng_template_0_Template","TreeTableToggler_2_Template","TreeTableService","sortSource","selectionSource","contextMenuSource","uiUpdateSource","totalRecordsSource","sortSource$","asObservable","selectionSource$","contextMenuSource$","uiUpdateSource$","totalRecordsSource$","onSort","sortMeta","next","onSelectionChange","onContextMenu","onUIUpdate","value","onTotalRecordsChange","ɵfac","TreeTableService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","ɵsetClassMetadata","type","TreeTable","document","renderer","el","cd","zone","tableService","filterService","config","style","styleClass","autoLayout","lazyLoadOnInit","paginator","paginatorPosition","defaultSortOrder","sortMode","resetPageOnSort","customSort","selectionMode","contextMenuSelection","contextMenuSelectionMode","dataKey","metaKeySelection","compareSelectionBy","rowHover","loading","showLoader","scrollable","virtualScroll","virtualScrollDelay","resizableColumns","columnResizeMode","reorderableColumns","contextMenu","rowTrackBy","index","item","filters","globalFilterFields","filterDelay","filterMode","filterLocale","_totalRecords","val","sortField","_sortField","_sortOrder","multiSortMeta","_multiSortMeta","selection","_selection","_value","virtualRowHeight","console","warn","selectionKeys","_selectionKeys","selectionKeysChange","emit","selectionChange","contextMenuSelectionChange","onFilter","onNodeExpand","onNodeCollapse","onPage","onLazyLoad","sortFunction","onColResize","onColReorder","onNodeSelect","onNodeUnselect","onContextMenuSelect","onHeaderCheckboxToggle","onEditInit","onEditComplete","onEditCancel","containerViewChild","resizeHelperViewChild","reorderIndicatorUpViewChild","reorderIndicatorDownViewChild","tableViewChild","scrollableViewChild","scrollableFrozenViewChild","templates","filteredNodes","filterTimeout","frozenHeaderTemplate","togglerIconTemplate","lastResizerHelperX","reorderIconWidth","reorderIconHeight","draggedColumn","dropPosition","preventSelectionSetterPropagation","selectedKeys","rowTouched","editingCell","editingCellData","editingCellField","editingCellClick","documentEditListener","initialized","toggleRowIndex","ngOnInit","createLazyLoadMetadata","ngAfterContentInit","forEach","getType","constructor","ngOnChanges","simpleChange","currentValue","length","sortSingle","sortMultiple","hasFilter","_filter","updateSerializedValue","updateselectedKeys","serializePageNodes","serializeNodes","parent","nodes","level","push","children","i","Array","isArray","String","resolveFieldData","event","resetScrollTop","sort","originalEvent","field","metaKey","ctrlKey","getSortMeta","order","sortNodes","mode","node1","node2","value1","value2","result","localeCompare","numeric","sortMultipleNodes","multisortmeta","multisortField","isEmpty","isSorted","sorted","globalFilter","forceUpdate","detectChanges","last","scrollToVirtualIndex","scrollTo","top","getBlockableElement","nativeElement","onColumnResizeBegin","containerLeft","getOffset","pageX","scrollLeft","preventDefault","onColumnResize","addClass","offsetHeight","onColumnResizeEnd","column","delta","offsetLeft","columnWidth","offsetWidth","newColumnWidth","minWidth","parseInt","nextColumn","nextElementSibling","offsetParent","nextColumnWidth","nextColumnMinWidth","scrollableView","findParentScrollableView","scrollableBodyTable","findSingle","scrollableHeaderTable","scrollableFooterTable","resizeColumnIndex","resizeColGroup","scrollableBody","scrollableHeader","scrollableFooter","scrollableBodyTableWidth","scrollableHeaderTableWidth","isContainerInViewport","setWidth","container","table","calculateScrollbarWidth","containerWidth","element","removeClass","parentElement","hasClass","colGroup","nodeName","col","nextCol","onColumnDragStart","columnElement","getHiddenElementOuterWidth","getHiddenElementOuterHeight","dataTransfer","setData","onColumnDragEnter","dropHeader","containerOffset","dropHeaderOffset","targetLeft","targetTop","columnCenter","Math","ceil","dropEffect","onColumnDragLeave","onColumnDrop","dropColumn","dragIndex","indexWithinGroup","dropIndex","allowDrop","reorderArray","draggable","handleRowClick","targetNode","target","selected","isSelected","metaSelection","dataKeyValue","keyboardEvent","isSingleSelectionMode","selectionIndex","findIndexInSelection","filter","isMultipleSelectionMode","rowIndex","handleRowTouchEnd","handleRowRightClick","show","toggleNodeWithCheckbox","propagateSelectionDown","propagateSelectionUp","toggleNodesWithCheckbox","check","slice","toggleAll","propagateDown","select","selectedChildCount","childPartialSelected","child","hasOwnProperty","equals","isNodeSelected","nodeKey","isNodePartialSelected","toggleCheckbox","propagateUp","checkedChildCount","matchMode","clearTimeout","isFilterBlank","setTimeout","filterGlobal","trim","globalFilterFieldsArray","Error","isStrictMode","isValueChanged","copyNode","localMatch","globalMatch","paramsWithoutNode","prop","filterMeta","filterField","filterValue","filterMatchMode","filterConstraint","findFilteredNodes","isFilterMatched","copyNodeForGlobal","matches","markForCheck","filteredValue","matched","childNodes","childNode","copyChildNode","filterOptions","isMatched","some","globalFilterField","isNodeLeaf","leaf","empty","reset","updateEditingCell","cell","bindDocumentEditListener","isEditingCellValid","find","listen","unbindDocumentEditListener","ngOnDestroy","TreeTable_Factory","ɵɵdirectiveInject","Renderer2","ElementRef","ChangeDetectorRef","NgZone","FilterService","PrimeNGConfig","ɵcmp","ɵɵdefineComponent","selectors","contentQueries","TreeTable_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","viewQuery","TreeTable_Query","ɵɵviewQuery","hostAttrs","inputs","ɵɵInputFlags","HasDecoratorInputTransform","outputs","features","ɵɵProvidersFeature","ɵɵInputTransformsFeature","ɵɵNgOnChangesFeature","decls","vars","consts","TreeTable_Template","ɵɵpureFunction5","dependencies","NgClass","NgIf","NgTemplateOutlet","NgStyle","Paginator","TTScrollableView","TTBody","styles","encapsulation","args","selector","providers","None","host","class","Document","decorators","transform","treeTableService","serializedNodes","scrollerOptions","subscription","subscribe","getScrollerOption","option","getRowIndex","getItemOptions","unsubscribe","TTBody_Factory","attrs","TTBody_Template","NgForOf","platformId","scrollHeaderViewChild","scrollHeaderBoxViewChild","scrollBodyViewChild","scrollTableViewChild","scrollLoadingTableViewChild","scrollFooterViewChild","scrollFooterBoxViewChild","scrollableAlignerViewChild","scroller","headerScrollListener","bodyScrollListener","footerScrollListener","frozenSiblingBody","totalRecordsSubscription","_scrollHeight","preventBodyScrollPropagation","includes","log","ngAfterViewInit","frozenView","previousElementSibling","scrollBarWidth","paddingRight","calculateScrollbarHeight","bindEvents","runOutsideAngular","onHeaderScroll","bind","onFooterScroll","getElementRef","onBodyScroll","unbindEvents","marginLeft","scrollTop","scrollToIndex","TTScrollableView_Factory","TTScrollableView_Query","TTScrollableView_Template","ɵɵtemplateRefExtractor","Scroller","TTSortableColumn","ttSortableColumnDisabled","ariaSorted","isEnabled","updateSortState","onClick","clearSelection","onEnterKey","TTSortableColumn_Factory","ɵdir","ɵɵdefineDirective","hostVars","hostBindings","TTSortableColumn_HostBindings","TTSortableColumn_click_HostBindingHandler","TTSortableColumn_keydown_enter_HostBindingHandler","ɵɵclassProp","TTSortIcon","ariaLabelDesc","ariaLabelAsc","TTSortIcon_Factory","TTSortIcon_Template","changeDetection","OnPush","TTResizableColumn","ttResizableColumnDisabled","resizer","resizerMouseDownListener","documentMouseMoveListener","documentMouseUpListener","createElement","appendChild","onMouseDown","bindDocumentEvents","onDocumentMouseMove","onDocumentMouseUp","unbindDocumentEvents","TTResizableColumn_Factory","TTReorderableColumn","ttReorderableColumnDisabled","dragStartListener","dragOverListener","dragEnterListener","dragLeaveListener","mouseDownListener","onDragStart","onDragEnter","onDragLeave","onDragOver","onDrop","TTReorderableColumn_Factory","TTReorderableColumn_HostBindings","TTReorderableColumn_drop_HostBindingHandler","TTSelectableRow","ttSelectableRowDisabled","onKeyDown","code","onTouchEnd","TTSelectableRow_Factory","TTSelectableRow_HostBindings","TTSelectableRow_click_HostBindingHandler","TTSelectableRow_keydown_HostBindingHandler","TTSelectableRow_touchend_HostBindingHandler","TTSelectableRowDblClick","TTSelectableRowDblClick_Factory","TTSelectableRowDblClick_HostBindings","TTSelectableRowDblClick_dblclick_HostBindingHandler","TTContextMenuRow","ttContextMenuRowDisabled","focus","TTContextMenuRow_Factory","TTContextMenuRow_HostBindings","TTContextMenuRow_contextmenu_HostBindingHandler","TTCheckbox","disabled","focused","_check","onFocus","onBlur","TTCheckbox_Factory","TTCheckbox_Template","TTCheckbox_Template_div_click_0_listener","TTCheckbox_Template_input_focus_2_listener","TTCheckbox_Template_input_blur_2_listener","inputStyle","TTHeaderCheckbox","boxViewChild","selectionChangeSubscription","valueChangeSubscription","updateCheckedState","TTHeaderCheckbox_Factory","TTHeaderCheckbox_Query","TTHeaderCheckbox_Template","TTHeaderCheckbox_Template_div_click_0_listener","cb_r2","TTHeaderCheckbox_Template_input_focus_2_listener","TTHeaderCheckbox_Template_input_blur_2_listener","ɵɵpureFunction3","TTEditableColumn","ttEditableColumnDisabled","openCell","focusable","closeEditingCell","shiftKey","moveToPreviousCell","moveToNextCell","findCell","currentCell","row","targetCell","findPreviousEditableColumn","invokeElementMethod","findNextEditableColumn","prevCell","previousRow","lastElementChild","nextCell","nextRow","firstElementChild","TTEditableColumn_Factory","TTEditableColumn_HostBindings","TTEditableColumn_click_HostBindingHandler","TTEditableColumn_keydown_HostBindingHandler","TreeTableCellEditor","editableColumn","TreeTableCellEditor_Factory","TreeTableCellEditor_ContentQueries","TreeTableCellEditor_Template","TTRow","onArrowDownKey","onArrowUpKey","onArrowRightKey","onArrowLeftKey","onTabKey","onHomeKey","onEndKey","focusRowChange","currentTarget","prevRow","isHiddenIcon","expand","tabIndex","expandedRows","lastExpandedRow","collapse","restoreFocus","firstElement","lastElement","parentNode","isNotEmpty","hasSelectedRow","getAttribute","selectedNodes","firstFocusableRow","currentFocusedRow","lastVisibleDescendant","r","isSameNode","TTRow_Factory","TTRow_HostBindings","TTRow_keydown_HostBindingHandler","TreeTableToggler","toggleButtonAriaLabel","translation","aria","collapseRow","expandRow","TreeTableToggler_Factory","TreeTableToggler_Template","TreeTableToggler_Template_button_click_0_listener","Ripple","TreeTableModule","TreeTableModule_Factory","ɵmod","ɵɵdefineNgModule","declarations","imports","exports","ɵinj","ɵɵdefineInjector"],"sources":["D:/Maithil/website-cms/node_modules/primeng/fesm2022/primeng-treetable.mjs"],"sourcesContent":["import * as i2 from '@angular/common';\nimport { DOCUMENT, isPlatformBrowser, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, booleanAttribute, numberAttribute, Component, ViewEncapsulation, Inject, Input, Output, ViewChild, ContentChildren, PLATFORM_ID, Directive, HostListener, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport * as i1 from 'primeng/api';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport { DomHandler } from 'primeng/dom';\nimport { ArrowDownIcon } from 'primeng/icons/arrowdown';\nimport { ArrowUpIcon } from 'primeng/icons/arrowup';\nimport { CheckIcon } from 'primeng/icons/check';\nimport { ChevronDownIcon } from 'primeng/icons/chevrondown';\nimport { ChevronRightIcon } from 'primeng/icons/chevronright';\nimport { MinusIcon } from 'primeng/icons/minus';\nimport { SortAltIcon } from 'primeng/icons/sortalt';\nimport { SortAmountDownIcon } from 'primeng/icons/sortamountdown';\nimport { SortAmountUpAltIcon } from 'primeng/icons/sortamountupalt';\nimport { SpinnerIcon } from 'primeng/icons/spinner';\nimport * as i3 from 'primeng/paginator';\nimport { PaginatorModule } from 'primeng/paginator';\nimport * as i5 from 'primeng/ripple';\nimport { RippleModule } from 'primeng/ripple';\nimport * as i4 from 'primeng/scroller';\nimport { ScrollerModule } from 'primeng/scroller';\nimport { ObjectUtils } from 'primeng/utils';\nimport { Subject } from 'rxjs';\n\nclass TreeTableService {\n    sortSource = new Subject();\n    selectionSource = new Subject();\n    contextMenuSource = new Subject();\n    uiUpdateSource = new Subject();\n    totalRecordsSource = new Subject();\n    sortSource$ = this.sortSource.asObservable();\n    selectionSource$ = this.selectionSource.asObservable();\n    contextMenuSource$ = this.contextMenuSource.asObservable();\n    uiUpdateSource$ = this.uiUpdateSource.asObservable();\n    totalRecordsSource$ = this.totalRecordsSource.asObservable();\n    onSort(sortMeta) {\n        this.sortSource.next(sortMeta);\n    }\n    onSelectionChange() {\n        this.selectionSource.next(null);\n    }\n    onContextMenu(node) {\n        this.contextMenuSource.next(node);\n    }\n    onUIUpdate(value) {\n        this.uiUpdateSource.next(value);\n    }\n    onTotalRecordsChange(value) {\n        this.totalRecordsSource.next(value);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TreeTableService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TreeTableService });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TreeTableService, decorators: [{\n            type: Injectable\n        }] });\n/**\n * TreeTable is used to display hierarchical data in tabular format.\n * @group Components\n */\nclass TreeTable {\n    document;\n    renderer;\n    el;\n    cd;\n    zone;\n    tableService;\n    filterService;\n    config;\n    /**\n     * An array of objects to represent dynamic columns.\n     * @group Props\n     */\n    columns;\n    /**\n     * Inline style of the component.\n     * @group Props\n     */\n    style;\n    /**\n     * Style class of the component.\n     * @group Props\n     */\n    styleClass;\n    /**\n     * Inline style of the table.\n     * @group Props\n     */\n    tableStyle;\n    /**\n     * Style class of the table.\n     * @group Props\n     */\n    tableStyleClass;\n    /**\n     * Whether the cell widths scale according to their content or not.\n     * @group Props\n     */\n    autoLayout;\n    /**\n     * Defines if data is loaded and interacted with in lazy manner.\n     * @group Props\n     */\n    lazy = false;\n    /**\n     * Whether to call lazy loading on initialization.\n     * @group Props\n     */\n    lazyLoadOnInit = true;\n    /**\n     * When specified as true, enables the pagination.\n     * @group Props\n     */\n    paginator;\n    /**\n     * Number of rows to display per page.\n     * @group Props\n     */\n    rows;\n    /**\n     * Index of the first row to be displayed.\n     * @group Props\n     */\n    first = 0;\n    /**\n     * Number of page links to display in paginator.\n     * @group Props\n     */\n    pageLinks = 5;\n    /**\n     * Array of integer/object values to display inside rows per page dropdown of paginator\n     * @group Props\n     */\n    rowsPerPageOptions;\n    /**\n     * Whether to show it even there is only one page.\n     * @group Props\n     */\n    alwaysShowPaginator = true;\n    /**\n     * Position of the paginator.\n     * @group Props\n     */\n    paginatorPosition = 'bottom';\n    /**\n     * Custom style class for paginator\n     * @group Props\n     */\n    paginatorStyleClass;\n    /**\n     * Target element to attach the paginator dropdown overlay, valid values are \"body\" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\"mydiv\" for a div element having #mydiv as variable name).\n     * @group Props\n     */\n    paginatorDropdownAppendTo;\n    /**\n     * Template of the current page report element. Available placeholders are {currentPage},{totalPages},{rows},{first},{last} and {totalRecords}\n     * @group Props\n     */\n    currentPageReportTemplate = '{currentPage} of {totalPages}';\n    /**\n     * Whether to display current page report.\n     * @group Props\n     */\n    showCurrentPageReport;\n    /**\n     * Whether to display a dropdown to navigate to any page.\n     * @group Props\n     */\n    showJumpToPageDropdown;\n    /**\n     * When enabled, icons are displayed on paginator to go first and last page.\n     * @group Props\n     */\n    showFirstLastIcon = true;\n    /**\n     * Whether to show page links.\n     * @group Props\n     */\n    showPageLinks = true;\n    /**\n     * Sort order to use when an unsorted column gets sorted by user interaction.\n     * @group Props\n     */\n    defaultSortOrder = 1;\n    /**\n     * Defines whether sorting works on single column or on multiple columns.\n     * @group Props\n     */\n    sortMode = 'single';\n    /**\n     * When true, resets paginator to first page after sorting.\n     * @group Props\n     */\n    resetPageOnSort = true;\n    /**\n     * Whether to use the default sorting or a custom one using sortFunction.\n     * @group Props\n     */\n    customSort;\n    /**\n     * Specifies the selection mode, valid values are \"single\" and \"multiple\".\n     * @group Props\n     */\n    selectionMode;\n    /**\n     * Selected row with a context menu.\n     * @group Props\n     */\n    contextMenuSelection;\n    /**\n     * Mode of the contet menu selection.\n     * @group Props\n     */\n    contextMenuSelectionMode = 'separate';\n    /**\n     * A property to uniquely identify a record in data.\n     * @group Props\n     */\n    dataKey;\n    /**\n     * Defines whether metaKey is should be considered for the selection. On touch enabled devices, metaKeySelection is turned off automatically.\n     * @group Props\n     */\n    metaKeySelection = false;\n    /**\n     * Algorithm to define if a row is selected, valid values are \"equals\" that compares by reference and \"deepEquals\" that compares all fields.\n     * @group Props\n     */\n    compareSelectionBy = 'deepEquals';\n    /**\n     * Adds hover effect to rows without the need for selectionMode.\n     * @group Props\n     */\n    rowHover;\n    /**\n     * Displays a loader to indicate data load is in progress.\n     * @group Props\n     */\n    loading;\n    /**\n     * The icon to show while indicating data load is in progress.\n     * @group Props\n     */\n    loadingIcon;\n    /**\n     * Whether to show the loading mask when loading property is true.\n     * @group Props\n     */\n    showLoader = true;\n    /**\n     * When specifies, enables horizontal and/or vertical scrolling.\n     * @group Props\n     */\n    scrollable;\n    /**\n     * Height of the scroll viewport in fixed pixels or the \"flex\" keyword for a dynamic size.\n     * @group Props\n     */\n    scrollHeight;\n    /**\n     * Whether the data should be loaded on demand during scroll.\n     * @group Props\n     */\n    virtualScroll;\n    /**\n     * Height of a row to use in calculations of virtual scrolling.\n     * @group Props\n     */\n    virtualScrollItemSize;\n    /**\n     * Whether to use the scroller feature. The properties of scroller component can be used like an object in it.\n     * @group Props\n     */\n    virtualScrollOptions;\n    /**\n     * The delay (in milliseconds) before triggering the virtual scroll. This determines the time gap between the user's scroll action and the actual rendering of the next set of items in the virtual scroll.\n     * @group Props\n     */\n    virtualScrollDelay = 150;\n    /**\n     * Width of the frozen columns container.\n     * @group Props\n     */\n    frozenWidth;\n    /**\n     * An array of objects to represent dynamic columns that are frozen.\n     * @group Props\n     */\n    frozenColumns;\n    /**\n     * When enabled, columns can be resized using drag and drop.\n     * @group Props\n     */\n    resizableColumns;\n    /**\n     * Defines whether the overall table width should change on column resize, valid values are \"fit\" and \"expand\".\n     * @group Props\n     */\n    columnResizeMode = 'fit';\n    /**\n     * When enabled, columns can be reordered using drag and drop.\n     * @group Props\n     */\n    reorderableColumns;\n    /**\n     * Local ng-template varilable of a ContextMenu.\n     * @group Props\n     */\n    contextMenu;\n    /**\n     * Function to optimize the dom operations by delegating to ngForTrackBy, default algorithm checks for object identity.\n     * @group Props\n     */\n    rowTrackBy = (index, item) => item;\n    /**\n     * An array of FilterMetadata objects to provide external filters.\n     * @group Props\n     */\n    filters = {};\n    /**\n     * An array of fields as string to use in global filtering.\n     * @group Props\n     */\n    globalFilterFields;\n    /**\n     * Delay in milliseconds before filtering the data.\n     * @group Props\n     */\n    filterDelay = 300;\n    /**\n     * Mode for filtering valid values are \"lenient\" and \"strict\". Default is lenient.\n     * @group Props\n     */\n    filterMode = 'lenient';\n    /**\n     * Locale to use in filtering. The default locale is the host environment's current locale.\n     * @group Props\n     */\n    filterLocale;\n    /**\n     * Locale to be used in paginator formatting.\n     * @group Props\n     */\n    paginatorLocale;\n    /**\n     * Number of total records, defaults to length of value when not defined.\n     * @group Props\n     */\n    get totalRecords() {\n        return this._totalRecords;\n    }\n    set totalRecords(val) {\n        this._totalRecords = val;\n        this.tableService.onTotalRecordsChange(this._totalRecords);\n    }\n    /**\n     * Name of the field to sort data by default.\n     * @group Props\n     */\n    get sortField() {\n        return this._sortField;\n    }\n    set sortField(val) {\n        this._sortField = val;\n    }\n    /**\n     * Order to sort when default sorting is enabled.\n     * @defaultValue 1\n     * @group Props\n     */\n    get sortOrder() {\n        return this._sortOrder;\n    }\n    set sortOrder(val) {\n        this._sortOrder = val;\n    }\n    /**\n     * An array of SortMeta objects to sort the data by default in multiple sort mode.\n     * @defaultValue null\n     * @group Props\n     */\n    get multiSortMeta() {\n        return this._multiSortMeta;\n    }\n    set multiSortMeta(val) {\n        this._multiSortMeta = val;\n    }\n    /**\n     * Selected row in single mode or an array of values in multiple mode.\n     * @defaultValue null\n     * @group Props\n     */\n    get selection() {\n        return this._selection;\n    }\n    set selection(val) {\n        this._selection = val;\n    }\n    /**\n     * An array of objects to display.\n     * @defaultValue null\n     * @group Props\n     */\n    get value() {\n        return this._value;\n    }\n    set value(val) {\n        this._value = val;\n    }\n    /**\n     * Indicates the height of rows to be scrolled.\n     * @defaultValue 28\n     * @group Props\n     * @deprecated use virtualScrollItemSize property instead.\n     */\n    get virtualRowHeight() {\n        return this._virtualRowHeight;\n    }\n    set virtualRowHeight(val) {\n        this._virtualRowHeight = val;\n        console.warn('The virtualRowHeight property is deprecated, use virtualScrollItemSize property instead.');\n    }\n    /**\n     * A map of keys to control the selection state.\n     * @group Props\n     */\n    get selectionKeys() {\n        return this._selectionKeys;\n    }\n    set selectionKeys(value) {\n        this._selectionKeys = value;\n        this.selectionKeysChange.emit(this._selectionKeys);\n    }\n    /**\n     * Callback to invoke on selected node change.\n     * @param {TreeTableNode} object - Node instance.\n     * @group Emits\n     */\n    selectionChange = new EventEmitter();\n    /**\n     * Callback to invoke on context menu selection change.\n     * @param {TreeTableNode} object - Node instance.\n     * @group Emits\n     */\n    contextMenuSelectionChange = new EventEmitter();\n    /**\n     * Callback to invoke when data is filtered.\n     * @param {TreeTableFilterEvent} event - Custom filter event.\n     * @group Emits\n     */\n    onFilter = new EventEmitter();\n    /**\n     * Callback to invoke when a node is expanded.\n     * @param {TreeTableNodeExpandEvent} event - Node expand event.\n     * @group Emits\n     */\n    onNodeExpand = new EventEmitter();\n    /**\n     * Callback to invoke when a node is collapsed.\n     * @param {TreeTableNodeCollapseEvent} event - Node collapse event.\n     * @group Emits\n     */\n    onNodeCollapse = new EventEmitter();\n    /**\n     * Callback to invoke when pagination occurs.\n     * @param {TreeTablePaginatorState} object - Paginator state.\n     * @group Emits\n     */\n    onPage = new EventEmitter();\n    /**\n     * Callback to invoke when a column gets sorted.\n     * @param {Object} Object - Sort data.\n     * @group Emits\n     */\n    onSort = new EventEmitter();\n    /**\n     * Callback to invoke when paging, sorting or filtering happens in lazy mode.\n     * @param {TreeTableLazyLoadEvent} event - Custom lazy load event.\n     * @group Emits\n     */\n    onLazyLoad = new EventEmitter();\n    /**\n     * An event emitter to invoke on custom sorting, refer to sorting section for details.\n     * @param {TreeTableSortEvent} event - Custom sort event.\n     * @group Emits\n     */\n    sortFunction = new EventEmitter();\n    /**\n     * Callback to invoke when a column is resized.\n     * @param {TreeTableColResizeEvent} event - Custom column resize event.\n     * @group Emits\n     */\n    onColResize = new EventEmitter();\n    /**\n     * Callback to invoke when a column is reordered.\n     * @param {TreeTableColumnReorderEvent} event - Custom column reorder.\n     * @group Emits\n     */\n    onColReorder = new EventEmitter();\n    /**\n     * Callback to invoke when a node is selected.\n     * @param {TreeTableNode} object - Node instance.\n     * @group Emits\n     */\n    onNodeSelect = new EventEmitter();\n    /**\n     * Callback to invoke when a node is unselected.\n     * @param {TreeTableNodeUnSelectEvent} event - Custom node unselect event.\n     * @group Emits\n     */\n    onNodeUnselect = new EventEmitter();\n    /**\n     * Callback to invoke when a node is selected with right click.\n     * @param {TreeTableContextMenuSelectEvent} event - Custom context menu select event.\n     * @group Emits\n     */\n    onContextMenuSelect = new EventEmitter();\n    /**\n     * Callback to invoke when state of header checkbox changes.\n     * @param {TreeTableHeaderCheckboxToggleEvent} event - Custom checkbox toggle event.\n     * @group Emits\n     */\n    onHeaderCheckboxToggle = new EventEmitter();\n    /**\n     * Callback to invoke when a cell switches to edit mode.\n     * @param {TreeTableEditEvent} event - Custom edit event.\n     * @group Emits\n     */\n    onEditInit = new EventEmitter();\n    /**\n     * Callback to invoke when cell edit is completed.\n     * @param {TreeTableEditEvent} event - Custom edit event.\n     * @group Emits\n     */\n    onEditComplete = new EventEmitter();\n    /**\n     * Callback to invoke when cell edit is cancelled with escape key.\n     * @param {TreeTableEditEvent} event - Custom edit event.\n     * @group Emits\n     */\n    onEditCancel = new EventEmitter();\n    /**\n     * Callback to invoke when selectionKeys are changed.\n     * @param {Object} object - updated value of the selectionKeys.\n     * @group Emits\n     */\n    selectionKeysChange = new EventEmitter();\n    containerViewChild;\n    resizeHelperViewChild;\n    reorderIndicatorUpViewChild;\n    reorderIndicatorDownViewChild;\n    tableViewChild;\n    scrollableViewChild;\n    scrollableFrozenViewChild;\n    templates;\n    _value = [];\n    _virtualRowHeight = 28;\n    _selectionKeys;\n    serializedValue;\n    _totalRecords = 0;\n    _multiSortMeta;\n    _sortField;\n    _sortOrder = 1;\n    filteredNodes;\n    filterTimeout;\n    colGroupTemplate;\n    captionTemplate;\n    headerTemplate;\n    bodyTemplate;\n    footerTemplate;\n    summaryTemplate;\n    emptyMessageTemplate;\n    paginatorLeftTemplate;\n    paginatorRightTemplate;\n    paginatorDropdownItemTemplate;\n    frozenHeaderTemplate;\n    frozenBodyTemplate;\n    frozenFooterTemplate;\n    frozenColGroupTemplate;\n    loadingIconTemplate;\n    reorderIndicatorUpIconTemplate;\n    reorderIndicatorDownIconTemplate;\n    sortIconTemplate;\n    checkboxIconTemplate;\n    headerCheckboxIconTemplate;\n    togglerIconTemplate;\n    paginatorFirstPageLinkIconTemplate;\n    paginatorLastPageLinkIconTemplate;\n    paginatorPreviousPageLinkIconTemplate;\n    paginatorNextPageLinkIconTemplate;\n    lastResizerHelperX;\n    reorderIconWidth;\n    reorderIconHeight;\n    draggedColumn;\n    dropPosition;\n    preventSelectionSetterPropagation;\n    _selection;\n    selectedKeys = {};\n    rowTouched;\n    editingCell;\n    editingCellData;\n    editingCellField;\n    editingCellClick;\n    documentEditListener;\n    initialized;\n    toggleRowIndex;\n    ngOnInit() {\n        if (this.lazy && this.lazyLoadOnInit && !this.virtualScroll) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        this.initialized = true;\n    }\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'caption':\n                    this.captionTemplate = item.template;\n                    break;\n                case 'header':\n                    this.headerTemplate = item.template;\n                    break;\n                case 'body':\n                    this.bodyTemplate = item.template;\n                    break;\n                case 'footer':\n                    this.footerTemplate = item.template;\n                    break;\n                case 'summary':\n                    this.summaryTemplate = item.template;\n                    break;\n                case 'colgroup':\n                    this.colGroupTemplate = item.template;\n                    break;\n                case 'emptymessage':\n                    this.emptyMessageTemplate = item.template;\n                    break;\n                case 'paginatorleft':\n                    this.paginatorLeftTemplate = item.template;\n                    break;\n                case 'paginatorright':\n                    this.paginatorRightTemplate = item.template;\n                    break;\n                case 'paginatordropdownitem':\n                    this.paginatorDropdownItemTemplate = item.template;\n                    break;\n                case 'frozenheader':\n                    this.frozenHeaderTemplate = item.template;\n                    break;\n                case 'frozenbody':\n                    this.frozenBodyTemplate = item.template;\n                    break;\n                case 'frozenfooter':\n                    this.frozenFooterTemplate = item.template;\n                    break;\n                case 'frozencolgroup':\n                    this.frozenColGroupTemplate = item.template;\n                    break;\n                case 'loadingicon':\n                    this.loadingIconTemplate = item.template;\n                    break;\n                case 'reorderindicatorupicon':\n                    this.reorderIndicatorUpIconTemplate = item.template;\n                    break;\n                case 'reorderindicatordownicon':\n                    this.reorderIndicatorDownIconTemplate = item.template;\n                    break;\n                case 'sorticon':\n                    this.sortIconTemplate = item.template;\n                    break;\n                case 'checkboxicon':\n                    this.checkboxIconTemplate = item.template;\n                    break;\n                case 'headercheckboxicon':\n                    this.headerCheckboxIconTemplate = item.template;\n                    break;\n                case 'togglericon':\n                    this.togglerIconTemplate = item.template;\n                    break;\n                case 'paginatorfirstpagelinkicon':\n                    this.paginatorFirstPageLinkIconTemplate = item.template;\n                    break;\n                case 'paginatorlastpagelinkicon':\n                    this.paginatorLastPageLinkIconTemplate = item.template;\n                    break;\n                case 'paginatorpreviouspagelinkicon':\n                    this.paginatorPreviousPageLinkIconTemplate = item.template;\n                    break;\n                case 'paginatornextpagelinkicon':\n                    this.paginatorNextPageLinkIconTemplate = item.template;\n                    break;\n            }\n        });\n    }\n    constructor(document, renderer, el, cd, zone, tableService, filterService, config) {\n        this.document = document;\n        this.renderer = renderer;\n        this.el = el;\n        this.cd = cd;\n        this.zone = zone;\n        this.tableService = tableService;\n        this.filterService = filterService;\n        this.config = config;\n    }\n    ngOnChanges(simpleChange) {\n        if (simpleChange.value) {\n            this._value = simpleChange.value.currentValue;\n            if (!this.lazy) {\n                this.totalRecords = this._value ? this._value.length : 0;\n                if (this.sortMode == 'single' && this.sortField)\n                    this.sortSingle();\n                else if (this.sortMode == 'multiple' && this.multiSortMeta)\n                    this.sortMultiple();\n                else if (this.hasFilter())\n                    //sort already filters\n                    this._filter();\n            }\n            this.updateSerializedValue();\n            this.tableService.onUIUpdate(this.value);\n        }\n        if (simpleChange.sortField) {\n            this._sortField = simpleChange.sortField.currentValue;\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if (!this.lazy || this.initialized) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n        if (simpleChange.sortOrder) {\n            this._sortOrder = simpleChange.sortOrder.currentValue;\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if (!this.lazy || this.initialized) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n        if (simpleChange.multiSortMeta) {\n            this._multiSortMeta = simpleChange.multiSortMeta.currentValue;\n            if (this.sortMode === 'multiple') {\n                this.sortMultiple();\n            }\n        }\n        if (simpleChange.selection) {\n            this._selection = simpleChange.selection.currentValue;\n            if (!this.preventSelectionSetterPropagation) {\n                this.updateselectedKeys();\n                this.tableService.onSelectionChange();\n            }\n            this.preventSelectionSetterPropagation = false;\n        }\n    }\n    updateSerializedValue() {\n        this.serializedValue = [];\n        if (this.paginator)\n            this.serializePageNodes();\n        else\n            this.serializeNodes(null, this.filteredNodes || this.value, 0, true);\n    }\n    serializeNodes(parent, nodes, level, visible) {\n        if (nodes && nodes.length) {\n            for (let node of nodes) {\n                node.parent = parent;\n                const rowNode = {\n                    node: node,\n                    parent: parent,\n                    level: level,\n                    visible: visible && (parent ? parent.expanded : true)\n                };\n                this.serializedValue.push(rowNode);\n                if (rowNode.visible && node.expanded) {\n                    this.serializeNodes(node, node.children, level + 1, rowNode.visible);\n                }\n            }\n        }\n    }\n    serializePageNodes() {\n        let data = this.filteredNodes || this.value;\n        this.serializedValue = [];\n        if (data && data.length) {\n            const first = this.lazy ? 0 : this.first;\n            for (let i = first; i < first + this.rows; i++) {\n                let node = data[i];\n                if (node) {\n                    this.serializedValue.push({\n                        node: node,\n                        parent: null,\n                        level: 0,\n                        visible: true\n                    });\n                    this.serializeNodes(node, node.children, 1, true);\n                }\n            }\n        }\n    }\n    updateselectedKeys() {\n        if (this.dataKey && this._selection) {\n            this.selectedKeys = {};\n            if (Array.isArray(this._selection)) {\n                for (let node of this._selection) {\n                    this.selectedKeys[String(ObjectUtils.resolveFieldData(node.data, this.dataKey))] = 1;\n                }\n            }\n            else {\n                this.selectedKeys[String(ObjectUtils.resolveFieldData(this._selection.data, this.dataKey))] = 1;\n            }\n        }\n    }\n    onPageChange(event) {\n        this.first = event.first;\n        this.rows = event.rows;\n        if (this.lazy)\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        else\n            this.serializePageNodes();\n        this.onPage.emit({\n            first: this.first,\n            rows: this.rows\n        });\n        this.tableService.onUIUpdate(this.value);\n        if (this.scrollable) {\n            this.resetScrollTop();\n        }\n    }\n    sort(event) {\n        let originalEvent = event.originalEvent;\n        if (this.sortMode === 'single') {\n            this._sortOrder = this.sortField === event.field ? this.sortOrder * -1 : this.defaultSortOrder;\n            this._sortField = event.field;\n            this.sortSingle();\n            if (this.resetPageOnSort && this.scrollable) {\n                this.resetScrollTop();\n            }\n        }\n        if (this.sortMode === 'multiple') {\n            let metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n            let sortMeta = this.getSortMeta(event.field);\n            if (sortMeta) {\n                if (!metaKey) {\n                    this._multiSortMeta = [{ field: event.field, order: sortMeta.order * -1 }];\n                    if (this.resetPageOnSort && this.scrollable) {\n                        this.resetScrollTop();\n                    }\n                }\n                else {\n                    sortMeta.order = sortMeta.order * -1;\n                }\n            }\n            else {\n                if (!metaKey || !this.multiSortMeta) {\n                    this._multiSortMeta = [];\n                    if (this.resetPageOnSort && this.scrollable) {\n                        this.resetScrollTop();\n                    }\n                }\n                this.multiSortMeta.push({ field: event.field, order: this.defaultSortOrder });\n            }\n            this.sortMultiple();\n        }\n    }\n    sortSingle() {\n        if (this.sortField && this.sortOrder) {\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                this.sortNodes(this.value);\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n            let sortMeta = {\n                field: this.sortField,\n                order: this.sortOrder\n            };\n            this.onSort.emit(sortMeta);\n            this.tableService.onSort(sortMeta);\n            this.updateSerializedValue();\n        }\n    }\n    sortNodes(nodes) {\n        if (!nodes || nodes.length === 0) {\n            return;\n        }\n        if (this.customSort) {\n            this.sortFunction.emit({\n                data: nodes,\n                mode: this.sortMode,\n                field: this.sortField,\n                order: this.sortOrder\n            });\n        }\n        else {\n            nodes.sort((node1, node2) => {\n                let value1 = ObjectUtils.resolveFieldData(node1.data, this.sortField);\n                let value2 = ObjectUtils.resolveFieldData(node2.data, this.sortField);\n                let result = null;\n                if (value1 == null && value2 != null)\n                    result = -1;\n                else if (value1 != null && value2 == null)\n                    result = 1;\n                else if (value1 == null && value2 == null)\n                    result = 0;\n                else if (typeof value1 === 'string' && typeof value2 === 'string')\n                    result = value1.localeCompare(value2, undefined, { numeric: true });\n                else\n                    result = value1 < value2 ? -1 : value1 > value2 ? 1 : 0;\n                return this.sortOrder * result;\n            });\n        }\n        for (let node of nodes) {\n            this.sortNodes(node.children);\n        }\n    }\n    sortMultiple() {\n        if (this.multiSortMeta) {\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                this.sortMultipleNodes(this.value);\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n            this.onSort.emit({\n                multisortmeta: this.multiSortMeta\n            });\n            this.updateSerializedValue();\n            this.tableService.onSort(this.multiSortMeta);\n        }\n    }\n    sortMultipleNodes(nodes) {\n        if (!nodes || nodes.length === 0) {\n            return;\n        }\n        if (this.customSort) {\n            this.sortFunction.emit({\n                data: this.value,\n                mode: this.sortMode,\n                multiSortMeta: this.multiSortMeta\n            });\n        }\n        else {\n            nodes.sort((node1, node2) => {\n                return this.multisortField(node1, node2, this.multiSortMeta, 0);\n            });\n        }\n        for (let node of nodes) {\n            this.sortMultipleNodes(node.children);\n        }\n    }\n    multisortField(node1, node2, multiSortMeta, index) {\n        if (ObjectUtils.isEmpty(this.multiSortMeta) || ObjectUtils.isEmpty(multiSortMeta[index])) {\n            return 0;\n        }\n        let value1 = ObjectUtils.resolveFieldData(node1.data, multiSortMeta[index].field);\n        let value2 = ObjectUtils.resolveFieldData(node2.data, multiSortMeta[index].field);\n        let result = null;\n        if (value1 == null && value2 != null)\n            result = -1;\n        else if (value1 != null && value2 == null)\n            result = 1;\n        else if (value1 == null && value2 == null)\n            result = 0;\n        if (typeof value1 == 'string' || value1 instanceof String) {\n            if (value1.localeCompare && value1 != value2) {\n                return multiSortMeta[index].order * value1.localeCompare(value2, undefined, { numeric: true });\n            }\n        }\n        else {\n            result = value1 < value2 ? -1 : 1;\n        }\n        if (value1 == value2) {\n            return multiSortMeta.length - 1 > index ? this.multisortField(node1, node2, multiSortMeta, index + 1) : 0;\n        }\n        return multiSortMeta[index].order * result;\n    }\n    getSortMeta(field) {\n        if (this.multiSortMeta && this.multiSortMeta.length) {\n            for (let i = 0; i < this.multiSortMeta.length; i++) {\n                if (this.multiSortMeta[i].field === field) {\n                    return this.multiSortMeta[i];\n                }\n            }\n        }\n        return null;\n    }\n    isSorted(field) {\n        if (this.sortMode === 'single') {\n            return this.sortField && this.sortField === field;\n        }\n        else if (this.sortMode === 'multiple') {\n            let sorted = false;\n            if (this.multiSortMeta) {\n                for (let i = 0; i < this.multiSortMeta.length; i++) {\n                    if (this.multiSortMeta[i].field == field) {\n                        sorted = true;\n                        break;\n                    }\n                }\n            }\n            return sorted;\n        }\n    }\n    createLazyLoadMetadata() {\n        return {\n            first: this.first,\n            rows: this.rows,\n            sortField: this.sortField,\n            sortOrder: this.sortOrder,\n            filters: this.filters,\n            globalFilter: this.filters && this.filters['global'] ? this.filters['global'].value : null,\n            multiSortMeta: this.multiSortMeta,\n            forceUpdate: () => this.cd.detectChanges()\n        };\n    }\n    onLazyItemLoad(event) {\n        this.onLazyLoad.emit({\n            ...this.createLazyLoadMetadata(),\n            ...event,\n            rows: event.last - event.first\n        });\n    }\n    /**\n     * Resets scroll to top.\n     * @group Method\n     */\n    resetScrollTop() {\n        if (this.virtualScroll)\n            this.scrollToVirtualIndex(0);\n        else\n            this.scrollTo({ top: 0 });\n    }\n    /**\n     * Scrolls to given index when using virtual scroll.\n     * @param {number} index - index of the element.\n     * @group Method\n     */\n    scrollToVirtualIndex(index) {\n        if (this.scrollableViewChild) {\n            this.scrollableViewChild.scrollToVirtualIndex(index);\n        }\n        if (this.scrollableFrozenViewChild) {\n            this.scrollableViewChild.scrollToVirtualIndex(index);\n        }\n    }\n    /**\n     * Scrolls to given index.\n     * @param {ScrollToOptions} options - Scroll options.\n     * @group Method\n     */\n    scrollTo(options) {\n        if (this.scrollableViewChild) {\n            this.scrollableViewChild.scrollTo(options);\n        }\n        if (this.scrollableFrozenViewChild) {\n            this.scrollableViewChild.scrollTo(options);\n        }\n    }\n    isEmpty() {\n        let data = this.filteredNodes || this.value;\n        return data == null || data.length == 0;\n    }\n    getBlockableElement() {\n        return this.el.nativeElement.children[0];\n    }\n    onColumnResizeBegin(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild?.nativeElement).left;\n        this.lastResizerHelperX = event.pageX - containerLeft + this.containerViewChild?.nativeElement.scrollLeft;\n        event.preventDefault();\n    }\n    onColumnResize(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild?.nativeElement).left;\n        DomHandler.addClass(this.containerViewChild?.nativeElement, 'p-unselectable-text');\n        this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild?.nativeElement.offsetHeight + 'px';\n        this.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';\n        this.resizeHelperViewChild.nativeElement.style.left = event.pageX - containerLeft + this.containerViewChild?.nativeElement.scrollLeft + 'px';\n        this.resizeHelperViewChild.nativeElement.style.display = 'block';\n    }\n    onColumnResizeEnd(event, column) {\n        let delta = this.resizeHelperViewChild.nativeElement.offsetLeft - this.lastResizerHelperX;\n        let columnWidth = column.offsetWidth;\n        let newColumnWidth = columnWidth + delta;\n        let minWidth = column.style.minWidth || 15;\n        if (columnWidth + delta > parseInt(minWidth)) {\n            if (this.columnResizeMode === 'fit') {\n                let nextColumn = column.nextElementSibling;\n                while (!nextColumn.offsetParent) {\n                    nextColumn = nextColumn.nextElementSibling;\n                }\n                if (nextColumn) {\n                    let nextColumnWidth = nextColumn.offsetWidth - delta;\n                    let nextColumnMinWidth = nextColumn.style.minWidth || 15;\n                    if (newColumnWidth > 15 && nextColumnWidth > parseInt(nextColumnMinWidth)) {\n                        if (this.scrollable) {\n                            let scrollableView = this.findParentScrollableView(column);\n                            let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body table') || DomHandler.findSingle(scrollableView, '.p-scroller-viewport table');\n                            let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-header-table');\n                            let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-footer-table');\n                            let resizeColumnIndex = DomHandler.index(column);\n                            this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                        }\n                        else {\n                            column.style.width = newColumnWidth + 'px';\n                            if (nextColumn) {\n                                nextColumn.style.width = nextColumnWidth + 'px';\n                            }\n                        }\n                    }\n                }\n            }\n            else if (this.columnResizeMode === 'expand') {\n                if (this.scrollable) {\n                    let scrollableView = this.findParentScrollableView(column);\n                    let scrollableBody = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body') || DomHandler.findSingle(scrollableView, '.p-scroller-viewport');\n                    let scrollableHeader = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-header');\n                    let scrollableFooter = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-footer');\n                    let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body table') || DomHandler.findSingle(scrollableView, '.p-scroller-viewport table');\n                    let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-header-table');\n                    let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-footer-table');\n                    let resizeColumnIndex = DomHandler.index(column);\n                    const scrollableBodyTableWidth = column ? scrollableBodyTable.offsetWidth + delta : newColumnWidth;\n                    const scrollableHeaderTableWidth = column ? scrollableHeaderTable.offsetWidth + delta : newColumnWidth;\n                    const isContainerInViewport = this.containerViewChild?.nativeElement.offsetWidth >= scrollableBodyTableWidth;\n                    let setWidth = (container, table, width, isContainerInViewport) => {\n                        if (container && table) {\n                            container.style.width = isContainerInViewport ? width + DomHandler.calculateScrollbarWidth(scrollableBody) + 'px' : 'auto';\n                            table.style.width = width + 'px';\n                        }\n                    };\n                    setWidth(scrollableBody, scrollableBodyTable, scrollableBodyTableWidth, isContainerInViewport);\n                    setWidth(scrollableHeader, scrollableHeaderTable, scrollableHeaderTableWidth, isContainerInViewport);\n                    setWidth(scrollableFooter, scrollableFooterTable, scrollableHeaderTableWidth, isContainerInViewport);\n                    this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);\n                    this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);\n                    this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);\n                }\n                else {\n                    this.tableViewChild.nativeElement.style.width = this.tableViewChild?.nativeElement.offsetWidth + delta + 'px';\n                    column.style.width = newColumnWidth + 'px';\n                    let containerWidth = this.tableViewChild?.nativeElement.style.width;\n                    this.containerViewChild.nativeElement.style.width = containerWidth + 'px';\n                }\n            }\n            this.onColResize.emit({\n                element: column,\n                delta: delta\n            });\n        }\n        this.resizeHelperViewChild.nativeElement.style.display = 'none';\n        DomHandler.removeClass(this.containerViewChild?.nativeElement, 'p-unselectable-text');\n    }\n    findParentScrollableView(column) {\n        if (column) {\n            let parent = column.parentElement;\n            while (parent && !DomHandler.hasClass(parent, 'p-treetable-scrollable-view')) {\n                parent = parent.parentElement;\n            }\n            return parent;\n        }\n        else {\n            return null;\n        }\n    }\n    resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {\n        if (table) {\n            let colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\n            if (colGroup) {\n                let col = colGroup.children[resizeColumnIndex];\n                let nextCol = col.nextElementSibling;\n                col.style.width = newColumnWidth + 'px';\n                if (nextCol && nextColumnWidth) {\n                    nextCol.style.width = nextColumnWidth + 'px';\n                }\n            }\n            else {\n                throw 'Scrollable tables require a colgroup to support resizable columns';\n            }\n        }\n    }\n    onColumnDragStart(event, columnElement) {\n        this.reorderIconWidth = DomHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild?.nativeElement);\n        this.reorderIconHeight = DomHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild?.nativeElement);\n        this.draggedColumn = columnElement;\n        event.dataTransfer.setData('text', 'b'); // For firefox\n    }\n    onColumnDragEnter(event, dropHeader) {\n        if (this.reorderableColumns && this.draggedColumn && dropHeader) {\n            event.preventDefault();\n            let containerOffset = DomHandler.getOffset(this.containerViewChild?.nativeElement);\n            let dropHeaderOffset = DomHandler.getOffset(dropHeader);\n            if (this.draggedColumn != dropHeader) {\n                let targetLeft = dropHeaderOffset.left - containerOffset.left;\n                let targetTop = containerOffset.top - dropHeaderOffset.top;\n                let columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\n                this.reorderIndicatorUpViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + 'px';\n                this.reorderIndicatorDownViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\n                if (event.pageX > columnCenter) {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2) + 'px';\n                    this.dropPosition = 1;\n                }\n                else {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = targetLeft - Math.ceil(this.reorderIconWidth / 2) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = targetLeft - Math.ceil(this.reorderIconWidth / 2) + 'px';\n                    this.dropPosition = -1;\n                }\n                this.reorderIndicatorUpViewChild.nativeElement.style.display = 'block';\n                this.reorderIndicatorDownViewChild.nativeElement.style.display = 'block';\n            }\n            else {\n                event.dataTransfer.dropEffect = 'none';\n            }\n        }\n    }\n    onColumnDragLeave(event) {\n        if (this.reorderableColumns && this.draggedColumn) {\n            event.preventDefault();\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n        }\n    }\n    onColumnDrop(event, dropColumn) {\n        event.preventDefault();\n        if (this.draggedColumn) {\n            let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'ttreorderablecolumn');\n            let dropIndex = DomHandler.indexWithinGroup(dropColumn, 'ttreorderablecolumn');\n            let allowDrop = dragIndex != dropIndex;\n            if (allowDrop && ((dropIndex - dragIndex == 1 && this.dropPosition === -1) || (dragIndex - dropIndex == 1 && this.dropPosition === 1))) {\n                allowDrop = false;\n            }\n            if (allowDrop && dropIndex < dragIndex && this.dropPosition === 1) {\n                dropIndex = dropIndex + 1;\n            }\n            if (allowDrop && dropIndex > dragIndex && this.dropPosition === -1) {\n                dropIndex = dropIndex - 1;\n            }\n            if (allowDrop) {\n                ObjectUtils.reorderArray(this.columns, dragIndex, dropIndex);\n                this.onColReorder.emit({\n                    dragIndex: dragIndex,\n                    dropIndex: dropIndex,\n                    columns: this.columns\n                });\n            }\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n            this.draggedColumn.draggable = false;\n            this.draggedColumn = null;\n            this.dropPosition = null;\n        }\n    }\n    handleRowClick(event) {\n        let targetNode = event.originalEvent.target.nodeName;\n        if (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' || DomHandler.hasClass(event.originalEvent.target, 'p-clickable')) {\n            return;\n        }\n        if (this.selectionMode) {\n            this.preventSelectionSetterPropagation = true;\n            let rowNode = event.rowNode;\n            let selected = this.isSelected(rowNode.node);\n            let metaSelection = this.rowTouched ? false : this.metaKeySelection;\n            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowNode.node.data, this.dataKey)) : null;\n            if (metaSelection) {\n                let keyboardEvent = event.originalEvent;\n                let metaKey = keyboardEvent.metaKey || keyboardEvent.ctrlKey;\n                if (selected && metaKey) {\n                    if (this.isSingleSelectionMode()) {\n                        this._selection = null;\n                        this.selectedKeys = {};\n                        this.selectionChange.emit(null);\n                    }\n                    else {\n                        let selectionIndex = this.findIndexInSelection(rowNode.node);\n                        this._selection = this.selection.filter((val, i) => i != selectionIndex);\n                        this.selectionChange.emit(this.selection);\n                        if (dataKeyValue) {\n                            delete this.selectedKeys[dataKeyValue];\n                        }\n                    }\n                    this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\n                }\n                else {\n                    if (this.isSingleSelectionMode()) {\n                        this._selection = rowNode.node;\n                        this.selectionChange.emit(rowNode.node);\n                        if (dataKeyValue) {\n                            this.selectedKeys = {};\n                            this.selectedKeys[dataKeyValue] = 1;\n                        }\n                    }\n                    else if (this.isMultipleSelectionMode()) {\n                        if (metaKey) {\n                            this._selection = this.selection || [];\n                        }\n                        else {\n                            this._selection = [];\n                            this.selectedKeys = {};\n                        }\n                        this._selection = [...this.selection, rowNode.node];\n                        this.selectionChange.emit(this.selection);\n                        if (dataKeyValue) {\n                            this.selectedKeys[dataKeyValue] = 1;\n                        }\n                    }\n                    this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\n                }\n            }\n            else {\n                if (this.selectionMode === 'single') {\n                    if (selected) {\n                        this._selection = null;\n                        this.selectedKeys = {};\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\n                    }\n                    else {\n                        this._selection = rowNode.node;\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\n                        if (dataKeyValue) {\n                            this.selectedKeys = {};\n                            this.selectedKeys[dataKeyValue] = 1;\n                        }\n                    }\n                }\n                else if (this.selectionMode === 'multiple') {\n                    if (selected) {\n                        let selectionIndex = this.findIndexInSelection(rowNode.node);\n                        this._selection = this.selection.filter((val, i) => i != selectionIndex);\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\n                        if (dataKeyValue) {\n                            delete this.selectedKeys[dataKeyValue];\n                        }\n                    }\n                    else {\n                        this._selection = this.selection ? [...this.selection, rowNode.node] : [rowNode.node];\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\n                        if (dataKeyValue) {\n                            this.selectedKeys[dataKeyValue] = 1;\n                        }\n                    }\n                }\n            }\n            this.tableService.onSelectionChange();\n        }\n        this.rowTouched = false;\n    }\n    handleRowTouchEnd(event) {\n        this.rowTouched = true;\n    }\n    handleRowRightClick(event) {\n        if (this.contextMenu) {\n            const node = event.rowNode.node;\n            if (this.contextMenuSelectionMode === 'separate') {\n                this.contextMenuSelection = node;\n                this.contextMenuSelectionChange.emit(node);\n                this.onContextMenuSelect.emit({ originalEvent: event.originalEvent, node: node });\n                this.contextMenu.show(event.originalEvent);\n                this.tableService.onContextMenu(node);\n            }\n            else if (this.contextMenuSelectionMode === 'joint') {\n                this.preventSelectionSetterPropagation = true;\n                let selected = this.isSelected(node);\n                let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n                if (!selected) {\n                    if (this.isSingleSelectionMode()) {\n                        this.selection = node;\n                        this.selectionChange.emit(node);\n                    }\n                    else if (this.isMultipleSelectionMode()) {\n                        this.selection = [node];\n                        this.selectionChange.emit(this.selection);\n                    }\n                    if (dataKeyValue) {\n                        this.selectedKeys[dataKeyValue] = 1;\n                    }\n                }\n                this.contextMenu.show(event.originalEvent);\n                this.onContextMenuSelect.emit({ originalEvent: event.originalEvent, node: node });\n            }\n        }\n    }\n    toggleNodeWithCheckbox(event) {\n        // legacy selection support, will be removed in v18\n        this.selection = this.selection || [];\n        this.preventSelectionSetterPropagation = true;\n        let node = event.rowNode.node;\n        let selected = this.isSelected(node);\n        if (selected) {\n            this.propagateSelectionDown(node, false);\n            if (event.rowNode.parent) {\n                this.propagateSelectionUp(node.parent, false);\n            }\n            this.selectionChange.emit(this.selection);\n            this.onNodeUnselect.emit({ originalEvent: event, node: node });\n        }\n        else {\n            this.propagateSelectionDown(node, true);\n            if (event.rowNode.parent) {\n                this.propagateSelectionUp(node.parent, true);\n            }\n            this.selectionChange.emit(this.selection);\n            this.onNodeSelect.emit({ originalEvent: event, node: node });\n        }\n        this.tableService.onSelectionChange();\n    }\n    toggleNodesWithCheckbox(event, check) {\n        // legacy selection support, will be removed in v18\n        let data = this.filteredNodes || this.value;\n        this._selection = check && data ? data.slice() : [];\n        this.toggleAll(check);\n        if (!check) {\n            this._selection = [];\n            this.selectedKeys = {};\n        }\n        this.preventSelectionSetterPropagation = true;\n        this.selectionChange.emit(this._selection);\n        this.tableService.onSelectionChange();\n        this.onHeaderCheckboxToggle.emit({ originalEvent: event, checked: check });\n    }\n    toggleAll(checked) {\n        let data = this.filteredNodes || this.value;\n        if (!this.selectionKeys) {\n            if (data && data.length) {\n                for (let node of data) {\n                    this.propagateSelectionDown(node, checked);\n                }\n            }\n        }\n        else {\n            // legacy selection support, will be removed in v18\n            if (data && data.length) {\n                for (let node of data) {\n                    this.propagateDown(node, checked);\n                }\n                this.selectionKeysChange.emit(this.selectionKeys);\n            }\n        }\n    }\n    propagateSelectionUp(node, select) {\n        // legacy selection support, will be removed in v18\n        if (node.children && node.children.length) {\n            let selectedChildCount = 0;\n            let childPartialSelected = false;\n            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n            for (let child of node.children) {\n                if (this.isSelected(child))\n                    selectedChildCount++;\n                else if (child.partialSelected)\n                    childPartialSelected = true;\n            }\n            if (select && selectedChildCount == node.children.length) {\n                this._selection = [...(this.selection || []), node];\n                node.partialSelected = false;\n                if (dataKeyValue) {\n                    this.selectedKeys[dataKeyValue] = 1;\n                }\n            }\n            else {\n                if (!select) {\n                    let index = this.findIndexInSelection(node);\n                    if (index >= 0) {\n                        this._selection = this.selection.filter((val, i) => i != index);\n                        if (dataKeyValue) {\n                            delete this.selectedKeys[dataKeyValue];\n                        }\n                    }\n                }\n                if (childPartialSelected || (selectedChildCount > 0 && selectedChildCount != node.children.length))\n                    node.partialSelected = true;\n                else\n                    node.partialSelected = false;\n            }\n        }\n        let parent = node.parent;\n        node.checked = select;\n        if (parent) {\n            this.propagateSelectionUp(parent, select);\n        }\n    }\n    propagateSelectionDown(node, select) {\n        // legacy selection support, will be removed in v18\n        let index = this.findIndexInSelection(node);\n        let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n        if (select && index == -1) {\n            this._selection = [...(this.selection || []), node];\n            if (dataKeyValue) {\n                this.selectedKeys[dataKeyValue] = 1;\n            }\n        }\n        else if (!select && index > -1) {\n            this._selection = this.selection.filter((val, i) => i != index);\n            if (dataKeyValue) {\n                delete this.selectedKeys[dataKeyValue];\n            }\n        }\n        node.partialSelected = false;\n        node.checked = select;\n        if (node.children && node.children.length) {\n            for (let child of node.children) {\n                this.propagateSelectionDown(child, select);\n            }\n        }\n    }\n    isSelected(node) {\n        // legacy selection support, will be removed in v18\n        if (node && this.selection) {\n            if (this.dataKey) {\n                if (node.hasOwnProperty('checked')) {\n                    return node['checked'];\n                }\n                else {\n                    return this.selectedKeys[ObjectUtils.resolveFieldData(node.data, this.dataKey)] !== undefined;\n                }\n            }\n            else {\n                if (Array.isArray(this.selection))\n                    return this.findIndexInSelection(node) > -1;\n                else\n                    return this.equals(node, this.selection);\n            }\n        }\n        return false;\n    }\n    isNodeSelected(node) {\n        return this.selectionMode && this.selectionKeys ? this.selectionKeys[this.nodeKey(node)]?.checked === true : false;\n    }\n    isNodePartialSelected(node) {\n        return this.selectionMode && this.selectionKeys ? this.selectionKeys[this.nodeKey(node)]?.partialChecked === true : false;\n    }\n    nodeKey(node) {\n        return ObjectUtils.resolveFieldData(node, this.dataKey) || ObjectUtils.resolveFieldData(node?.data, this.dataKey);\n    }\n    toggleCheckbox(event) {\n        let { rowNode, check, originalEvent } = event;\n        let node = rowNode.node;\n        if (this.selectionKeys) {\n            this.propagateDown(node, check);\n            if (node.parent) {\n                this.propagateUp(node.parent, check);\n            }\n            this.selectionKeysChange.emit(this.selectionKeys);\n        }\n        else {\n            this.toggleNodeWithCheckbox({ originalEvent, rowNode });\n        }\n        this.tableService.onSelectionChange();\n    }\n    propagateDown(node, check) {\n        if (check) {\n            this.selectionKeys[this.nodeKey(node)] = { checked: true, partialChecked: false };\n        }\n        else {\n            delete this.selectionKeys[this.nodeKey(node)];\n        }\n        if (node.children && node.children.length) {\n            for (let child of node.children) {\n                this.propagateDown(child, check);\n            }\n        }\n    }\n    propagateUp(node, check) {\n        let checkedChildCount = 0;\n        let childPartialSelected = false;\n        for (let child of node.children) {\n            if (this.selectionKeys[this.nodeKey(child)] && this.selectionKeys[this.nodeKey(child)].checked)\n                checkedChildCount++;\n            else if (this.selectionKeys[this.nodeKey(child)] && this.selectionKeys[this.nodeKey(child)].partialChecked)\n                childPartialSelected = true;\n        }\n        if (check && checkedChildCount === node.children.length) {\n            this.selectionKeys[this.nodeKey(node)] = { checked: true, partialChecked: false };\n        }\n        else {\n            if (!check) {\n                delete this.selectionKeys[this.nodeKey(node)];\n            }\n            if (childPartialSelected || (checkedChildCount > 0 && checkedChildCount !== node.children.length))\n                this.selectionKeys[this.nodeKey(node)] = { checked: false, partialChecked: true };\n            else\n                this.selectionKeys[this.nodeKey(node)] = { checked: false, partialChecked: false };\n        }\n        let parent = node.parent;\n        if (parent) {\n            this.propagateUp(parent, check);\n        }\n    }\n    findIndexInSelection(node) {\n        let index = -1;\n        if (this.selection && this.selection.length) {\n            for (let i = 0; i < this.selection.length; i++) {\n                if (this.equals(node, this.selection[i])) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n        return index;\n    }\n    isSingleSelectionMode() {\n        return this.selectionMode === 'single';\n    }\n    isMultipleSelectionMode() {\n        return this.selectionMode === 'multiple';\n    }\n    equals(node1, node2) {\n        return this.compareSelectionBy === 'equals' ? ObjectUtils.equals(node1, node2) : ObjectUtils.equals(node1.data, node2.data, this.dataKey);\n    }\n    filter(value, field, matchMode) {\n        if (this.filterTimeout) {\n            clearTimeout(this.filterTimeout);\n        }\n        if (!this.isFilterBlank(value)) {\n            this.filters[field] = { value: value, matchMode: matchMode };\n        }\n        else if (this.filters[field]) {\n            delete this.filters[field];\n        }\n        this.filterTimeout = setTimeout(() => {\n            this._filter();\n            this.filterTimeout = null;\n        }, this.filterDelay);\n    }\n    filterGlobal(value, matchMode) {\n        this.filter(value, 'global', matchMode);\n    }\n    isFilterBlank(filter) {\n        if (filter !== null && filter !== undefined) {\n            if ((typeof filter === 'string' && filter.trim().length == 0) || (Array.isArray(filter) && filter.length == 0))\n                return true;\n            else\n                return false;\n        }\n        return true;\n    }\n    _filter() {\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            if (!this.value) {\n                return;\n            }\n            if (!this.hasFilter()) {\n                this.filteredNodes = null;\n                if (this.paginator) {\n                    this.totalRecords = this.value ? this.value.length : 0;\n                }\n            }\n            else {\n                let globalFilterFieldsArray;\n                if (this.filters['global']) {\n                    if (!this.columns && !this.globalFilterFields)\n                        throw new Error('Global filtering requires dynamic columns or globalFilterFields to be defined.');\n                    else\n                        globalFilterFieldsArray = this.globalFilterFields || this.columns;\n                }\n                this.filteredNodes = [];\n                const isStrictMode = this.filterMode === 'strict';\n                let isValueChanged = false;\n                for (let node of this.value) {\n                    let copyNode = { ...node };\n                    let localMatch = true;\n                    let globalMatch = false;\n                    let paramsWithoutNode;\n                    for (let prop in this.filters) {\n                        if (this.filters.hasOwnProperty(prop) && prop !== 'global') {\n                            let filterMeta = this.filters[prop];\n                            let filterField = prop;\n                            let filterValue = filterMeta.value;\n                            let filterMatchMode = filterMeta.matchMode || 'startsWith';\n                            let filterConstraint = this.filterService.filters[filterMatchMode];\n                            paramsWithoutNode = { filterField, filterValue, filterConstraint, isStrictMode };\n                            if ((isStrictMode && !(this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode))) ||\n                                (!isStrictMode && !(this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode)))) {\n                                localMatch = false;\n                            }\n                            if (!localMatch) {\n                                break;\n                            }\n                        }\n                    }\n                    if (this.filters['global'] && !globalMatch && globalFilterFieldsArray) {\n                        let copyNodeForGlobal = { ...copyNode };\n                        let filterField = undefined;\n                        let filterValue = this.filters['global'].value;\n                        let filterConstraint = this.filterService.filters[this.filters['global'].matchMode];\n                        paramsWithoutNode = { filterField, filterValue, filterConstraint, isStrictMode, globalFilterFieldsArray };\n                        if ((isStrictMode && (this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode) || this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode))) ||\n                            (!isStrictMode && (this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode) || this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode)))) {\n                            globalMatch = true;\n                            copyNode = copyNodeForGlobal;\n                        }\n                    }\n                    let matches = localMatch;\n                    if (this.filters['global']) {\n                        matches = localMatch && globalMatch;\n                    }\n                    if (matches) {\n                        this.filteredNodes.push(copyNode);\n                    }\n                    isValueChanged = isValueChanged || !localMatch || globalMatch || (localMatch && this.filteredNodes.length > 0) || (!globalMatch && this.filteredNodes.length === 0);\n                }\n                if (!isValueChanged) {\n                    this.filteredNodes = null;\n                }\n                if (this.paginator) {\n                    this.totalRecords = this.filteredNodes ? this.filteredNodes.length : this.value ? this.value.length : 0;\n                }\n            }\n            this.cd.markForCheck();\n        }\n        this.first = 0;\n        const filteredValue = this.filteredNodes || this.value;\n        this.onFilter.emit({\n            filters: this.filters,\n            filteredValue: filteredValue\n        });\n        this.tableService.onUIUpdate(filteredValue);\n        this.updateSerializedValue();\n        if (this.scrollable) {\n            this.resetScrollTop();\n        }\n    }\n    findFilteredNodes(node, paramsWithoutNode) {\n        if (node) {\n            let matched = false;\n            if (node.children) {\n                let childNodes = [...node.children];\n                node.children = [];\n                for (let childNode of childNodes) {\n                    let copyChildNode = { ...childNode };\n                    if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                        matched = true;\n                        node.children.push(copyChildNode);\n                    }\n                }\n            }\n            if (matched) {\n                return true;\n            }\n        }\n    }\n    isFilterMatched(node, filterOptions) {\n        let { filterField, filterValue, filterConstraint, isStrictMode, globalFilterFieldsArray } = filterOptions;\n        let matched = false;\n        const isMatched = (field) => filterConstraint(ObjectUtils.resolveFieldData(node.data, field), filterValue, this.filterLocale);\n        matched = globalFilterFieldsArray?.length ? globalFilterFieldsArray.some((globalFilterField) => isMatched(globalFilterField.field || globalFilterField)) : isMatched(filterField);\n        if (!matched || (isStrictMode && !this.isNodeLeaf(node))) {\n            matched = this.findFilteredNodes(node, { filterField, filterValue, filterConstraint, isStrictMode, globalFilterFieldsArray }) || matched;\n        }\n        return matched;\n    }\n    isNodeLeaf(node) {\n        return node.leaf === false ? false : !(node.children && node.children.length);\n    }\n    hasFilter() {\n        let empty = true;\n        for (let prop in this.filters) {\n            if (this.filters.hasOwnProperty(prop)) {\n                empty = false;\n                break;\n            }\n        }\n        return !empty;\n    }\n    /**\n     * Clears the sort and paginator state.\n     * @group Method\n     */\n    reset() {\n        this._sortField = null;\n        this._sortOrder = 1;\n        this._multiSortMeta = null;\n        this.tableService.onSort(null);\n        this.filteredNodes = null;\n        this.filters = {};\n        this.first = 0;\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            this.totalRecords = this._value ? this._value.length : 0;\n        }\n    }\n    updateEditingCell(cell, data, field) {\n        this.editingCell = cell;\n        this.editingCellData = data;\n        this.editingCellField = field;\n        this.bindDocumentEditListener();\n    }\n    isEditingCellValid() {\n        return this.editingCell && DomHandler.find(this.editingCell, '.ng-invalid.ng-dirty').length === 0;\n    }\n    bindDocumentEditListener() {\n        if (!this.documentEditListener) {\n            this.documentEditListener = this.renderer.listen(this.document, 'click', (event) => {\n                if (this.editingCell && !this.editingCellClick && this.isEditingCellValid()) {\n                    DomHandler.removeClass(this.editingCell, 'p-cell-editing');\n                    this.editingCell = null;\n                    this.onEditComplete.emit({ field: this.editingCellField, data: this.editingCellData });\n                    this.editingCellField = null;\n                    this.editingCellData = null;\n                    this.unbindDocumentEditListener();\n                }\n                this.editingCellClick = false;\n            });\n        }\n    }\n    unbindDocumentEditListener() {\n        if (this.documentEditListener) {\n            this.documentEditListener();\n            this.documentEditListener = null;\n        }\n    }\n    ngOnDestroy() {\n        this.unbindDocumentEditListener();\n        this.editingCell = null;\n        this.editingCellField = null;\n        this.editingCellData = null;\n        this.initialized = null;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TreeTable, deps: [{ token: DOCUMENT }, { token: i0.Renderer2 }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: TreeTableService }, { token: i1.FilterService }, { token: i1.PrimeNGConfig }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"18.0.1\", type: TreeTable, selector: \"p-treeTable\", inputs: { columns: \"columns\", style: \"style\", styleClass: \"styleClass\", tableStyle: \"tableStyle\", tableStyleClass: \"tableStyleClass\", autoLayout: [\"autoLayout\", \"autoLayout\", booleanAttribute], lazy: [\"lazy\", \"lazy\", booleanAttribute], lazyLoadOnInit: [\"lazyLoadOnInit\", \"lazyLoadOnInit\", booleanAttribute], paginator: [\"paginator\", \"paginator\", booleanAttribute], rows: [\"rows\", \"rows\", numberAttribute], first: [\"first\", \"first\", numberAttribute], pageLinks: [\"pageLinks\", \"pageLinks\", numberAttribute], rowsPerPageOptions: \"rowsPerPageOptions\", alwaysShowPaginator: [\"alwaysShowPaginator\", \"alwaysShowPaginator\", booleanAttribute], paginatorPosition: \"paginatorPosition\", paginatorStyleClass: \"paginatorStyleClass\", paginatorDropdownAppendTo: \"paginatorDropdownAppendTo\", currentPageReportTemplate: \"currentPageReportTemplate\", showCurrentPageReport: [\"showCurrentPageReport\", \"showCurrentPageReport\", booleanAttribute], showJumpToPageDropdown: [\"showJumpToPageDropdown\", \"showJumpToPageDropdown\", booleanAttribute], showFirstLastIcon: [\"showFirstLastIcon\", \"showFirstLastIcon\", booleanAttribute], showPageLinks: [\"showPageLinks\", \"showPageLinks\", booleanAttribute], defaultSortOrder: [\"defaultSortOrder\", \"defaultSortOrder\", numberAttribute], sortMode: \"sortMode\", resetPageOnSort: [\"resetPageOnSort\", \"resetPageOnSort\", booleanAttribute], customSort: [\"customSort\", \"customSort\", booleanAttribute], selectionMode: \"selectionMode\", contextMenuSelection: \"contextMenuSelection\", contextMenuSelectionMode: \"contextMenuSelectionMode\", dataKey: \"dataKey\", metaKeySelection: [\"metaKeySelection\", \"metaKeySelection\", booleanAttribute], compareSelectionBy: \"compareSelectionBy\", rowHover: [\"rowHover\", \"rowHover\", booleanAttribute], loading: [\"loading\", \"loading\", booleanAttribute], loadingIcon: \"loadingIcon\", showLoader: [\"showLoader\", \"showLoader\", booleanAttribute], scrollable: [\"scrollable\", \"scrollable\", booleanAttribute], scrollHeight: \"scrollHeight\", virtualScroll: [\"virtualScroll\", \"virtualScroll\", booleanAttribute], virtualScrollItemSize: [\"virtualScrollItemSize\", \"virtualScrollItemSize\", numberAttribute], virtualScrollOptions: \"virtualScrollOptions\", virtualScrollDelay: [\"virtualScrollDelay\", \"virtualScrollDelay\", numberAttribute], frozenWidth: \"frozenWidth\", frozenColumns: \"frozenColumns\", resizableColumns: [\"resizableColumns\", \"resizableColumns\", booleanAttribute], columnResizeMode: \"columnResizeMode\", reorderableColumns: [\"reorderableColumns\", \"reorderableColumns\", booleanAttribute], contextMenu: \"contextMenu\", rowTrackBy: \"rowTrackBy\", filters: \"filters\", globalFilterFields: \"globalFilterFields\", filterDelay: [\"filterDelay\", \"filterDelay\", numberAttribute], filterMode: \"filterMode\", filterLocale: \"filterLocale\", paginatorLocale: \"paginatorLocale\", totalRecords: \"totalRecords\", sortField: \"sortField\", sortOrder: \"sortOrder\", multiSortMeta: \"multiSortMeta\", selection: \"selection\", value: \"value\", virtualRowHeight: \"virtualRowHeight\", selectionKeys: \"selectionKeys\" }, outputs: { selectionChange: \"selectionChange\", contextMenuSelectionChange: \"contextMenuSelectionChange\", onFilter: \"onFilter\", onNodeExpand: \"onNodeExpand\", onNodeCollapse: \"onNodeCollapse\", onPage: \"onPage\", onSort: \"onSort\", onLazyLoad: \"onLazyLoad\", sortFunction: \"sortFunction\", onColResize: \"onColResize\", onColReorder: \"onColReorder\", onNodeSelect: \"onNodeSelect\", onNodeUnselect: \"onNodeUnselect\", onContextMenuSelect: \"onContextMenuSelect\", onHeaderCheckboxToggle: \"onHeaderCheckboxToggle\", onEditInit: \"onEditInit\", onEditComplete: \"onEditComplete\", onEditCancel: \"onEditCancel\", selectionKeysChange: \"selectionKeysChange\" }, host: { classAttribute: \"p-element\" }, providers: [TreeTableService], queries: [{ propertyName: \"templates\", predicate: PrimeTemplate }], viewQueries: [{ propertyName: \"containerViewChild\", first: true, predicate: [\"container\"], descendants: true }, { propertyName: \"resizeHelperViewChild\", first: true, predicate: [\"resizeHelper\"], descendants: true }, { propertyName: \"reorderIndicatorUpViewChild\", first: true, predicate: [\"reorderIndicatorUp\"], descendants: true }, { propertyName: \"reorderIndicatorDownViewChild\", first: true, predicate: [\"reorderIndicatorDown\"], descendants: true }, { propertyName: \"tableViewChild\", first: true, predicate: [\"table\"], descendants: true }, { propertyName: \"scrollableViewChild\", first: true, predicate: [\"scrollableView\"], descendants: true }, { propertyName: \"scrollableFrozenViewChild\", first: true, predicate: [\"scrollableFrozenView\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n        <div\n            #container\n            [ngStyle]=\"style\"\n            [class]=\"styleClass\"\n            data-scrollselectors=\".p-treetable-scrollable-body\"\n            [ngClass]=\"{\n                'p-treetable p-component': true,\n                'p-treetable-hoverable-rows': rowHover || selectionMode === 'single' || selectionMode === 'multiple',\n                'p-treetable-auto-layout': autoLayout,\n                'p-treetable-resizable': resizableColumns,\n                'p-treetable-resizable-fit': resizableColumns && columnResizeMode === 'fit',\n                'p-treetable-flex-scrollable': scrollable && scrollHeight === 'flex'\n            }\"\n        >\n            <div class=\"p-treetable-loading\" *ngIf=\"loading && showLoader\">\n                <div class=\"p-treetable-loading-overlay p-component-overlay\">\n                    <i *ngIf=\"loadingIcon\" [class]=\"'p-treetable-loading-icon pi-spin ' + loadingIcon\"></i>\n                    <ng-container *ngIf=\"!loadingIcon\">\n                        <SpinnerIcon *ngIf=\"!loadingIconTemplate\" [spin]=\"true\" [styleClass]=\"'p-treetable-loading-icon'\" />\n                        <span *ngIf=\"loadingIconTemplate\" class=\"p-treetable-loading-icon\">\n                            <ng-template *ngTemplateOutlet=\"loadingIconTemplate\"></ng-template>\n                        </span>\n                    </ng-container>\n                </div>\n            </div>\n            <div *ngIf=\"captionTemplate\" class=\"p-treetable-header\">\n                <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n            </div>\n            <p-paginator\n                [rows]=\"rows\"\n                [first]=\"first\"\n                [totalRecords]=\"totalRecords\"\n                [pageLinkSize]=\"pageLinks\"\n                styleClass=\"p-paginator-top\"\n                [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\"\n                [rowsPerPageOptions]=\"rowsPerPageOptions\"\n                *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition == 'both')\"\n                [templateLeft]=\"paginatorLeftTemplate\"\n                [templateRight]=\"paginatorRightTemplate\"\n                [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\"\n                [showFirstLastIcon]=\"showFirstLastIcon\"\n                [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\"\n                [showCurrentPageReport]=\"showCurrentPageReport\"\n                [showJumpToPageDropdown]=\"showJumpToPageDropdown\"\n                [showPageLinks]=\"showPageLinks\"\n                [styleClass]=\"paginatorStyleClass\"\n                [locale]=\"paginatorLocale\"\n            >\n                <ng-template pTemplate=\"firstpagelinkicon\" *ngIf=\"paginatorFirstPageLinkIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorFirstPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"previouspagelinkicon\" *ngIf=\"paginatorPreviousPageLinkIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorPreviousPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"lastpagelinkicon\" *ngIf=\"paginatorLastPageLinkIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorLastPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"nextpagelinkicon\" *ngIf=\"paginatorNextPageLinkIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorNextPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n            </p-paginator>\n\n            <div class=\"p-treetable-wrapper\" *ngIf=\"!scrollable\">\n                <table role=\"table\" #table [ngClass]=\"tableStyleClass\" [ngStyle]=\"tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                    <thead role=\"rowgroup\" class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </thead>\n                    <tbody class=\"p-treetable-tbody\" role=\"rowgroup\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"bodyTemplate\"></tbody>\n                    <tfoot class=\"p-treetable-tfoot\" role=\"rowgroup\">\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n\n            <div class=\"p-treetable-scrollable-wrapper\" *ngIf=\"scrollable\">\n                <div\n                    class=\"p-treetable-scrollable-view p-treetable-frozen-view\"\n                    *ngIf=\"frozenColumns || frozenBodyTemplate\"\n                    #scrollableFrozenView\n                    [ttScrollableView]=\"frozenColumns\"\n                    [frozen]=\"true\"\n                    [ngStyle]=\"{ width: frozenWidth }\"\n                    [scrollHeight]=\"scrollHeight\"\n                ></div>\n                <div class=\"p-treetable-scrollable-view\" #scrollableView [ttScrollableView]=\"columns\" [frozen]=\"false\" [scrollHeight]=\"scrollHeight\" [ngStyle]=\"{ left: frozenWidth, width: 'calc(100% - ' + frozenWidth + ')' }\"></div>\n            </div>\n\n            <p-paginator\n                [rows]=\"rows\"\n                [first]=\"first\"\n                [totalRecords]=\"totalRecords\"\n                [pageLinkSize]=\"pageLinks\"\n                styleClass=\"p-paginator-bottom\"\n                [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\"\n                [rowsPerPageOptions]=\"rowsPerPageOptions\"\n                *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition == 'both')\"\n                [templateLeft]=\"paginatorLeftTemplate\"\n                [templateRight]=\"paginatorRightTemplate\"\n                [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\"\n                [showFirstLastIcon]=\"showFirstLastIcon\"\n                [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\"\n                [showCurrentPageReport]=\"showCurrentPageReport\"\n                [showJumpToPageDropdown]=\"showJumpToPageDropdown\"\n                [showPageLinks]=\"showPageLinks\"\n                [styleClass]=\"paginatorStyleClass\"\n                [locale]=\"paginatorLocale\"\n            >\n                <ng-template pTemplate=\"firstpagelinkicon\" *ngIf=\"paginatorFirstPageLinkIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorFirstPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"previouspagelinkicon\" *ngIf=\"paginatorPreviousPageLinkIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorPreviousPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"lastpagelinkicon\" *ngIf=\"paginatorLastPageLinkIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorLastPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"nextpagelinkicon\" *ngIf=\"paginatorNextPageLinkIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorNextPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n            </p-paginator>\n            <div *ngIf=\"summaryTemplate\" class=\"p-treetable-footer\">\n                <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n            </div>\n\n            <div #resizeHelper class=\"p-column-resizer-helper\" [ngStyle]=\"{ display: 'none' }\" *ngIf=\"resizableColumns\"></div>\n            <span #reorderIndicatorUp class=\"p-treetable-reorder-indicator-up\" [ngStyle]=\"{ display: 'none' }\" *ngIf=\"reorderableColumns\">\n                <ArrowDownIcon *ngIf=\"!reorderIndicatorUpIconTemplate\" />\n                <ng-template *ngTemplateOutlet=\"reorderIndicatorUpIconTemplate\"></ng-template>\n            </span>\n            <span #reorderIndicatorDown class=\"p-treetable-reorder-indicator-down\" [ngStyle]=\"{ display: 'none' }\" *ngIf=\"reorderableColumns\">\n                <ArrowUpIcon *ngIf=\"!reorderIndicatorDownIconTemplate\" />\n                <ng-template *ngTemplateOutlet=\"reorderIndicatorDownIconTemplate\"></ng-template>\n            </span>\n        </div>\n    `, isInline: true, styles: [\"@layer primeng{.p-treetable{position:relative}.p-treetable table{border-collapse:collapse;width:100%;table-layout:fixed}.p-treetable .p-sortable-column{cursor:pointer;-webkit-user-select:none;user-select:none}.p-treetable .p-sortable-column .p-column-title,.p-treetable .p-sortable-column .p-sortable-column-icon,.p-treetable .p-sortable-column .p-sortable-column-badge{vertical-align:middle}.p-treetable .p-sortable-column .p-sortable-column-badge{display:inline-flex;align-items:center;justify-content:center}.p-treetable-auto-layout>.p-treetable-wrapper{overflow-x:auto}.p-treetable-auto-layout>.p-treetable-wrapper>table{table-layout:auto}.p-treetable-hoverable-rows .p-treetable-tbody>tr{cursor:pointer}.p-treetable-toggler{cursor:pointer;-webkit-user-select:none;user-select:none;display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;overflow:hidden;position:relative}p-treetabletoggler+p-treetablecheckbox .p-checkbox{vertical-align:middle}p-treetabletoggler+p-treetablecheckbox+span{vertical-align:middle}.p-treetable-scrollable-wrapper{position:relative}.p-treetable-scrollable-header,.p-treetable-scrollable-footer{overflow:hidden;flex-shrink:0}.p-treetable-scrollable-body{overflow:auto;position:relative}.p-treetable-scrollable-body>table>.p-treetable-tbody>tr:first-child>td{border-top:0 none}.p-treetable-virtual-table{position:absolute}.p-treetable-frozen-view .p-treetable-scrollable-body{overflow:hidden}.p-treetable-frozen-view>.p-treetable-scrollable-body>table>.p-treetable-tbody>tr>td:last-child{border-right:0 none}.p-treetable-unfrozen-view{position:absolute;top:0}.p-treetable-flex-scrollable,.p-treetable-flex-scrollable .p-treetable-scrollable-wrapper,.p-treetable-flex-scrollable .p-treetable-scrollable-view{display:flex;flex-direction:column;flex:1;height:100%}.p-treetable-flex-scrollable .p-treetable-virtual-scrollable-body{flex:1}.p-treetable-resizable>.p-treetable-wrapper{overflow-x:auto}.p-treetable-resizable .p-treetable-thead>tr>th,.p-treetable-resizable .p-treetable-tfoot>tr>td,.p-treetable-resizable .p-treetable-tbody>tr>td{overflow:hidden}.p-treetable-resizable .p-resizable-column{background-clip:padding-box;position:relative}.p-treetable-resizable-fit .p-resizable-column:last-child .p-column-resizer{display:none}.p-treetable .p-column-resizer{display:block;position:absolute!important;top:0;right:0;margin:0;width:.5rem;height:100%;padding:0;cursor:col-resize;border:1px solid transparent}.p-treetable .p-column-resizer-helper{width:1px;position:absolute;z-index:10;display:none}.p-treetable .p-row-editor-init,.p-treetable .p-row-editor-save,.p-treetable .p-row-editor-cancel,.p-treetable .p-row-toggler{display:inline-flex;align-items:center;justify-content:center;overflow:hidden;position:relative}.p-treetable-reorder-indicator-up,.p-treetable-reorder-indicator-down{position:absolute;display:none}[ttReorderableColumn]{cursor:move}.p-treetable .p-treetable-loading-overlay{position:absolute;display:flex;align-items:center;justify-content:center;z-index:2}.p-treetable .p-scroller-loading{transform:none!important;min-height:0;position:sticky;top:0;left:0}}\\n\"], dependencies: [{ kind: \"directive\", type: i0.forwardRef(() => i2.NgClass), selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i0.forwardRef(() => i2.NgIf), selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i0.forwardRef(() => i2.NgTemplateOutlet), selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i0.forwardRef(() => i2.NgStyle), selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { kind: \"component\", type: i0.forwardRef(() => i3.Paginator), selector: \"p-paginator\", inputs: [\"pageLinkSize\", \"style\", \"styleClass\", \"alwaysShow\", \"dropdownAppendTo\", \"templateLeft\", \"templateRight\", \"appendTo\", \"dropdownScrollHeight\", \"currentPageReportTemplate\", \"showCurrentPageReport\", \"showFirstLastIcon\", \"totalRecords\", \"rows\", \"rowsPerPageOptions\", \"showJumpToPageDropdown\", \"showJumpToPageInput\", \"jumpToPageItemTemplate\", \"showPageLinks\", \"locale\", \"dropdownItemTemplate\", \"first\"], outputs: [\"onPageChange\"] }, { kind: \"directive\", type: i0.forwardRef(() => i1.PrimeTemplate), selector: \"[pTemplate]\", inputs: [\"type\", \"pTemplate\"] }, { kind: \"component\", type: i0.forwardRef(() => SpinnerIcon), selector: \"SpinnerIcon\" }, { kind: \"component\", type: i0.forwardRef(() => ArrowDownIcon), selector: \"ArrowDownIcon\" }, { kind: \"component\", type: i0.forwardRef(() => ArrowUpIcon), selector: \"ArrowUpIcon\" }, { kind: \"component\", type: i0.forwardRef(() => TTScrollableView), selector: \"[ttScrollableView]\", inputs: [\"ttScrollableView\", \"frozen\", \"scrollHeight\"] }, { kind: \"component\", type: i0.forwardRef(() => TTBody), selector: \"[pTreeTableBody]\", inputs: [\"pTreeTableBody\", \"pTreeTableBodyTemplate\", \"frozen\", \"serializedNodes\", \"scrollerOptions\"] }], encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TreeTable, decorators: [{\n            type: Component,\n            args: [{ selector: 'p-treeTable', template: `\n        <div\n            #container\n            [ngStyle]=\"style\"\n            [class]=\"styleClass\"\n            data-scrollselectors=\".p-treetable-scrollable-body\"\n            [ngClass]=\"{\n                'p-treetable p-component': true,\n                'p-treetable-hoverable-rows': rowHover || selectionMode === 'single' || selectionMode === 'multiple',\n                'p-treetable-auto-layout': autoLayout,\n                'p-treetable-resizable': resizableColumns,\n                'p-treetable-resizable-fit': resizableColumns && columnResizeMode === 'fit',\n                'p-treetable-flex-scrollable': scrollable && scrollHeight === 'flex'\n            }\"\n        >\n            <div class=\"p-treetable-loading\" *ngIf=\"loading && showLoader\">\n                <div class=\"p-treetable-loading-overlay p-component-overlay\">\n                    <i *ngIf=\"loadingIcon\" [class]=\"'p-treetable-loading-icon pi-spin ' + loadingIcon\"></i>\n                    <ng-container *ngIf=\"!loadingIcon\">\n                        <SpinnerIcon *ngIf=\"!loadingIconTemplate\" [spin]=\"true\" [styleClass]=\"'p-treetable-loading-icon'\" />\n                        <span *ngIf=\"loadingIconTemplate\" class=\"p-treetable-loading-icon\">\n                            <ng-template *ngTemplateOutlet=\"loadingIconTemplate\"></ng-template>\n                        </span>\n                    </ng-container>\n                </div>\n            </div>\n            <div *ngIf=\"captionTemplate\" class=\"p-treetable-header\">\n                <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n            </div>\n            <p-paginator\n                [rows]=\"rows\"\n                [first]=\"first\"\n                [totalRecords]=\"totalRecords\"\n                [pageLinkSize]=\"pageLinks\"\n                styleClass=\"p-paginator-top\"\n                [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\"\n                [rowsPerPageOptions]=\"rowsPerPageOptions\"\n                *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition == 'both')\"\n                [templateLeft]=\"paginatorLeftTemplate\"\n                [templateRight]=\"paginatorRightTemplate\"\n                [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\"\n                [showFirstLastIcon]=\"showFirstLastIcon\"\n                [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\"\n                [showCurrentPageReport]=\"showCurrentPageReport\"\n                [showJumpToPageDropdown]=\"showJumpToPageDropdown\"\n                [showPageLinks]=\"showPageLinks\"\n                [styleClass]=\"paginatorStyleClass\"\n                [locale]=\"paginatorLocale\"\n            >\n                <ng-template pTemplate=\"firstpagelinkicon\" *ngIf=\"paginatorFirstPageLinkIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorFirstPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"previouspagelinkicon\" *ngIf=\"paginatorPreviousPageLinkIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorPreviousPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"lastpagelinkicon\" *ngIf=\"paginatorLastPageLinkIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorLastPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"nextpagelinkicon\" *ngIf=\"paginatorNextPageLinkIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorNextPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n            </p-paginator>\n\n            <div class=\"p-treetable-wrapper\" *ngIf=\"!scrollable\">\n                <table role=\"table\" #table [ngClass]=\"tableStyleClass\" [ngStyle]=\"tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                    <thead role=\"rowgroup\" class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </thead>\n                    <tbody class=\"p-treetable-tbody\" role=\"rowgroup\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"bodyTemplate\"></tbody>\n                    <tfoot class=\"p-treetable-tfoot\" role=\"rowgroup\">\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n\n            <div class=\"p-treetable-scrollable-wrapper\" *ngIf=\"scrollable\">\n                <div\n                    class=\"p-treetable-scrollable-view p-treetable-frozen-view\"\n                    *ngIf=\"frozenColumns || frozenBodyTemplate\"\n                    #scrollableFrozenView\n                    [ttScrollableView]=\"frozenColumns\"\n                    [frozen]=\"true\"\n                    [ngStyle]=\"{ width: frozenWidth }\"\n                    [scrollHeight]=\"scrollHeight\"\n                ></div>\n                <div class=\"p-treetable-scrollable-view\" #scrollableView [ttScrollableView]=\"columns\" [frozen]=\"false\" [scrollHeight]=\"scrollHeight\" [ngStyle]=\"{ left: frozenWidth, width: 'calc(100% - ' + frozenWidth + ')' }\"></div>\n            </div>\n\n            <p-paginator\n                [rows]=\"rows\"\n                [first]=\"first\"\n                [totalRecords]=\"totalRecords\"\n                [pageLinkSize]=\"pageLinks\"\n                styleClass=\"p-paginator-bottom\"\n                [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\"\n                [rowsPerPageOptions]=\"rowsPerPageOptions\"\n                *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition == 'both')\"\n                [templateLeft]=\"paginatorLeftTemplate\"\n                [templateRight]=\"paginatorRightTemplate\"\n                [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\"\n                [showFirstLastIcon]=\"showFirstLastIcon\"\n                [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\"\n                [showCurrentPageReport]=\"showCurrentPageReport\"\n                [showJumpToPageDropdown]=\"showJumpToPageDropdown\"\n                [showPageLinks]=\"showPageLinks\"\n                [styleClass]=\"paginatorStyleClass\"\n                [locale]=\"paginatorLocale\"\n            >\n                <ng-template pTemplate=\"firstpagelinkicon\" *ngIf=\"paginatorFirstPageLinkIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorFirstPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"previouspagelinkicon\" *ngIf=\"paginatorPreviousPageLinkIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorPreviousPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"lastpagelinkicon\" *ngIf=\"paginatorLastPageLinkIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorLastPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"nextpagelinkicon\" *ngIf=\"paginatorNextPageLinkIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorNextPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n            </p-paginator>\n            <div *ngIf=\"summaryTemplate\" class=\"p-treetable-footer\">\n                <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n            </div>\n\n            <div #resizeHelper class=\"p-column-resizer-helper\" [ngStyle]=\"{ display: 'none' }\" *ngIf=\"resizableColumns\"></div>\n            <span #reorderIndicatorUp class=\"p-treetable-reorder-indicator-up\" [ngStyle]=\"{ display: 'none' }\" *ngIf=\"reorderableColumns\">\n                <ArrowDownIcon *ngIf=\"!reorderIndicatorUpIconTemplate\" />\n                <ng-template *ngTemplateOutlet=\"reorderIndicatorUpIconTemplate\"></ng-template>\n            </span>\n            <span #reorderIndicatorDown class=\"p-treetable-reorder-indicator-down\" [ngStyle]=\"{ display: 'none' }\" *ngIf=\"reorderableColumns\">\n                <ArrowUpIcon *ngIf=\"!reorderIndicatorDownIconTemplate\" />\n                <ng-template *ngTemplateOutlet=\"reorderIndicatorDownIconTemplate\"></ng-template>\n            </span>\n        </div>\n    `, providers: [TreeTableService], encapsulation: ViewEncapsulation.None, host: {\n                        class: 'p-element'\n                    }, styles: [\"@layer primeng{.p-treetable{position:relative}.p-treetable table{border-collapse:collapse;width:100%;table-layout:fixed}.p-treetable .p-sortable-column{cursor:pointer;-webkit-user-select:none;user-select:none}.p-treetable .p-sortable-column .p-column-title,.p-treetable .p-sortable-column .p-sortable-column-icon,.p-treetable .p-sortable-column .p-sortable-column-badge{vertical-align:middle}.p-treetable .p-sortable-column .p-sortable-column-badge{display:inline-flex;align-items:center;justify-content:center}.p-treetable-auto-layout>.p-treetable-wrapper{overflow-x:auto}.p-treetable-auto-layout>.p-treetable-wrapper>table{table-layout:auto}.p-treetable-hoverable-rows .p-treetable-tbody>tr{cursor:pointer}.p-treetable-toggler{cursor:pointer;-webkit-user-select:none;user-select:none;display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;overflow:hidden;position:relative}p-treetabletoggler+p-treetablecheckbox .p-checkbox{vertical-align:middle}p-treetabletoggler+p-treetablecheckbox+span{vertical-align:middle}.p-treetable-scrollable-wrapper{position:relative}.p-treetable-scrollable-header,.p-treetable-scrollable-footer{overflow:hidden;flex-shrink:0}.p-treetable-scrollable-body{overflow:auto;position:relative}.p-treetable-scrollable-body>table>.p-treetable-tbody>tr:first-child>td{border-top:0 none}.p-treetable-virtual-table{position:absolute}.p-treetable-frozen-view .p-treetable-scrollable-body{overflow:hidden}.p-treetable-frozen-view>.p-treetable-scrollable-body>table>.p-treetable-tbody>tr>td:last-child{border-right:0 none}.p-treetable-unfrozen-view{position:absolute;top:0}.p-treetable-flex-scrollable,.p-treetable-flex-scrollable .p-treetable-scrollable-wrapper,.p-treetable-flex-scrollable .p-treetable-scrollable-view{display:flex;flex-direction:column;flex:1;height:100%}.p-treetable-flex-scrollable .p-treetable-virtual-scrollable-body{flex:1}.p-treetable-resizable>.p-treetable-wrapper{overflow-x:auto}.p-treetable-resizable .p-treetable-thead>tr>th,.p-treetable-resizable .p-treetable-tfoot>tr>td,.p-treetable-resizable .p-treetable-tbody>tr>td{overflow:hidden}.p-treetable-resizable .p-resizable-column{background-clip:padding-box;position:relative}.p-treetable-resizable-fit .p-resizable-column:last-child .p-column-resizer{display:none}.p-treetable .p-column-resizer{display:block;position:absolute!important;top:0;right:0;margin:0;width:.5rem;height:100%;padding:0;cursor:col-resize;border:1px solid transparent}.p-treetable .p-column-resizer-helper{width:1px;position:absolute;z-index:10;display:none}.p-treetable .p-row-editor-init,.p-treetable .p-row-editor-save,.p-treetable .p-row-editor-cancel,.p-treetable .p-row-toggler{display:inline-flex;align-items:center;justify-content:center;overflow:hidden;position:relative}.p-treetable-reorder-indicator-up,.p-treetable-reorder-indicator-down{position:absolute;display:none}[ttReorderableColumn]{cursor:move}.p-treetable .p-treetable-loading-overlay{position:absolute;display:flex;align-items:center;justify-content:center;z-index:2}.p-treetable .p-scroller-loading{transform:none!important;min-height:0;position:sticky;top:0;left:0}}\\n\"] }]\n        }], ctorParameters: () => [{ type: Document, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: TreeTableService }, { type: i1.FilterService }, { type: i1.PrimeNGConfig }], propDecorators: { columns: [{\n                type: Input\n            }], style: [{\n                type: Input\n            }], styleClass: [{\n                type: Input\n            }], tableStyle: [{\n                type: Input\n            }], tableStyleClass: [{\n                type: Input\n            }], autoLayout: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], lazy: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], lazyLoadOnInit: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], paginator: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], rows: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], first: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], pageLinks: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], rowsPerPageOptions: [{\n                type: Input\n            }], alwaysShowPaginator: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], paginatorPosition: [{\n                type: Input\n            }], paginatorStyleClass: [{\n                type: Input\n            }], paginatorDropdownAppendTo: [{\n                type: Input\n            }], currentPageReportTemplate: [{\n                type: Input\n            }], showCurrentPageReport: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], showJumpToPageDropdown: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], showFirstLastIcon: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], showPageLinks: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], defaultSortOrder: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], sortMode: [{\n                type: Input\n            }], resetPageOnSort: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], customSort: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], selectionMode: [{\n                type: Input\n            }], contextMenuSelection: [{\n                type: Input\n            }], contextMenuSelectionMode: [{\n                type: Input\n            }], dataKey: [{\n                type: Input\n            }], metaKeySelection: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], compareSelectionBy: [{\n                type: Input\n            }], rowHover: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], loading: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], loadingIcon: [{\n                type: Input\n            }], showLoader: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], scrollable: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], scrollHeight: [{\n                type: Input\n            }], virtualScroll: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], virtualScrollItemSize: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], virtualScrollOptions: [{\n                type: Input\n            }], virtualScrollDelay: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], frozenWidth: [{\n                type: Input\n            }], frozenColumns: [{\n                type: Input\n            }], resizableColumns: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], columnResizeMode: [{\n                type: Input\n            }], reorderableColumns: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], contextMenu: [{\n                type: Input\n            }], rowTrackBy: [{\n                type: Input\n            }], filters: [{\n                type: Input\n            }], globalFilterFields: [{\n                type: Input\n            }], filterDelay: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], filterMode: [{\n                type: Input\n            }], filterLocale: [{\n                type: Input\n            }], paginatorLocale: [{\n                type: Input\n            }], totalRecords: [{\n                type: Input\n            }], sortField: [{\n                type: Input\n            }], sortOrder: [{\n                type: Input\n            }], multiSortMeta: [{\n                type: Input\n            }], selection: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], virtualRowHeight: [{\n                type: Input\n            }], selectionKeys: [{\n                type: Input\n            }], selectionChange: [{\n                type: Output\n            }], contextMenuSelectionChange: [{\n                type: Output\n            }], onFilter: [{\n                type: Output\n            }], onNodeExpand: [{\n                type: Output\n            }], onNodeCollapse: [{\n                type: Output\n            }], onPage: [{\n                type: Output\n            }], onSort: [{\n                type: Output\n            }], onLazyLoad: [{\n                type: Output\n            }], sortFunction: [{\n                type: Output\n            }], onColResize: [{\n                type: Output\n            }], onColReorder: [{\n                type: Output\n            }], onNodeSelect: [{\n                type: Output\n            }], onNodeUnselect: [{\n                type: Output\n            }], onContextMenuSelect: [{\n                type: Output\n            }], onHeaderCheckboxToggle: [{\n                type: Output\n            }], onEditInit: [{\n                type: Output\n            }], onEditComplete: [{\n                type: Output\n            }], onEditCancel: [{\n                type: Output\n            }], selectionKeysChange: [{\n                type: Output\n            }], containerViewChild: [{\n                type: ViewChild,\n                args: ['container']\n            }], resizeHelperViewChild: [{\n                type: ViewChild,\n                args: ['resizeHelper']\n            }], reorderIndicatorUpViewChild: [{\n                type: ViewChild,\n                args: ['reorderIndicatorUp']\n            }], reorderIndicatorDownViewChild: [{\n                type: ViewChild,\n                args: ['reorderIndicatorDown']\n            }], tableViewChild: [{\n                type: ViewChild,\n                args: ['table']\n            }], scrollableViewChild: [{\n                type: ViewChild,\n                args: ['scrollableView']\n            }], scrollableFrozenViewChild: [{\n                type: ViewChild,\n                args: ['scrollableFrozenView']\n            }], templates: [{\n                type: ContentChildren,\n                args: [PrimeTemplate]\n            }] } });\nclass TTBody {\n    tt;\n    treeTableService;\n    cd;\n    columns;\n    template;\n    frozen;\n    serializedNodes;\n    scrollerOptions;\n    subscription;\n    constructor(tt, treeTableService, cd) {\n        this.tt = tt;\n        this.treeTableService = treeTableService;\n        this.cd = cd;\n        this.subscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n            if (this.tt.virtualScroll) {\n                this.cd.detectChanges();\n            }\n        });\n    }\n    getScrollerOption(option, options) {\n        if (this.tt.virtualScroll) {\n            options = options || this.scrollerOptions;\n            return options ? options[option] : null;\n        }\n        return null;\n    }\n    getRowIndex(rowIndex) {\n        const getItemOptions = this.getScrollerOption('getItemOptions');\n        return getItemOptions ? getItemOptions(rowIndex).index : rowIndex;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TTBody, deps: [{ token: TreeTable }, { token: TreeTableService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"18.0.1\", type: TTBody, selector: \"[pTreeTableBody]\", inputs: { columns: [\"pTreeTableBody\", \"columns\"], template: [\"pTreeTableBodyTemplate\", \"template\"], frozen: [\"frozen\", \"frozen\", booleanAttribute], serializedNodes: \"serializedNodes\", scrollerOptions: \"scrollerOptions\" }, host: { classAttribute: \"p-element\" }, ngImport: i0, template: `\n        <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForOf]=\"serializedNodes || tt.serializedValue\" [ngForTrackBy]=\"tt.rowTrackBy\">\n            <ng-container *ngIf=\"serializedNode.visible\">\n                <ng-container *ngTemplateOutlet=\"template; context: { $implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns }\"></ng-container>\n            </ng-container>\n        </ng-template>\n        <ng-container *ngIf=\"tt.isEmpty()\">\n            <ng-container *ngTemplateOutlet=\"tt.emptyMessageTemplate; context: { $implicit: columns, frozen: frozen }\"></ng-container>\n        </ng-container>\n    `, isInline: true, dependencies: [{ kind: \"directive\", type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }], encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TTBody, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[pTreeTableBody]',\n                    template: `\n        <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForOf]=\"serializedNodes || tt.serializedValue\" [ngForTrackBy]=\"tt.rowTrackBy\">\n            <ng-container *ngIf=\"serializedNode.visible\">\n                <ng-container *ngTemplateOutlet=\"template; context: { $implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns }\"></ng-container>\n            </ng-container>\n        </ng-template>\n        <ng-container *ngIf=\"tt.isEmpty()\">\n            <ng-container *ngTemplateOutlet=\"tt.emptyMessageTemplate; context: { $implicit: columns, frozen: frozen }\"></ng-container>\n        </ng-container>\n    `,\n                    encapsulation: ViewEncapsulation.None,\n                    host: {\n                        class: 'p-element'\n                    }\n                }]\n        }], ctorParameters: () => [{ type: TreeTable }, { type: TreeTableService }, { type: i0.ChangeDetectorRef }], propDecorators: { columns: [{\n                type: Input,\n                args: ['pTreeTableBody']\n            }], template: [{\n                type: Input,\n                args: ['pTreeTableBodyTemplate']\n            }], frozen: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], serializedNodes: [{\n                type: Input\n            }], scrollerOptions: [{\n                type: Input\n            }] } });\nclass TTScrollableView {\n    platformId;\n    renderer;\n    tt;\n    el;\n    zone;\n    columns;\n    frozen;\n    scrollHeaderViewChild;\n    scrollHeaderBoxViewChild;\n    scrollBodyViewChild;\n    scrollTableViewChild;\n    scrollLoadingTableViewChild;\n    scrollFooterViewChild;\n    scrollFooterBoxViewChild;\n    scrollableAlignerViewChild;\n    scroller;\n    headerScrollListener;\n    bodyScrollListener;\n    footerScrollListener;\n    frozenSiblingBody;\n    totalRecordsSubscription;\n    _scrollHeight;\n    preventBodyScrollPropagation;\n    getMergedTableStyles(contentStyle) {\n        return {\n            ...this.tt.tableStyle,\n            ...contentStyle\n        };\n    }\n    get scrollHeight() {\n        return this._scrollHeight;\n    }\n    set scrollHeight(val) {\n        this._scrollHeight = val;\n        if (val != null && (val.includes('%') || val.includes('calc'))) {\n            console.log('Percentage scroll height calculation is removed in favor of the more performant CSS based flex mode, use scrollHeight=\"flex\" instead.');\n        }\n    }\n    constructor(platformId, renderer, tt, el, zone) {\n        this.platformId = platformId;\n        this.renderer = renderer;\n        this.tt = tt;\n        this.el = el;\n        this.zone = zone;\n    }\n    ngAfterViewInit() {\n        if (isPlatformBrowser(this.platformId)) {\n            if (!this.frozen) {\n                if (this.tt.frozenColumns || this.tt.frozenBodyTemplate) {\n                    DomHandler.addClass(this.el.nativeElement, 'p-treetable-unfrozen-view');\n                }\n                let frozenView = this.el.nativeElement.previousElementSibling;\n                if (frozenView) {\n                    if (this.tt.virtualScroll)\n                        this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-scroller-viewport');\n                    else\n                        this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-treetable-scrollable-body');\n                }\n                let scrollBarWidth = DomHandler.calculateScrollbarWidth();\n                this.scrollHeaderBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n                if (this.scrollFooterBoxViewChild && this.scrollFooterBoxViewChild.nativeElement) {\n                    this.scrollFooterBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n                }\n            }\n            else {\n                if (this.scrollableAlignerViewChild && this.scrollableAlignerViewChild.nativeElement) {\n                    this.scrollableAlignerViewChild.nativeElement.style.height = DomHandler.calculateScrollbarHeight() + 'px';\n                }\n            }\n            this.bindEvents();\n        }\n    }\n    bindEvents() {\n        if (isPlatformBrowser(this.platformId)) {\n            this.zone.runOutsideAngular(() => {\n                if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n                    this.headerScrollListener = this.renderer.listen(this.scrollHeaderBoxViewChild?.nativeElement, 'scroll', this.onHeaderScroll.bind(this));\n                }\n                if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n                    this.footerScrollListener = this.renderer.listen(this.scrollFooterViewChild.nativeElement, 'scroll', this.onFooterScroll.bind(this));\n                }\n                if (!this.frozen) {\n                    if (this.tt.virtualScroll) {\n                        this.bodyScrollListener = this.renderer.listen((this.scroller?.getElementRef()).nativeElement, 'scroll', this.onBodyScroll.bind(this));\n                    }\n                    else {\n                        this.bodyScrollListener = this.renderer.listen(this.scrollBodyViewChild?.nativeElement, 'scroll', this.onBodyScroll.bind(this));\n                    }\n                }\n            });\n        }\n    }\n    unbindEvents() {\n        if (isPlatformBrowser(this.platformId)) {\n            if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n                if (this.headerScrollListener) {\n                    this.headerScrollListener();\n                    this.headerScrollListener = null;\n                }\n            }\n            if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n                if (this.footerScrollListener) {\n                    this.footerScrollListener();\n                    this.footerScrollListener = null;\n                }\n            }\n            if (this.scrollBodyViewChild && this.scrollBodyViewChild.nativeElement) {\n                if (this.bodyScrollListener) {\n                    this.bodyScrollListener();\n                    this.bodyScrollListener = null;\n                }\n            }\n            if (this.scroller && this.scroller.getElementRef()) {\n                if (this.bodyScrollListener) {\n                    this.bodyScrollListener();\n                    this.bodyScrollListener = null;\n                }\n            }\n        }\n    }\n    onHeaderScroll() {\n        const scrollLeft = this.scrollHeaderViewChild?.nativeElement.scrollLeft;\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.scrollLeft = scrollLeft;\n        }\n        this.preventBodyScrollPropagation = true;\n    }\n    onFooterScroll() {\n        const scrollLeft = this.scrollFooterViewChild?.nativeElement.scrollLeft;\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderViewChild.nativeElement.scrollLeft = scrollLeft;\n        }\n        this.preventBodyScrollPropagation = true;\n    }\n    onBodyScroll(event) {\n        if (this.preventBodyScrollPropagation) {\n            this.preventBodyScrollPropagation = false;\n            return;\n        }\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n        }\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n        }\n        if (this.frozenSiblingBody) {\n            this.frozenSiblingBody.scrollTop = event.target.scrollTop;\n        }\n    }\n    scrollToVirtualIndex(index) {\n        if (this.scroller) {\n            this.scroller.scrollToIndex(index);\n        }\n    }\n    scrollTo(options) {\n        if (this.scroller) {\n            this.scroller.scrollTo(options);\n        }\n        else {\n            if (this.scrollBodyViewChild?.nativeElement.scrollTo) {\n                this.scrollBodyViewChild.nativeElement.scrollTo(options);\n            }\n            else {\n                this.scrollBodyViewChild.nativeElement.scrollLeft = options.left;\n                this.scrollBodyViewChild.nativeElement.scrollTop = options.top;\n            }\n        }\n    }\n    ngOnDestroy() {\n        this.unbindEvents();\n        this.frozenSiblingBody = null;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TTScrollableView, deps: [{ token: PLATFORM_ID }, { token: i0.Renderer2 }, { token: TreeTable }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"18.0.1\", type: TTScrollableView, selector: \"[ttScrollableView]\", inputs: { columns: [\"ttScrollableView\", \"columns\"], frozen: [\"frozen\", \"frozen\", booleanAttribute], scrollHeight: \"scrollHeight\" }, host: { classAttribute: \"p-element\" }, viewQueries: [{ propertyName: \"scrollHeaderViewChild\", first: true, predicate: [\"scrollHeader\"], descendants: true }, { propertyName: \"scrollHeaderBoxViewChild\", first: true, predicate: [\"scrollHeaderBox\"], descendants: true }, { propertyName: \"scrollBodyViewChild\", first: true, predicate: [\"scrollBody\"], descendants: true }, { propertyName: \"scrollTableViewChild\", first: true, predicate: [\"scrollTable\"], descendants: true }, { propertyName: \"scrollLoadingTableViewChild\", first: true, predicate: [\"loadingTable\"], descendants: true }, { propertyName: \"scrollFooterViewChild\", first: true, predicate: [\"scrollFooter\"], descendants: true }, { propertyName: \"scrollFooterBoxViewChild\", first: true, predicate: [\"scrollFooterBox\"], descendants: true }, { propertyName: \"scrollableAlignerViewChild\", first: true, predicate: [\"scrollableAligner\"], descendants: true }, { propertyName: \"scroller\", first: true, predicate: [\"scroller\"], descendants: true }], ngImport: i0, template: `\n        <div #scrollHeader class=\"p-treetable-scrollable-header\">\n            <div #scrollHeaderBox class=\"p-treetable-scrollable-header-box\">\n                <table class=\"p-treetable-scrollable-header-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate || tt.colGroupTemplate : tt.colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                    <thead role=\"rowgroup\" class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenHeaderTemplate || tt.headerTemplate : tt.headerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </thead>\n                </table>\n            </div>\n        </div>\n\n        <p-scroller\n            *ngIf=\"tt.virtualScroll\"\n            #scroller\n            [items]=\"tt.serializedValue\"\n            styleClass=\"p-treetable-scrollable-body\"\n            [style]=\"{ height: tt.scrollHeight !== 'flex' ? tt.scrollHeight : undefined }\"\n            [scrollHeight]=\"scrollHeight !== 'flex' ? undefined : '100%'\"\n            [itemSize]=\"tt.virtualScrollItemSize || tt._virtualRowHeight\"\n            [lazy]=\"tt.lazy\"\n            (onLazyLoad)=\"tt.onLazyItemLoad($event)\"\n            [options]=\"tt.virtualScrollOptions\"\n        >\n            <ng-template pTemplate=\"content\" let-items let-scrollerOptions=\"options\">\n                <ng-container *ngTemplateOutlet=\"buildInItems; context: { $implicit: items, options: scrollerOptions }\"></ng-container>\n            </ng-template>\n            <ng-container *ngIf=\"loaderTemplate\">\n                <ng-template pTemplate=\"loader\" let-scrollerOptions=\"options\">\n                    <ng-container *ngTemplateOutlet=\"loaderTemplate; context: { options: scrollerOptions }\"></ng-container>\n                </ng-template>\n            </ng-container>\n        </p-scroller>\n        <ng-container *ngIf=\"!tt.virtualScroll\">\n            <div #scrollBody class=\"p-treetable-scrollable-body\" [ngStyle]=\"{ 'max-height': tt.scrollHeight !== 'flex' ? scrollHeight : undefined, 'overflow-y': !frozen && tt.scrollHeight ? 'scroll' : undefined }\">\n                <ng-container *ngTemplateOutlet=\"buildInItems; context: { $implicit: serializedValue, options: {} }\"></ng-container>\n            </div>\n        </ng-container>\n\n        <ng-template #buildInItems let-items let-scrollerOptions=\"options\">\n            <table role=\"table\" #scrollTable [class]=\"tt.tableStyleClass\" [ngClass]=\"scrollerOptions.contentStyleClass\" [ngStyle]=\"getMergedTableStyles(scrollerOptions.contentStyle)\">\n                <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate || tt.colGroupTemplate : tt.colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                <tbody role=\"rowgroup\" class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate || tt.bodyTemplate : tt.bodyTemplate\" [serializedNodes]=\"items\" [frozen]=\"frozen\"></tbody>\n            </table>\n            <div #scrollableAligner [ngStyle]=\"{ 'background-color': 'transparent' }\" *ngIf=\"frozen\"></div>\n        </ng-template>\n\n        <div #scrollFooter *ngIf=\"tt.footerTemplate\" class=\"p-treetable-scrollable-footer\">\n            <div #scrollFooterBox class=\"p-treetable-scrollable-footer-box\">\n                <table class=\"p-treetable-scrollable-footer-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate || tt.colGroupTemplate : tt.colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                    <tfoot role=\"rowgroup\" class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenFooterTemplate || tt.footerTemplate : tt.footerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    `, isInline: true, dependencies: [{ kind: \"directive\", type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i2.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { kind: \"directive\", type: i1.PrimeTemplate, selector: \"[pTemplate]\", inputs: [\"type\", \"pTemplate\"] }, { kind: \"component\", type: i4.Scroller, selector: \"p-scroller\", inputs: [\"id\", \"style\", \"styleClass\", \"tabindex\", \"items\", \"itemSize\", \"scrollHeight\", \"scrollWidth\", \"orientation\", \"step\", \"delay\", \"resizeDelay\", \"appendOnly\", \"inline\", \"lazy\", \"disabled\", \"loaderDisabled\", \"columns\", \"showSpacer\", \"showLoader\", \"numToleratedItems\", \"loading\", \"autoSize\", \"trackBy\", \"options\"], outputs: [\"onLazyLoad\", \"onScroll\", \"onScrollIndexChange\"] }, { kind: \"component\", type: TTBody, selector: \"[pTreeTableBody]\", inputs: [\"pTreeTableBody\", \"pTreeTableBodyTemplate\", \"frozen\", \"serializedNodes\", \"scrollerOptions\"] }], encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TTScrollableView, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[ttScrollableView]',\n                    template: `\n        <div #scrollHeader class=\"p-treetable-scrollable-header\">\n            <div #scrollHeaderBox class=\"p-treetable-scrollable-header-box\">\n                <table class=\"p-treetable-scrollable-header-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate || tt.colGroupTemplate : tt.colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                    <thead role=\"rowgroup\" class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenHeaderTemplate || tt.headerTemplate : tt.headerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </thead>\n                </table>\n            </div>\n        </div>\n\n        <p-scroller\n            *ngIf=\"tt.virtualScroll\"\n            #scroller\n            [items]=\"tt.serializedValue\"\n            styleClass=\"p-treetable-scrollable-body\"\n            [style]=\"{ height: tt.scrollHeight !== 'flex' ? tt.scrollHeight : undefined }\"\n            [scrollHeight]=\"scrollHeight !== 'flex' ? undefined : '100%'\"\n            [itemSize]=\"tt.virtualScrollItemSize || tt._virtualRowHeight\"\n            [lazy]=\"tt.lazy\"\n            (onLazyLoad)=\"tt.onLazyItemLoad($event)\"\n            [options]=\"tt.virtualScrollOptions\"\n        >\n            <ng-template pTemplate=\"content\" let-items let-scrollerOptions=\"options\">\n                <ng-container *ngTemplateOutlet=\"buildInItems; context: { $implicit: items, options: scrollerOptions }\"></ng-container>\n            </ng-template>\n            <ng-container *ngIf=\"loaderTemplate\">\n                <ng-template pTemplate=\"loader\" let-scrollerOptions=\"options\">\n                    <ng-container *ngTemplateOutlet=\"loaderTemplate; context: { options: scrollerOptions }\"></ng-container>\n                </ng-template>\n            </ng-container>\n        </p-scroller>\n        <ng-container *ngIf=\"!tt.virtualScroll\">\n            <div #scrollBody class=\"p-treetable-scrollable-body\" [ngStyle]=\"{ 'max-height': tt.scrollHeight !== 'flex' ? scrollHeight : undefined, 'overflow-y': !frozen && tt.scrollHeight ? 'scroll' : undefined }\">\n                <ng-container *ngTemplateOutlet=\"buildInItems; context: { $implicit: serializedValue, options: {} }\"></ng-container>\n            </div>\n        </ng-container>\n\n        <ng-template #buildInItems let-items let-scrollerOptions=\"options\">\n            <table role=\"table\" #scrollTable [class]=\"tt.tableStyleClass\" [ngClass]=\"scrollerOptions.contentStyleClass\" [ngStyle]=\"getMergedTableStyles(scrollerOptions.contentStyle)\">\n                <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate || tt.colGroupTemplate : tt.colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                <tbody role=\"rowgroup\" class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate || tt.bodyTemplate : tt.bodyTemplate\" [serializedNodes]=\"items\" [frozen]=\"frozen\"></tbody>\n            </table>\n            <div #scrollableAligner [ngStyle]=\"{ 'background-color': 'transparent' }\" *ngIf=\"frozen\"></div>\n        </ng-template>\n\n        <div #scrollFooter *ngIf=\"tt.footerTemplate\" class=\"p-treetable-scrollable-footer\">\n            <div #scrollFooterBox class=\"p-treetable-scrollable-footer-box\">\n                <table class=\"p-treetable-scrollable-footer-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate || tt.colGroupTemplate : tt.colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                    <tfoot role=\"rowgroup\" class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenFooterTemplate || tt.footerTemplate : tt.footerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    `,\n                    encapsulation: ViewEncapsulation.None,\n                    host: {\n                        class: 'p-element'\n                    }\n                }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: i0.Renderer2 }, { type: TreeTable }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { columns: [{\n                type: Input,\n                args: ['ttScrollableView']\n            }], frozen: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], scrollHeaderViewChild: [{\n                type: ViewChild,\n                args: ['scrollHeader']\n            }], scrollHeaderBoxViewChild: [{\n                type: ViewChild,\n                args: ['scrollHeaderBox']\n            }], scrollBodyViewChild: [{\n                type: ViewChild,\n                args: ['scrollBody']\n            }], scrollTableViewChild: [{\n                type: ViewChild,\n                args: ['scrollTable']\n            }], scrollLoadingTableViewChild: [{\n                type: ViewChild,\n                args: ['loadingTable']\n            }], scrollFooterViewChild: [{\n                type: ViewChild,\n                args: ['scrollFooter']\n            }], scrollFooterBoxViewChild: [{\n                type: ViewChild,\n                args: ['scrollFooterBox']\n            }], scrollableAlignerViewChild: [{\n                type: ViewChild,\n                args: ['scrollableAligner']\n            }], scroller: [{\n                type: ViewChild,\n                args: ['scroller']\n            }], scrollHeight: [{\n                type: Input\n            }] } });\nclass TTSortableColumn {\n    tt;\n    field;\n    ttSortableColumnDisabled;\n    sorted;\n    subscription;\n    get ariaSorted() {\n        if (this.sorted && this.tt.sortOrder < 0)\n            return 'descending';\n        else if (this.sorted && this.tt.sortOrder > 0)\n            return 'ascending';\n        else\n            return 'none';\n    }\n    constructor(tt) {\n        this.tt = tt;\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.sortSource$.subscribe((sortMeta) => {\n                this.updateSortState();\n            });\n        }\n    }\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.updateSortState();\n        }\n    }\n    updateSortState() {\n        this.sorted = this.tt.isSorted(this.field);\n    }\n    onClick(event) {\n        if (this.isEnabled()) {\n            this.updateSortState();\n            this.tt.sort({\n                originalEvent: event,\n                field: this.field\n            });\n            DomHandler.clearSelection();\n        }\n    }\n    onEnterKey(event) {\n        this.onClick(event);\n    }\n    isEnabled() {\n        return this.ttSortableColumnDisabled !== true;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TTSortableColumn, deps: [{ token: TreeTable }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.0.1\", type: TTSortableColumn, selector: \"[ttSortableColumn]\", inputs: { field: [\"ttSortableColumn\", \"field\"], ttSortableColumnDisabled: [\"ttSortableColumnDisabled\", \"ttSortableColumnDisabled\", booleanAttribute] }, host: { listeners: { \"click\": \"onClick($event)\", \"keydown.enter\": \"onEnterKey($event)\" }, properties: { \"class.p-sortable-column\": \"isEnabled()\", \"class.p-highlight\": \"sorted\", \"attr.tabindex\": \"isEnabled() ? \\\"0\\\" : null\", \"attr.role\": \"\\\"columnheader\\\"\", \"attr.aria-sort\": \"ariaSorted\" }, classAttribute: \"p-element\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TTSortableColumn, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttSortableColumn]',\n                    host: {\n                        class: 'p-element',\n                        '[class.p-sortable-column]': 'isEnabled()',\n                        '[class.p-highlight]': 'sorted',\n                        '[attr.tabindex]': 'isEnabled() ? \"0\" : null',\n                        '[attr.role]': '\"columnheader\"',\n                        '[attr.aria-sort]': 'ariaSorted'\n                    }\n                }]\n        }], ctorParameters: () => [{ type: TreeTable }], propDecorators: { field: [{\n                type: Input,\n                args: ['ttSortableColumn']\n            }], ttSortableColumnDisabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }], onEnterKey: [{\n                type: HostListener,\n                args: ['keydown.enter', ['$event']]\n            }] } });\nclass TTSortIcon {\n    tt;\n    cd;\n    field;\n    ariaLabelDesc;\n    ariaLabelAsc;\n    subscription;\n    sortOrder;\n    constructor(tt, cd) {\n        this.tt = tt;\n        this.cd = cd;\n        this.subscription = this.tt.tableService.sortSource$.subscribe((sortMeta) => {\n            this.updateSortState();\n            this.cd.markForCheck();\n        });\n    }\n    ngOnInit() {\n        this.updateSortState();\n    }\n    onClick(event) {\n        event.preventDefault();\n    }\n    updateSortState() {\n        if (this.tt.sortMode === 'single') {\n            this.sortOrder = this.tt.isSorted(this.field) ? this.tt.sortOrder : 0;\n        }\n        else if (this.tt.sortMode === 'multiple') {\n            let sortMeta = this.tt.getSortMeta(this.field);\n            this.sortOrder = sortMeta ? sortMeta.order : 0;\n        }\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TTSortIcon, deps: [{ token: TreeTable }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.0.1\", type: TTSortIcon, selector: \"p-treeTableSortIcon\", inputs: { field: \"field\", ariaLabelDesc: \"ariaLabelDesc\", ariaLabelAsc: \"ariaLabelAsc\" }, host: { classAttribute: \"p-element\" }, ngImport: i0, template: ` <ng-container *ngIf=\"!tt.sortIconTemplate\">\n            <SortAltIcon [styleClass]=\"'p-sortable-column-icon'\" *ngIf=\"sortOrder === 0\" />\n            <SortAmountUpAltIcon [styleClass]=\"'p-sortable-column-icon'\" *ngIf=\"sortOrder === 1\" />\n            <SortAmountDownIcon [styleClass]=\"'p-sortable-column-icon'\" *ngIf=\"sortOrder === -1\" />\n        </ng-container>\n        <span *ngIf=\"tt.sortIconTemplate\" class=\"p-sortable-column-icon\">\n            <ng-template *ngTemplateOutlet=\"tt.sortIconTemplate; context: { $implicit: sortOrder }\"></ng-template>\n        </span>`, isInline: true, dependencies: [{ kind: \"directive\", type: i0.forwardRef(() => i2.NgIf), selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i0.forwardRef(() => i2.NgTemplateOutlet), selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"component\", type: i0.forwardRef(() => SortAltIcon), selector: \"SortAltIcon\" }, { kind: \"component\", type: i0.forwardRef(() => SortAmountUpAltIcon), selector: \"SortAmountUpAltIcon\" }, { kind: \"component\", type: i0.forwardRef(() => SortAmountDownIcon), selector: \"SortAmountDownIcon\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TTSortIcon, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-treeTableSortIcon',\n                    template: ` <ng-container *ngIf=\"!tt.sortIconTemplate\">\n            <SortAltIcon [styleClass]=\"'p-sortable-column-icon'\" *ngIf=\"sortOrder === 0\" />\n            <SortAmountUpAltIcon [styleClass]=\"'p-sortable-column-icon'\" *ngIf=\"sortOrder === 1\" />\n            <SortAmountDownIcon [styleClass]=\"'p-sortable-column-icon'\" *ngIf=\"sortOrder === -1\" />\n        </ng-container>\n        <span *ngIf=\"tt.sortIconTemplate\" class=\"p-sortable-column-icon\">\n            <ng-template *ngTemplateOutlet=\"tt.sortIconTemplate; context: { $implicit: sortOrder }\"></ng-template>\n        </span>`,\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    host: {\n                        class: 'p-element'\n                    }\n                }]\n        }], ctorParameters: () => [{ type: TreeTable }, { type: i0.ChangeDetectorRef }], propDecorators: { field: [{\n                type: Input\n            }], ariaLabelDesc: [{\n                type: Input\n            }], ariaLabelAsc: [{\n                type: Input\n            }] } });\nclass TTResizableColumn {\n    document;\n    platformId;\n    renderer;\n    tt;\n    el;\n    zone;\n    ttResizableColumnDisabled;\n    resizer;\n    resizerMouseDownListener;\n    documentMouseMoveListener;\n    documentMouseUpListener;\n    constructor(document, platformId, renderer, tt, el, zone) {\n        this.document = document;\n        this.platformId = platformId;\n        this.renderer = renderer;\n        this.tt = tt;\n        this.el = el;\n        this.zone = zone;\n    }\n    ngAfterViewInit() {\n        if (isPlatformBrowser(this.platformId)) {\n            if (this.isEnabled()) {\n                DomHandler.addClass(this.el.nativeElement, 'p-resizable-column');\n                this.resizer = this.renderer.createElement('span');\n                this.renderer.addClass(this.resizer, 'p-column-resizer');\n                this.renderer.appendChild(this.el.nativeElement, this.resizer);\n                this.zone.runOutsideAngular(() => {\n                    this.resizerMouseDownListener = this.renderer.listen(this.resizer, 'mousedown', this.onMouseDown.bind(this));\n                });\n            }\n        }\n    }\n    bindDocumentEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.documentMouseMoveListener = this.renderer.listen(this.document, 'mousemove', this.onDocumentMouseMove.bind(this));\n            this.documentMouseUpListener = this.renderer.listen(this.document, 'mouseup', this.onDocumentMouseUp.bind(this));\n        });\n    }\n    unbindDocumentEvents() {\n        if (this.documentMouseMoveListener) {\n            this.documentMouseMoveListener();\n            this.documentMouseMoveListener = null;\n        }\n        if (this.documentMouseUpListener) {\n            this.documentMouseUpListener();\n            this.documentMouseUpListener = null;\n        }\n    }\n    onMouseDown(event) {\n        this.tt.onColumnResizeBegin(event);\n        this.bindDocumentEvents();\n    }\n    onDocumentMouseMove(event) {\n        this.tt.onColumnResize(event);\n    }\n    onDocumentMouseUp(event) {\n        this.tt.onColumnResizeEnd(event, this.el.nativeElement);\n        this.unbindDocumentEvents();\n    }\n    isEnabled() {\n        return this.ttResizableColumnDisabled !== true;\n    }\n    ngOnDestroy() {\n        if (this.resizerMouseDownListener) {\n            this.resizerMouseDownListener();\n            this.resizerMouseDownListener = null;\n        }\n        this.unbindDocumentEvents();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TTResizableColumn, deps: [{ token: DOCUMENT }, { token: PLATFORM_ID }, { token: i0.Renderer2 }, { token: TreeTable }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.0.1\", type: TTResizableColumn, selector: \"[ttResizableColumn]\", inputs: { ttResizableColumnDisabled: [\"ttResizableColumnDisabled\", \"ttResizableColumnDisabled\", booleanAttribute] }, host: { classAttribute: \"p-element\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TTResizableColumn, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttResizableColumn]',\n                    host: {\n                        class: 'p-element'\n                    }\n                }]\n        }], ctorParameters: () => [{ type: Document, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: i0.Renderer2 }, { type: TreeTable }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { ttResizableColumnDisabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\nclass TTReorderableColumn {\n    document;\n    platformId;\n    renderer;\n    tt;\n    el;\n    zone;\n    ttReorderableColumnDisabled;\n    dragStartListener;\n    dragOverListener;\n    dragEnterListener;\n    dragLeaveListener;\n    mouseDownListener;\n    constructor(document, platformId, renderer, tt, el, zone) {\n        this.document = document;\n        this.platformId = platformId;\n        this.renderer = renderer;\n        this.tt = tt;\n        this.el = el;\n        this.zone = zone;\n    }\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            this.bindEvents();\n        }\n    }\n    bindEvents() {\n        if (isPlatformBrowser(this.platformId)) {\n            this.zone.runOutsideAngular(() => {\n                this.mouseDownListener = this.renderer.listen(this.el.nativeElement, 'mousedown', this.onMouseDown.bind(this));\n                this.dragStartListener = this.renderer.listen(this.el.nativeElement, 'dragstart', this.onDragStart.bind(this));\n                this.dragOverListener = this.renderer.listen(this.el.nativeElement, 'dragover', this.onDragEnter.bind(this));\n                this.dragEnterListener = this.renderer.listen(this.el.nativeElement, 'dragenter', this.onDragEnter.bind(this));\n                this.dragLeaveListener = this.renderer.listen(this.el.nativeElement, 'dragleave', this.onDragLeave.bind(this));\n            });\n        }\n    }\n    unbindEvents() {\n        if (isPlatformBrowser(this.platformId)) {\n            if (this.mouseDownListener) {\n                this.mouseDownListener();\n                this.mouseDownListener = null;\n            }\n            if (this.dragOverListener) {\n                this.dragOverListener();\n                this.dragOverListener = null;\n            }\n            if (this.dragEnterListener) {\n                this.dragEnterListener();\n                this.dragEnterListener = null;\n            }\n            if (this.dragLeaveListener) {\n                this.dragLeaveListener();\n                this.dragLeaveListener = null;\n            }\n        }\n    }\n    onMouseDown(event) {\n        if (event.target.nodeName === 'INPUT' || event.target.nodeName === 'TEXTAREA' || DomHandler.hasClass(event.target, 'p-column-resizer'))\n            this.el.nativeElement.draggable = false;\n        else\n            this.el.nativeElement.draggable = true;\n    }\n    onDragStart(event) {\n        this.tt.onColumnDragStart(event, this.el.nativeElement);\n    }\n    onDragOver(event) {\n        event.preventDefault();\n    }\n    onDragEnter(event) {\n        this.tt.onColumnDragEnter(event, this.el.nativeElement);\n    }\n    onDragLeave(event) {\n        this.tt.onColumnDragLeave(event);\n    }\n    onDrop(event) {\n        if (this.isEnabled()) {\n            this.tt.onColumnDrop(event, this.el.nativeElement);\n        }\n    }\n    isEnabled() {\n        return this.ttReorderableColumnDisabled !== true;\n    }\n    ngOnDestroy() {\n        this.unbindEvents();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TTReorderableColumn, deps: [{ token: DOCUMENT }, { token: PLATFORM_ID }, { token: i0.Renderer2 }, { token: TreeTable }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.0.1\", type: TTReorderableColumn, selector: \"[ttReorderableColumn]\", inputs: { ttReorderableColumnDisabled: [\"ttReorderableColumnDisabled\", \"ttReorderableColumnDisabled\", booleanAttribute] }, host: { listeners: { \"drop\": \"onDrop($event)\" }, classAttribute: \"p-element\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TTReorderableColumn, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttReorderableColumn]',\n                    host: {\n                        class: 'p-element'\n                    }\n                }]\n        }], ctorParameters: () => [{ type: Document, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: i0.Renderer2 }, { type: TreeTable }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { ttReorderableColumnDisabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], onDrop: [{\n                type: HostListener,\n                args: ['drop', ['$event']]\n            }] } });\nclass TTSelectableRow {\n    tt;\n    tableService;\n    rowNode;\n    ttSelectableRowDisabled;\n    selected;\n    subscription;\n    constructor(tt, tableService) {\n        this.tt = tt;\n        this.tableService = tableService;\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.tt.isSelected(this.rowNode.node);\n            });\n        }\n    }\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.tt.isSelected(this.rowNode.node);\n        }\n    }\n    onClick(event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n    }\n    onKeyDown(event) {\n        switch (event.code) {\n            case 'Enter':\n            case 'Space':\n                this.onEnterKey(event);\n                break;\n            default:\n                break;\n        }\n    }\n    onTouchEnd(event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowTouchEnd(event);\n        }\n    }\n    onEnterKey(event) {\n        if (this.tt.selectionMode === 'checkbox') {\n            this.tt.toggleNodeWithCheckbox({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n        else {\n            this.onClick(event);\n        }\n        event.preventDefault();\n    }\n    isEnabled() {\n        return this.ttSelectableRowDisabled !== true;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TTSelectableRow, deps: [{ token: TreeTable }, { token: TreeTableService }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.0.1\", type: TTSelectableRow, selector: \"[ttSelectableRow]\", inputs: { rowNode: [\"ttSelectableRow\", \"rowNode\"], ttSelectableRowDisabled: [\"ttSelectableRowDisabled\", \"ttSelectableRowDisabled\", booleanAttribute] }, host: { listeners: { \"click\": \"onClick($event)\", \"keydown\": \"onKeyDown($event)\", \"touchend\": \"onTouchEnd($event)\" }, properties: { \"class.p-highlight\": \"selected\", \"attr.data-p-highlight\": \"selected\", \"attr.aria-checked\": \"selected\" }, classAttribute: \"p-element\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TTSelectableRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttSelectableRow]',\n                    host: {\n                        class: 'p-element',\n                        '[class.p-highlight]': 'selected',\n                        '[attr.data-p-highlight]': 'selected',\n                        '[attr.aria-checked]': 'selected'\n                    }\n                }]\n        }], ctorParameters: () => [{ type: TreeTable }, { type: TreeTableService }], propDecorators: { rowNode: [{\n                type: Input,\n                args: ['ttSelectableRow']\n            }], ttSelectableRowDisabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }], onKeyDown: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }], onTouchEnd: [{\n                type: HostListener,\n                args: ['touchend', ['$event']]\n            }] } });\nclass TTSelectableRowDblClick {\n    tt;\n    tableService;\n    rowNode;\n    ttSelectableRowDisabled;\n    selected;\n    subscription;\n    constructor(tt, tableService) {\n        this.tt = tt;\n        this.tableService = tableService;\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.tt.isSelected(this.rowNode.node);\n            });\n        }\n    }\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.tt.isSelected(this.rowNode.node);\n        }\n    }\n    onClick(event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n    }\n    isEnabled() {\n        return this.ttSelectableRowDisabled !== true;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TTSelectableRowDblClick, deps: [{ token: TreeTable }, { token: TreeTableService }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.0.1\", type: TTSelectableRowDblClick, selector: \"[ttSelectableRowDblClick]\", inputs: { rowNode: [\"ttSelectableRowDblClick\", \"rowNode\"], ttSelectableRowDisabled: [\"ttSelectableRowDisabled\", \"ttSelectableRowDisabled\", booleanAttribute] }, host: { listeners: { \"dblclick\": \"onClick($event)\" }, properties: { \"class.p-highlight\": \"selected\" }, classAttribute: \"p-element\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TTSelectableRowDblClick, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttSelectableRowDblClick]',\n                    host: {\n                        class: 'p-element',\n                        '[class.p-highlight]': 'selected'\n                    }\n                }]\n        }], ctorParameters: () => [{ type: TreeTable }, { type: TreeTableService }], propDecorators: { rowNode: [{\n                type: Input,\n                args: ['ttSelectableRowDblClick']\n            }], ttSelectableRowDisabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], onClick: [{\n                type: HostListener,\n                args: ['dblclick', ['$event']]\n            }] } });\nclass TTContextMenuRow {\n    tt;\n    tableService;\n    el;\n    rowNode;\n    ttContextMenuRowDisabled;\n    selected;\n    subscription;\n    constructor(tt, tableService, el) {\n        this.tt = tt;\n        this.tableService = tableService;\n        this.el = el;\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.contextMenuSource$.subscribe((node) => {\n                this.selected = this.tt.equals(this.rowNode.node, node);\n            });\n        }\n    }\n    onContextMenu(event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowRightClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n            this.el.nativeElement.focus();\n            event.preventDefault();\n        }\n    }\n    isEnabled() {\n        return this.ttContextMenuRowDisabled !== true;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TTContextMenuRow, deps: [{ token: TreeTable }, { token: TreeTableService }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.0.1\", type: TTContextMenuRow, selector: \"[ttContextMenuRow]\", inputs: { rowNode: [\"ttContextMenuRow\", \"rowNode\"], ttContextMenuRowDisabled: [\"ttContextMenuRowDisabled\", \"ttContextMenuRowDisabled\", booleanAttribute] }, host: { listeners: { \"contextmenu\": \"onContextMenu($event)\" }, properties: { \"class.p-highlight-contextmenu\": \"selected\", \"attr.tabindex\": \"isEnabled() ? 0 : undefined\" }, classAttribute: \"p-element\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TTContextMenuRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttContextMenuRow]',\n                    host: {\n                        class: 'p-element',\n                        '[class.p-highlight-contextmenu]': 'selected',\n                        '[attr.tabindex]': 'isEnabled() ? 0 : undefined'\n                    }\n                }]\n        }], ctorParameters: () => [{ type: TreeTable }, { type: TreeTableService }, { type: i0.ElementRef }], propDecorators: { rowNode: [{\n                type: Input,\n                args: ['ttContextMenuRow']\n            }], ttContextMenuRowDisabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], onContextMenu: [{\n                type: HostListener,\n                args: ['contextmenu', ['$event']]\n            }] } });\nclass TTCheckbox {\n    tt;\n    tableService;\n    cd;\n    disabled;\n    rowNode;\n    checked;\n    partialChecked;\n    focused;\n    subscription;\n    constructor(tt, tableService, cd) {\n        this.tt = tt;\n        this.tableService = tableService;\n        this.cd = cd;\n        this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n            if (this.tt.selectionKeys) {\n                this.checked = this.tt.isNodeSelected(this.rowNode.node);\n                this.partialChecked = this.tt.isNodePartialSelected(this.rowNode.node);\n            }\n            else {\n                this.checked = this.tt.isSelected(this.rowNode.node);\n                this.partialChecked = this.rowNode.node.partialSelected;\n            }\n            this.cd.markForCheck();\n        });\n    }\n    ngOnInit() {\n        if (this.tt.selectionKeys) {\n            this.checked = this.tt.isNodeSelected(this.rowNode.node);\n            this.partialChecked = this.tt.isNodePartialSelected(this.rowNode.node);\n        }\n        else {\n            // for backward compatibility\n            this.checked = this.tt.isSelected(this.rowNode.node);\n            this.partialChecked = this.rowNode.node.partialSelected;\n        }\n    }\n    onClick(event) {\n        if (!this.disabled) {\n            if (this.tt.selectionKeys) {\n                const _check = !this.checked;\n                this.tt.toggleCheckbox({\n                    originalEvent: event,\n                    check: _check,\n                    rowNode: this.rowNode\n                });\n            }\n            else {\n                this.tt.toggleNodeWithCheckbox({\n                    originalEvent: event,\n                    rowNode: this.rowNode\n                });\n            }\n        }\n        DomHandler.clearSelection();\n    }\n    onFocus() {\n        this.focused = true;\n    }\n    onBlur() {\n        this.focused = false;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TTCheckbox, deps: [{ token: TreeTable }, { token: TreeTableService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"18.0.1\", type: TTCheckbox, selector: \"p-treeTableCheckbox\", inputs: { disabled: [\"disabled\", \"disabled\", booleanAttribute], rowNode: [\"value\", \"rowNode\"] }, host: { classAttribute: \"p-element\" }, ngImport: i0, template: `\n        <div class=\"p-checkbox p-component\" [ngClass]=\"{ 'p-checkbox-focused': focused, 'p-variant-filled': tt.config.inputStyle() === 'filled' }\" (click)=\"onClick($event)\">\n            <div class=\"p-hidden-accessible\">\n                <input type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" tabindex=\"-1\" />\n            </div>\n            <div #box [ngClass]=\"{ 'p-checkbox-box': true, 'p-highlight': checked, 'p-focus': focused, 'p-indeterminate': partialChecked, 'p-disabled': disabled }\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <ng-container *ngIf=\"!tt.checkboxIconTemplate\">\n                    <CheckIcon [styleClass]=\"'p-checkbox-icon'\" *ngIf=\"checked\" />\n                    <MinusIcon [styleClass]=\"'p-checkbox-icon'\" *ngIf=\"partialChecked\" />\n                </ng-container>\n                <span *ngIf=\"tt.checkboxIconTemplate\">\n                    <ng-template *ngTemplateOutlet=\"tt.checkboxIconTemplate; context: { $implicit: checked, partialSelected: partialChecked }\"></ng-template>\n                </span>\n            </div>\n        </div>\n    `, isInline: true, dependencies: [{ kind: \"directive\", type: i0.forwardRef(() => i2.NgClass), selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i0.forwardRef(() => i2.NgIf), selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i0.forwardRef(() => i2.NgTemplateOutlet), selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"component\", type: i0.forwardRef(() => CheckIcon), selector: \"CheckIcon\" }, { kind: \"component\", type: i0.forwardRef(() => MinusIcon), selector: \"MinusIcon\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TTCheckbox, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-treeTableCheckbox',\n                    template: `\n        <div class=\"p-checkbox p-component\" [ngClass]=\"{ 'p-checkbox-focused': focused, 'p-variant-filled': tt.config.inputStyle() === 'filled' }\" (click)=\"onClick($event)\">\n            <div class=\"p-hidden-accessible\">\n                <input type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" tabindex=\"-1\" />\n            </div>\n            <div #box [ngClass]=\"{ 'p-checkbox-box': true, 'p-highlight': checked, 'p-focus': focused, 'p-indeterminate': partialChecked, 'p-disabled': disabled }\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <ng-container *ngIf=\"!tt.checkboxIconTemplate\">\n                    <CheckIcon [styleClass]=\"'p-checkbox-icon'\" *ngIf=\"checked\" />\n                    <MinusIcon [styleClass]=\"'p-checkbox-icon'\" *ngIf=\"partialChecked\" />\n                </ng-container>\n                <span *ngIf=\"tt.checkboxIconTemplate\">\n                    <ng-template *ngTemplateOutlet=\"tt.checkboxIconTemplate; context: { $implicit: checked, partialSelected: partialChecked }\"></ng-template>\n                </span>\n            </div>\n        </div>\n    `,\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    host: {\n                        class: 'p-element'\n                    }\n                }]\n        }], ctorParameters: () => [{ type: TreeTable }, { type: TreeTableService }, { type: i0.ChangeDetectorRef }], propDecorators: { disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], rowNode: [{\n                type: Input,\n                args: ['value']\n            }] } });\nclass TTHeaderCheckbox {\n    tt;\n    tableService;\n    cd;\n    boxViewChild;\n    checked;\n    focused;\n    disabled;\n    selectionChangeSubscription;\n    valueChangeSubscription;\n    constructor(tt, tableService, cd) {\n        this.tt = tt;\n        this.tableService = tableService;\n        this.cd = cd;\n        this.valueChangeSubscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n        this.selectionChangeSubscription = this.tt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n    }\n    ngOnInit() {\n        this.checked = this.updateCheckedState();\n    }\n    onClick(event, checked) {\n        if ((this.tt.value || this.tt.filteredNodes) && (this.tt.value.length > 0 || this.tt.filteredNodes.length > 0)) {\n            this.tt.toggleNodesWithCheckbox(event, !checked);\n        }\n        DomHandler.clearSelection();\n    }\n    onFocus() {\n        this.focused = true;\n    }\n    onBlur() {\n        this.focused = false;\n    }\n    ngOnDestroy() {\n        if (this.selectionChangeSubscription) {\n            this.selectionChangeSubscription.unsubscribe();\n        }\n        if (this.valueChangeSubscription) {\n            this.valueChangeSubscription.unsubscribe();\n        }\n    }\n    updateCheckedState() {\n        this.cd.markForCheck();\n        let checked;\n        const data = this.tt.filteredNodes || this.tt.value;\n        if (data) {\n            if (this.tt.selectionKeys) {\n                for (let node of data) {\n                    if (this.tt.isNodeSelected(node)) {\n                        checked = true;\n                    }\n                    else {\n                        checked = false;\n                        break;\n                    }\n                }\n            }\n            if (!this.tt.selectionKeys) {\n                // legacy selection support, will be removed in v18\n                for (let node of data) {\n                    if (this.tt.isSelected(node)) {\n                        checked = true;\n                    }\n                    else {\n                        checked = false;\n                        break;\n                    }\n                }\n            }\n        }\n        else {\n            checked = false;\n        }\n        return checked;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TTHeaderCheckbox, deps: [{ token: TreeTable }, { token: TreeTableService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.0.1\", type: TTHeaderCheckbox, selector: \"p-treeTableHeaderCheckbox\", host: { classAttribute: \"p-element\" }, viewQueries: [{ propertyName: \"boxViewChild\", first: true, predicate: [\"box\"], descendants: true }], ngImport: i0, template: `\n        <div class=\"p-checkbox p-component\" [ngClass]=\"{ 'p-checkbox-focused': focused }\" (click)=\"onClick($event, cb.checked)\">\n            <div class=\"p-hidden-accessible\">\n                <input #cb type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"!tt.value || tt.value.length === 0\" />\n            </div>\n            <div #box [ngClass]=\"{ 'p-checkbox-box': true, 'p-highlight': checked, 'p-focus': focused, 'p-disabled': !tt.value || tt.value.length === 0 }\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <ng-container *ngIf=\"!tt.headerCheckboxIconTemplate\">\n                    <CheckIcon *ngIf=\"checked\" [styleClass]=\"'p-checkbox-icon'\" />\n                </ng-container>\n                <span class=\"p-checkbox-icon\" *ngIf=\"tt.headerCheckboxIconTemplate\">\n                    <ng-template *ngTemplateOutlet=\"tt.headerCheckboxIconTemplate; context: { $implicit: checked }\"></ng-template>\n                </span>\n            </div>\n        </div>\n    `, isInline: true, dependencies: [{ kind: \"directive\", type: i0.forwardRef(() => i2.NgClass), selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i0.forwardRef(() => i2.NgIf), selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i0.forwardRef(() => i2.NgTemplateOutlet), selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"component\", type: i0.forwardRef(() => CheckIcon), selector: \"CheckIcon\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TTHeaderCheckbox, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-treeTableHeaderCheckbox',\n                    template: `\n        <div class=\"p-checkbox p-component\" [ngClass]=\"{ 'p-checkbox-focused': focused }\" (click)=\"onClick($event, cb.checked)\">\n            <div class=\"p-hidden-accessible\">\n                <input #cb type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"!tt.value || tt.value.length === 0\" />\n            </div>\n            <div #box [ngClass]=\"{ 'p-checkbox-box': true, 'p-highlight': checked, 'p-focus': focused, 'p-disabled': !tt.value || tt.value.length === 0 }\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <ng-container *ngIf=\"!tt.headerCheckboxIconTemplate\">\n                    <CheckIcon *ngIf=\"checked\" [styleClass]=\"'p-checkbox-icon'\" />\n                </ng-container>\n                <span class=\"p-checkbox-icon\" *ngIf=\"tt.headerCheckboxIconTemplate\">\n                    <ng-template *ngTemplateOutlet=\"tt.headerCheckboxIconTemplate; context: { $implicit: checked }\"></ng-template>\n                </span>\n            </div>\n        </div>\n    `,\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    host: {\n                        class: 'p-element'\n                    }\n                }]\n        }], ctorParameters: () => [{ type: TreeTable }, { type: TreeTableService }, { type: i0.ChangeDetectorRef }], propDecorators: { boxViewChild: [{\n                type: ViewChild,\n                args: ['box']\n            }] } });\nclass TTEditableColumn {\n    tt;\n    el;\n    zone;\n    data;\n    field;\n    ttEditableColumnDisabled;\n    constructor(tt, el, zone) {\n        this.tt = tt;\n        this.el = el;\n        this.zone = zone;\n    }\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'p-editable-column');\n        }\n    }\n    onClick(event) {\n        if (this.isEnabled()) {\n            this.tt.editingCellClick = true;\n            if (this.tt.editingCell) {\n                if (this.tt.editingCell !== this.el.nativeElement) {\n                    if (!this.tt.isEditingCellValid()) {\n                        return;\n                    }\n                    DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n                    this.openCell();\n                }\n            }\n            else {\n                this.openCell();\n            }\n        }\n    }\n    openCell() {\n        this.tt.updateEditingCell(this.el.nativeElement, this.data, this.field);\n        DomHandler.addClass(this.el.nativeElement, 'p-cell-editing');\n        this.tt.onEditInit.emit({ field: this.field, data: this.data });\n        this.tt.editingCellClick = true;\n        this.zone.runOutsideAngular(() => {\n            setTimeout(() => {\n                let focusable = DomHandler.findSingle(this.el.nativeElement, 'input, textarea');\n                if (focusable) {\n                    focusable.focus();\n                }\n            }, 50);\n        });\n    }\n    closeEditingCell() {\n        DomHandler.removeClass(this.tt.editingCell, 'p-checkbox-icon');\n        this.tt.editingCell = null;\n        this.tt.unbindDocumentEditListener();\n    }\n    onKeyDown(event) {\n        if (this.isEnabled()) {\n            if (event.code == 'Enter' && !event.shiftKey) {\n                if (this.tt.isEditingCellValid()) {\n                    DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n                    this.closeEditingCell();\n                    this.tt.onEditComplete.emit({ field: this.field, data: this.data });\n                }\n                event.preventDefault();\n            }\n            else if (event.code == 'Escape') {\n                if (this.tt.isEditingCellValid()) {\n                    DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n                    this.closeEditingCell();\n                    this.tt.onEditCancel.emit({ field: this.field, data: this.data });\n                }\n                event.preventDefault();\n            }\n            else if (event.code == 'Tab') {\n                this.tt.onEditComplete.emit({ field: this.field, data: this.data });\n                if (event.shiftKey)\n                    this.moveToPreviousCell(event);\n                else\n                    this.moveToNextCell(event);\n            }\n        }\n    }\n    findCell(element) {\n        if (element) {\n            let cell = element;\n            while (cell && !DomHandler.hasClass(cell, 'p-cell-editing')) {\n                cell = cell.parentElement;\n            }\n            return cell;\n        }\n        else {\n            return null;\n        }\n    }\n    moveToPreviousCell(event) {\n        let currentCell = this.findCell(event.target);\n        let row = currentCell.parentElement;\n        let targetCell = this.findPreviousEditableColumn(currentCell);\n        if (targetCell) {\n            DomHandler.invokeElementMethod(targetCell, 'click');\n            event.preventDefault();\n        }\n    }\n    moveToNextCell(event) {\n        let currentCell = this.findCell(event.target);\n        let row = currentCell.parentElement;\n        let targetCell = this.findNextEditableColumn(currentCell);\n        if (targetCell) {\n            DomHandler.invokeElementMethod(targetCell, 'click');\n            event.preventDefault();\n        }\n    }\n    findPreviousEditableColumn(cell) {\n        let prevCell = cell.previousElementSibling;\n        if (!prevCell) {\n            let previousRow = cell.parentElement ? cell.parentElement.previousElementSibling : null;\n            if (previousRow) {\n                prevCell = previousRow.lastElementChild;\n            }\n        }\n        if (prevCell) {\n            if (DomHandler.hasClass(prevCell, 'p-editable-column'))\n                return prevCell;\n            else\n                return this.findPreviousEditableColumn(prevCell);\n        }\n        else {\n            return null;\n        }\n    }\n    findNextEditableColumn(cell) {\n        let nextCell = cell.nextElementSibling;\n        if (!nextCell) {\n            let nextRow = cell.parentElement ? cell.parentElement.nextElementSibling : null;\n            if (nextRow) {\n                nextCell = nextRow.firstElementChild;\n            }\n        }\n        if (nextCell) {\n            if (DomHandler.hasClass(nextCell, 'p-editable-column'))\n                return nextCell;\n            else\n                return this.findNextEditableColumn(nextCell);\n        }\n        else {\n            return null;\n        }\n    }\n    isEnabled() {\n        return this.ttEditableColumnDisabled !== true;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TTEditableColumn, deps: [{ token: TreeTable }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.0.1\", type: TTEditableColumn, selector: \"[ttEditableColumn]\", inputs: { data: [\"ttEditableColumn\", \"data\"], field: [\"ttEditableColumnField\", \"field\"], ttEditableColumnDisabled: [\"ttEditableColumnDisabled\", \"ttEditableColumnDisabled\", booleanAttribute] }, host: { listeners: { \"click\": \"onClick($event)\", \"keydown\": \"onKeyDown($event)\" }, classAttribute: \"p-element\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TTEditableColumn, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttEditableColumn]',\n                    host: {\n                        class: 'p-element'\n                    }\n                }]\n        }], ctorParameters: () => [{ type: TreeTable }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { data: [{\n                type: Input,\n                args: ['ttEditableColumn']\n            }], field: [{\n                type: Input,\n                args: ['ttEditableColumnField']\n            }], ttEditableColumnDisabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }], onKeyDown: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }] } });\nclass TreeTableCellEditor {\n    tt;\n    editableColumn;\n    templates;\n    inputTemplate;\n    outputTemplate;\n    constructor(tt, editableColumn) {\n        this.tt = tt;\n        this.editableColumn = editableColumn;\n    }\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'input':\n                    this.inputTemplate = item.template;\n                    break;\n                case 'output':\n                    this.outputTemplate = item.template;\n                    break;\n            }\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TreeTableCellEditor, deps: [{ token: TreeTable }, { token: TTEditableColumn }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.0.1\", type: TreeTableCellEditor, selector: \"p-treeTableCellEditor\", host: { classAttribute: \"p-element\" }, queries: [{ propertyName: \"templates\", predicate: PrimeTemplate }], ngImport: i0, template: `\n        <ng-container *ngIf=\"tt.editingCell === editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"inputTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!tt.editingCell || tt.editingCell !== editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"outputTemplate\"></ng-container>\n        </ng-container>\n    `, isInline: true, dependencies: [{ kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }], encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TreeTableCellEditor, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-treeTableCellEditor',\n                    template: `\n        <ng-container *ngIf=\"tt.editingCell === editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"inputTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!tt.editingCell || tt.editingCell !== editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"outputTemplate\"></ng-container>\n        </ng-container>\n    `,\n                    encapsulation: ViewEncapsulation.None,\n                    host: {\n                        class: 'p-element'\n                    }\n                }]\n        }], ctorParameters: () => [{ type: TreeTable }, { type: TTEditableColumn }], propDecorators: { templates: [{\n                type: ContentChildren,\n                args: [PrimeTemplate]\n            }] } });\nclass TTRow {\n    tt;\n    el;\n    zone;\n    get level() {\n        return this.rowNode?.['level'] + 1;\n    }\n    get styleClass() {\n        return this.rowNode?.node['styleClass'] || '';\n    }\n    get expanded() {\n        return this.rowNode?.node['expanded'];\n    }\n    rowNode;\n    constructor(tt, el, zone) {\n        this.tt = tt;\n        this.el = el;\n        this.zone = zone;\n    }\n    onKeyDown(event) {\n        switch (event.code) {\n            case 'ArrowDown':\n                this.onArrowDownKey(event);\n                break;\n            case 'ArrowUp':\n                this.onArrowUpKey(event);\n                break;\n            case 'ArrowRight':\n                this.onArrowRightKey(event);\n                break;\n            case 'ArrowLeft':\n                this.onArrowLeftKey(event);\n                break;\n            case 'Tab':\n                this.onTabKey(event);\n                break;\n            case 'Home':\n                this.onHomeKey(event);\n                break;\n            case 'End':\n                this.onEndKey(event);\n                break;\n            default:\n                break;\n        }\n    }\n    onArrowDownKey(event) {\n        let nextRow = this.el?.nativeElement?.nextElementSibling;\n        if (nextRow) {\n            this.focusRowChange(event.currentTarget, nextRow);\n        }\n        event.preventDefault();\n    }\n    onArrowUpKey(event) {\n        let prevRow = this.el?.nativeElement?.previousElementSibling;\n        if (prevRow) {\n            this.focusRowChange(event.currentTarget, prevRow);\n        }\n        event.preventDefault();\n    }\n    onArrowRightKey(event) {\n        const currentTarget = event.currentTarget;\n        const isHiddenIcon = DomHandler.findSingle(currentTarget, 'button').style.visibility === 'hidden';\n        if (!isHiddenIcon && !this.expanded && this.rowNode.node['children']) {\n            this.expand(event);\n            currentTarget.tabIndex = -1;\n        }\n        event.preventDefault();\n    }\n    onArrowLeftKey(event) {\n        const container = this.tt.containerViewChild?.nativeElement;\n        const expandedRows = DomHandler.find(container, '[aria-expanded=\"true\"]');\n        const lastExpandedRow = expandedRows[expandedRows.length - 1];\n        if (this.expanded) {\n            this.collapse(event);\n        }\n        if (lastExpandedRow) {\n            this.tt.toggleRowIndex = DomHandler.index(lastExpandedRow);\n        }\n        this.restoreFocus();\n        event.preventDefault();\n    }\n    onHomeKey(event) {\n        const firstElement = DomHandler.findSingle(this.tt.containerViewChild?.nativeElement, `tr[aria-level=\"${this.level}\"]`);\n        firstElement && DomHandler.focus(firstElement);\n        event.preventDefault();\n    }\n    onEndKey(event) {\n        const nodes = DomHandler.find(this.tt.containerViewChild?.nativeElement, `tr[aria-level=\"${this.level}\"]`);\n        const lastElement = nodes[nodes.length - 1];\n        DomHandler.focus(lastElement);\n        event.preventDefault();\n    }\n    onTabKey(event) {\n        const rows = this.el.nativeElement ? [...DomHandler.find(this.el.nativeElement.parentNode, 'tr')] : undefined;\n        if (rows && ObjectUtils.isNotEmpty(rows)) {\n            const hasSelectedRow = rows.some((row) => DomHandler.getAttribute(row, 'data-p-highlight') || row.getAttribute('aria-checked') === 'true');\n            rows.forEach((row) => {\n                row.tabIndex = -1;\n            });\n            if (hasSelectedRow) {\n                const selectedNodes = rows.filter((node) => DomHandler.getAttribute(node, 'data-p-highlight') || node.getAttribute('aria-checked') === 'true');\n                selectedNodes[0].tabIndex = 0;\n                return;\n            }\n            rows[0].tabIndex = 0;\n        }\n    }\n    expand(event) {\n        this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n        this.rowNode.node['expanded'] = true;\n        this.tt.updateSerializedValue();\n        this.tt.tableService.onUIUpdate(this.tt.value);\n        this.rowNode.node['children'] ? this.restoreFocus(this.tt.toggleRowIndex + 1) : this.restoreFocus();\n        this.tt.onNodeExpand.emit({\n            originalEvent: event,\n            node: this.rowNode.node\n        });\n    }\n    collapse(event) {\n        this.rowNode.node['expanded'] = false;\n        this.tt.updateSerializedValue();\n        this.tt.tableService.onUIUpdate(this.tt.value);\n        this.tt.onNodeCollapse.emit({ originalEvent: event, node: this.rowNode.node });\n    }\n    focusRowChange(firstFocusableRow, currentFocusedRow, lastVisibleDescendant) {\n        firstFocusableRow.tabIndex = '-1';\n        currentFocusedRow.tabIndex = '0';\n        DomHandler.focus(currentFocusedRow);\n    }\n    restoreFocus(index) {\n        this.zone.runOutsideAngular(() => {\n            setTimeout(() => {\n                const container = this.tt.containerViewChild?.nativeElement;\n                const row = DomHandler.findSingle(container, '.p-treetable-tbody').children[index || this.tt.toggleRowIndex];\n                const rows = [...DomHandler.find(container, 'tr')];\n                rows &&\n                    rows.forEach((r) => {\n                        if (!row.isSameNode(r)) {\n                            r.tabIndex = -1;\n                        }\n                    });\n                if (row) {\n                    row.tabIndex = 0;\n                    row.focus();\n                }\n            }, 25);\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TTRow, deps: [{ token: TreeTable }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.0.1\", type: TTRow, selector: \"[ttRow]\", inputs: { rowNode: [\"ttRow\", \"rowNode\"] }, host: { listeners: { \"keydown\": \"onKeyDown($event)\" }, properties: { \"class\": \"'p-element ' + styleClass\", \"attr.tabindex\": \"'0'\", \"attr.aria-expanded\": \"expanded\", \"attr.aria-level\": \"level\", \"attr.data-pc-section\": \"row\", \"attr.role\": \"row\" }, classAttribute: \"p-element\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TTRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttRow]',\n                    host: {\n                        class: 'p-element',\n                        '[class]': `'p-element ' + styleClass`,\n                        '[attr.tabindex]': \"'0'\",\n                        '[attr.aria-expanded]': 'expanded',\n                        '[attr.aria-level]': 'level',\n                        '[attr.data-pc-section]': 'row',\n                        '[attr.role]': 'row'\n                    }\n                }]\n        }], ctorParameters: () => [{ type: TreeTable }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { rowNode: [{\n                type: Input,\n                args: ['ttRow']\n            }], onKeyDown: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }] } });\nclass TreeTableToggler {\n    tt;\n    config;\n    rowNode;\n    constructor(tt, config) {\n        this.tt = tt;\n        this.config = config;\n    }\n    get toggleButtonAriaLabel() {\n        return this.config.translation ? (this.rowNode.expanded ? this.config.translation.aria.collapseRow : this.config.translation.aria.expandRow) : undefined;\n    }\n    onClick(event) {\n        this.rowNode.node.expanded = !this.rowNode.node.expanded;\n        if (this.rowNode.node.expanded) {\n            this.tt.onNodeExpand.emit({\n                originalEvent: event,\n                node: this.rowNode.node\n            });\n        }\n        else {\n            this.tt.onNodeCollapse.emit({\n                originalEvent: event,\n                node: this.rowNode.node\n            });\n        }\n        this.tt.updateSerializedValue();\n        this.tt.tableService.onUIUpdate(this.tt.value);\n        event.preventDefault();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TreeTableToggler, deps: [{ token: TreeTable }, { token: i1.PrimeNGConfig }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.0.1\", type: TreeTableToggler, selector: \"p-treeTableToggler\", inputs: { rowNode: \"rowNode\" }, host: { classAttribute: \"p-element\" }, ngImport: i0, template: `\n        <button\n            type=\"button\"\n            class=\"p-treetable-toggler p-link\"\n            (click)=\"onClick($event)\"\n            tabindex=\"-1\"\n            pRipple\n            [ngStyle]=\"{\n                visibility: rowNode.node.leaf === false || (rowNode.node.children && rowNode.node.children.length) ? 'visible' : 'hidden',\n                'margin-left': rowNode.level * 16 + 'px'\n            }\"\n            [attr.data-pc-section]=\"'rowtoggler'\"\n            [attr.data-pc-group-section]=\"'rowactionbutton'\"\n            [attr.aria-label]=\"toggleButtonAriaLabel\"\n        >\n            <ng-container *ngIf=\"!tt.togglerIconTemplate\">\n                <ChevronDownIcon *ngIf=\"rowNode.node.expanded\" [attr.aria-hidden]=\"true\" />\n                <ChevronRightIcon *ngIf=\"!rowNode.node.expanded\" [attr.aria-hidden]=\"true\" />\n            </ng-container>\n            <ng-template *ngTemplateOutlet=\"tt.togglerIconTemplate; context: { $implicit: rowNode.node.expanded }\"></ng-template>\n        </button>\n    `, isInline: true, dependencies: [{ kind: \"directive\", type: i0.forwardRef(() => i2.NgIf), selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i0.forwardRef(() => i2.NgTemplateOutlet), selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i0.forwardRef(() => i2.NgStyle), selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { kind: \"directive\", type: i0.forwardRef(() => i5.Ripple), selector: \"[pRipple]\" }, { kind: \"component\", type: i0.forwardRef(() => ChevronDownIcon), selector: \"ChevronDownIcon\" }, { kind: \"component\", type: i0.forwardRef(() => ChevronRightIcon), selector: \"ChevronRightIcon\" }], encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TreeTableToggler, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-treeTableToggler',\n                    template: `\n        <button\n            type=\"button\"\n            class=\"p-treetable-toggler p-link\"\n            (click)=\"onClick($event)\"\n            tabindex=\"-1\"\n            pRipple\n            [ngStyle]=\"{\n                visibility: rowNode.node.leaf === false || (rowNode.node.children && rowNode.node.children.length) ? 'visible' : 'hidden',\n                'margin-left': rowNode.level * 16 + 'px'\n            }\"\n            [attr.data-pc-section]=\"'rowtoggler'\"\n            [attr.data-pc-group-section]=\"'rowactionbutton'\"\n            [attr.aria-label]=\"toggleButtonAriaLabel\"\n        >\n            <ng-container *ngIf=\"!tt.togglerIconTemplate\">\n                <ChevronDownIcon *ngIf=\"rowNode.node.expanded\" [attr.aria-hidden]=\"true\" />\n                <ChevronRightIcon *ngIf=\"!rowNode.node.expanded\" [attr.aria-hidden]=\"true\" />\n            </ng-container>\n            <ng-template *ngTemplateOutlet=\"tt.togglerIconTemplate; context: { $implicit: rowNode.node.expanded }\"></ng-template>\n        </button>\n    `,\n                    encapsulation: ViewEncapsulation.None,\n                    host: {\n                        class: 'p-element'\n                    }\n                }]\n        }], ctorParameters: () => [{ type: TreeTable }, { type: i1.PrimeNGConfig }], propDecorators: { rowNode: [{\n                type: Input\n            }] } });\nclass TreeTableModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TreeTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.0.1\", ngImport: i0, type: TreeTableModule, declarations: [TreeTable, TreeTableToggler, TTScrollableView, TTBody, TTSortableColumn, TTSortIcon, TTResizableColumn, TTRow, TTReorderableColumn, TTSelectableRow, TTSelectableRowDblClick, TTContextMenuRow, TTCheckbox, TTHeaderCheckbox, TTEditableColumn, TreeTableCellEditor], imports: [CommonModule, PaginatorModule, RippleModule, ScrollerModule, SpinnerIcon, ArrowDownIcon, ArrowUpIcon, SortAltIcon, SortAmountUpAltIcon, SortAmountDownIcon, CheckIcon, MinusIcon, ChevronDownIcon, ChevronRightIcon], exports: [TreeTable, SharedModule, TreeTableToggler, TTSortableColumn, TTSortIcon, TTResizableColumn, TTRow, TTReorderableColumn, TTSelectableRow, TTSelectableRowDblClick, TTContextMenuRow, TTCheckbox, TTHeaderCheckbox, TTEditableColumn, TreeTableCellEditor, ScrollerModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TreeTableModule, imports: [CommonModule, PaginatorModule, RippleModule, ScrollerModule, SpinnerIcon, ArrowDownIcon, ArrowUpIcon, SortAltIcon, SortAmountUpAltIcon, SortAmountDownIcon, CheckIcon, MinusIcon, ChevronDownIcon, ChevronRightIcon, SharedModule,\n            ScrollerModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.1\", ngImport: i0, type: TreeTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, PaginatorModule, RippleModule, ScrollerModule, SpinnerIcon, ArrowDownIcon, ArrowUpIcon, SortAltIcon, SortAmountUpAltIcon, SortAmountDownIcon, CheckIcon, MinusIcon, ChevronDownIcon, ChevronRightIcon],\n                    exports: [\n                        TreeTable,\n                        SharedModule,\n                        TreeTableToggler,\n                        TTSortableColumn,\n                        TTSortIcon,\n                        TTResizableColumn,\n                        TTRow,\n                        TTReorderableColumn,\n                        TTSelectableRow,\n                        TTSelectableRowDblClick,\n                        TTContextMenuRow,\n                        TTCheckbox,\n                        TTHeaderCheckbox,\n                        TTEditableColumn,\n                        TreeTableCellEditor,\n                        ScrollerModule\n                    ],\n                    declarations: [\n                        TreeTable,\n                        TreeTableToggler,\n                        TTScrollableView,\n                        TTBody,\n                        TTSortableColumn,\n                        TTSortIcon,\n                        TTResizableColumn,\n                        TTRow,\n                        TTReorderableColumn,\n                        TTSelectableRow,\n                        TTSelectableRowDblClick,\n                        TTContextMenuRow,\n                        TTCheckbox,\n                        TTHeaderCheckbox,\n                        TTEditableColumn,\n                        TreeTableCellEditor\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TTBody, TTCheckbox, TTContextMenuRow, TTEditableColumn, TTHeaderCheckbox, TTReorderableColumn, TTResizableColumn, TTRow, TTScrollableView, TTSelectableRow, TTSelectableRowDblClick, TTSortIcon, TTSortableColumn, TreeTable, TreeTableCellEditor, TreeTableModule, TreeTableService, TreeTableToggler };\n"],"mappings":"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AG,IAAI;EACpB;AACJ;AACA;AACA;EACI6N,gBAAgB,GAAG,CAAC;EACpB;AACJ;AACA;AACA;EACIC,QAAQ,GAAG,QAAQ;EACnB;AACJ;AACA;AACA;EACIC,eAAe,GAAG,IAAI;EACtB;AACJ;AACA;AACA;EACIC,UAAU;EACV;AACJ;AACA;AACA;EACIC,aAAa;EACb;AACJ;AACA;AACA;EACIC,oBAAoB;EACpB;AACJ;AACA;AACA;EACIC,wBAAwB,GAAG,UAAU;EACrC;AACJ;AACA;AACA;EACIC,OAAO;EACP;AACJ;AACA;AACA;EACIC,gBAAgB,GAAG,KAAK;EACxB;AACJ;AACA;AACA;EACIC,kBAAkB,GAAG,YAAY;EACjC;AACJ;AACA;AACA;EACIC,QAAQ;EACR;AACJ;AACA;AACA;EACIC,OAAO;EACP;AACJ;AACA;AACA;EACIlS,WAAW;EACX;AACJ;AACA;AACA;EACImS,UAAU,GAAG,IAAI;EACjB;AACJ;AACA;AACA;EACIC,UAAU;EACV;AACJ;AACA;AACA;EACIxN,YAAY;EACZ;AACJ;AACA;AACA;EACIyN,aAAa;EACb;AACJ;AACA;AACA;EACI9H,qBAAqB;EACrB;AACJ;AACA;AACA;EACIG,oBAAoB;EACpB;AACJ;AACA;AACA;EACI4H,kBAAkB,GAAG,GAAG;EACxB;AACJ;AACA;AACA;EACI3N,WAAW;EACX;AACJ;AACA;AACA;EACID,aAAa;EACb;AACJ;AACA;AACA;EACI6N,gBAAgB;EAChB;AACJ;AACA;AACA;EACIC,gBAAgB,GAAG,KAAK;EACxB;AACJ;AACA;AACA;EACIC,kBAAkB;EAClB;AACJ;AACA;AACA;EACIC,WAAW;EACX;AACJ;AACA;AACA;EACIC,UAAU,GAAGA,CAACC,KAAK,EAAEC,IAAI,KAAKA,IAAI;EAClC;AACJ;AACA;AACA;EACIC,OAAO,GAAG,CAAC,CAAC;EACZ;AACJ;AACA;AACA;EACIC,kBAAkB;EAClB;AACJ;AACA;AACA;EACIC,WAAW,GAAG,GAAG;EACjB;AACJ;AACA;AACA;EACIC,UAAU,GAAG,SAAS;EACtB;AACJ;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}