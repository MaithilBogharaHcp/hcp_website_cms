{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { NativeDateAdapter } from '@angular/material/core';\nimport { Injectable, inject } from '@angular/core';\nimport { DateAdapter } from '@angular/material/core';\nimport { DateRange } from '@angular/material/datepicker';\nexport class CustomDateAdapter extends NativeDateAdapter {\n  getFirstDayOfWeek() {\n    return 1;\n  }\n  format(date, displayFormat) {\n    const day = this._to2digit(date.getDate());\n    const month = this._to2digit(date.getMonth() + 1);\n    const year = date.getFullYear();\n    return `${day}/${month}/${year}`;\n  }\n  _to2digit(value) {\n    return value < 10 ? '0' + value : value.toString();\n  }\n  getMonthNames(style) {\n    return style === 'short' ? ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'] : super.getMonthNames(style);\n  }\n}\nlet WeekRangeSelectionStrategy = class WeekRangeSelectionStrategy {\n  constructor() {\n    this._dateAdapter = inject(DateAdapter);\n  }\n  selectionFinished(date) {\n    return this._createWeekRange(date);\n  }\n  createPreview(activeDate) {\n    return this._createWeekRange(activeDate);\n  }\n  _createWeekRange(date) {\n    if (date) {\n      const dayOfWeek = this._dateAdapter.getDayOfWeek(date);\n      const daysToMonday = dayOfWeek === 0 ? 6 : dayOfWeek - 1;\n      const start = this._dateAdapter.addCalendarDays(date, -daysToMonday);\n      const end = this._dateAdapter.addCalendarDays(start, 6);\n      return new DateRange(start, end);\n    }\n    return new DateRange(null, null);\n  }\n};\nWeekRangeSelectionStrategy = __decorate([Injectable()], WeekRangeSelectionStrategy);\nexport { WeekRangeSelectionStrategy };","map":{"version":3,"names":["NativeDateAdapter","Injectable","inject","DateAdapter","DateRange","CustomDateAdapter","getFirstDayOfWeek","format","date","displayFormat","day","_to2digit","getDate","month","getMonth","year","getFullYear","value","toString","getMonthNames","style","WeekRangeSelectionStrategy","constructor","_dateAdapter","selectionFinished","_createWeekRange","createPreview","activeDate","dayOfWeek","getDayOfWeek","daysToMonday","start","addCalendarDays","end","__decorate"],"sources":["D:\\Maithil\\website-cms\\src\\app\\components\\pages\\press-news\\custom-date-adapter.ts"],"sourcesContent":["import { NativeDateAdapter } from '@angular/material/core';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { DateAdapter } from '@angular/material/core';\r\nimport {\r\n  DateRange,\r\n  MatDateRangeSelectionStrategy,\r\n} from '@angular/material/datepicker';\r\n\r\nexport class CustomDateAdapter extends NativeDateAdapter {\r\n  override getFirstDayOfWeek(): number {\r\n    return 1;\r\n  }\r\n\r\n  override format(date: Date, displayFormat: Object): string {\r\n    const day = this._to2digit(date.getDate());\r\n    const month = this._to2digit(date.getMonth() + 1);\r\n    const year = date.getFullYear();\r\n    return `${day}/${month}/${year}`;\r\n  }\r\n\r\n  private _to2digit(value: number): string {\r\n    return value < 10 ? '0' + value : value.toString();\r\n  }\r\n\r\n  override getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    return style === 'short'\r\n      ? [\r\n          'Jan',\r\n          'Feb',\r\n          'Mar',\r\n          'Apr',\r\n          'May',\r\n          'Jun',\r\n          'Jul',\r\n          'Aug',\r\n          'Sep',\r\n          'Oct',\r\n          'Nov',\r\n          'Dec',\r\n        ]\r\n      : super.getMonthNames(style);\r\n  }\r\n}\r\n\r\n@Injectable()\r\nexport class WeekRangeSelectionStrategy<D>\r\n  implements MatDateRangeSelectionStrategy<D>\r\n{\r\n  private _dateAdapter = inject<DateAdapter<D>>(DateAdapter<D>);\r\n\r\n  selectionFinished(date: D | null): DateRange<D> {\r\n    return this._createWeekRange(date);\r\n  }\r\n\r\n  createPreview(activeDate: D | null): DateRange<D> {\r\n    return this._createWeekRange(activeDate);\r\n  }\r\n\r\n  private _createWeekRange(date: D | null): DateRange<D> {\r\n    if (date) {\r\n      const dayOfWeek = this._dateAdapter.getDayOfWeek(date);\r\n      const daysToMonday = dayOfWeek === 0 ? 6 : dayOfWeek - 1;\r\n      const start = this._dateAdapter.addCalendarDays(date, -daysToMonday);\r\n\r\n      const end = this._dateAdapter.addCalendarDays(start, 6);\r\n\r\n      return new DateRange<D>(start, end);\r\n    }\r\n\r\n    return new DateRange<D>(null, null);\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,iBAAiB,QAAQ,wBAAwB;AAC1D,SAASC,UAAU,EAAEC,MAAM,QAAQ,eAAe;AAClD,SAASC,WAAW,QAAQ,wBAAwB;AACpD,SACEC,SAAS,QAEJ,8BAA8B;AAErC,OAAM,MAAOC,iBAAkB,SAAQL,iBAAiB;EAC7CM,iBAAiBA,CAAA;IACxB,OAAO,CAAC;EACV;EAESC,MAAMA,CAACC,IAAU,EAAEC,aAAqB;IAC/C,MAAMC,GAAG,GAAG,IAAI,CAACC,SAAS,CAACH,IAAI,CAACI,OAAO,EAAE,CAAC;IAC1C,MAAMC,KAAK,GAAG,IAAI,CAACF,SAAS,CAACH,IAAI,CAACM,QAAQ,EAAE,GAAG,CAAC,CAAC;IACjD,MAAMC,IAAI,GAAGP,IAAI,CAACQ,WAAW,EAAE;IAC/B,OAAO,GAAGN,GAAG,IAAIG,KAAK,IAAIE,IAAI,EAAE;EAClC;EAEQJ,SAASA,CAACM,KAAa;IAC7B,OAAOA,KAAK,GAAG,EAAE,GAAG,GAAG,GAAGA,KAAK,GAAGA,KAAK,CAACC,QAAQ,EAAE;EACpD;EAESC,aAAaA,CAACC,KAAkC;IACvD,OAAOA,KAAK,KAAK,OAAO,GACpB,CACE,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,CACN,GACD,KAAK,CAACD,aAAa,CAACC,KAAK,CAAC;EAChC;;AAIK,IAAMC,0BAA0B,GAAhC,MAAMA,0BAA0B;EAAhCC,YAAA;IAGG,KAAAC,YAAY,GAAGrB,MAAM,CAAiBC,WAAc,CAAC;EAuB/D;EArBEqB,iBAAiBA,CAAChB,IAAc;IAC9B,OAAO,IAAI,CAACiB,gBAAgB,CAACjB,IAAI,CAAC;EACpC;EAEAkB,aAAaA,CAACC,UAAoB;IAChC,OAAO,IAAI,CAACF,gBAAgB,CAACE,UAAU,CAAC;EAC1C;EAEQF,gBAAgBA,CAACjB,IAAc;IACrC,IAAIA,IAAI,EAAE;MACR,MAAMoB,SAAS,GAAG,IAAI,CAACL,YAAY,CAACM,YAAY,CAACrB,IAAI,CAAC;MACtD,MAAMsB,YAAY,GAAGF,SAAS,KAAK,CAAC,GAAG,CAAC,GAAGA,SAAS,GAAG,CAAC;MACxD,MAAMG,KAAK,GAAG,IAAI,CAACR,YAAY,CAACS,eAAe,CAACxB,IAAI,EAAE,CAACsB,YAAY,CAAC;MAEpE,MAAMG,GAAG,GAAG,IAAI,CAACV,YAAY,CAACS,eAAe,CAACD,KAAK,EAAE,CAAC,CAAC;MAEvD,OAAO,IAAI3B,SAAS,CAAI2B,KAAK,EAAEE,GAAG,CAAC;IACrC;IAEA,OAAO,IAAI7B,SAAS,CAAI,IAAI,EAAE,IAAI,CAAC;EACrC;CACD;AA1BYiB,0BAA0B,GAAAa,UAAA,EADtCjC,UAAU,EAAE,C,EACAoB,0BAA0B,CA0BtC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}